PROTOBUF_SOURCES := \
	src/version.sql \
	src/util-base64.sql \
	src/protobuf.sql

PROTOBUF_FILES := $(patsubst src/%.sql,build/%.sql,$(PROTOBUF_SOURCES)) build/low_level_accessors.sql

# Define the ordered list of JSON-related source files
PROTOBUF_JSON_SOURCES := \
	src/message_to_number_json.sql \
	src/json_to_number_json.sql \
	src/number_json_to_message.sql \
	src/number_json_to_json.sql \
	src/message_to_json.sql \
	src/json_to_message.sql \
	src/wkt_timestamp.sql \
	src/wkt_duration.sql \
	src/wkt_struct.sql \
	src/wkt_field_mask.sql \
	src/wkt_time_common.sql \
	src/wkt_any.sql \
	src/wkt_empty.sql \
	src/wkt_wrappers.sql \
	src/wkt.sql \
	src/util-case-conv.sql \
	src/descriptor_set.sql \
	src/protobuf-descriptor.sql \
	src/json.sql \
	src/number_json.sql

PROTOBUF_JSON_FILES := $(patsubst src/%.sql,build/%.sql,$(PROTOBUF_JSON_SOURCES)) build/_pb_options_proto.pb.sql build/well_known_proto.pb.sql

ALL_SQL_FILES := $(PROTOBUF_FILES) $(PROTOBUF_JSON_FILES)

.PHONY: build
build: protobuf.sql protoc-gen-mysql mysql-coverage mysql-ftrace

protobuf.sql: $(ALL_SQL_FILES)
	set -euo pipefail
	$(RM) $@.tmp
	echo "-- Code generated by common.mk; DO NOT EDIT." > $@.tmp
	$(foreach file,$(ALL_SQL_FILES),echo >> $@.tmp && cat $(file) >> $@.tmp;)
	mv $@.tmp $@

.PHONY: protoc-gen-mysql
protoc-gen-mysql:
	go build ./cmd/protoc-gen-mysql/

.PHONY: mysql-coverage
mysql-coverage:
	go build ./cmd/mysql-coverage

.PHONY: mysql-ftrace
mysql-ftrace:
	go build ./cmd/mysql-ftrace

build/%.sql: src/%.sql
	mkdir -p build
	cp $^ $@

.PHONY: build/low_level_accessors.sql
build/low_level_accessors.sql:
	go run cmd/protobuf-accessors/main.go > $@.tmp
	mv $@.tmp $@

.PHONY: build/well_known_proto.pb.sql
build/well_known_proto.pb.sql:
	go run cmd/generate-descriptorsets/main.go > $@.tmp
	mv $@.tmp $@

.PHONY: build/_pb_options_proto.pb.sql
build/_pb_options_proto.pb.sql:
	protoc --descriptor_set_out=build/options.binpb \
		--include_imports \
		--proto_path=src/ \
		src/json_options.proto \
		src/marshal_options.proto
	go run ./cmd/protoc-gen-mysql \
		--descriptor_set_in=build/options.binpb \
		--name=_pb_options_proto \
		--file_naming_strategy=single \
		--prefix_map=mysqlprotobuf=pb_ \
		--generate_methods \
		--mysql_out=build/

.PHONY: reload
reload: $(ALL_SQL_FILES) ensure-test-database purge
	$(foreach file,$(ALL_SQL_FILES),$(MYSQL_COMMAND) < $(file);)

.PHONY: purge
purge: ensure-test-database
	$(MYSQL_COMMAND) -N -B -e "SELECT CONCAT('DROP ', r.routine_type, ' IF EXISTS ', r.routine_name, ';') AS DROP_STATEMENTS FROM information_schema.routines r WHERE r.routine_schema = database() AND (r.routine_name LIKE 'pb_%' OR r.routine_name LIKE '_pb_%');" | $(MYSQL_COMMAND)

.PHONY: ensure-test-database
ensure-test-database: download-mysql
	$(MYSQL_COMMAND_NO_DB) -e 'CREATE DATABASE IF NOT EXISTS test';

internal/mysql/sqlflowparser/mysql_ast_parser.go: internal/mysql/sqlflowparser/mysql_ast.peg
	go tool pigeon -o $@ $<

.PHONY: format
format:
	go tool gofumpt -l -w .
	find src/ -name "*.sql" -type f -exec sed -i 's/[[:blank:]]*$$//' {} +

.PHONY: lint
lint:
	go tool gofumpt -d .
	go tool golangci-lint run

# Generate Go code for json_options.proto in internal/jsonoptionspb
internal/jsonoptionspb/json_options.pb.go: src/json_options.proto
	@echo "Generating Go protobuf code for json_options.proto..."
	mkdir -p internal/jsonoptionspb
	protoc --proto_path=src \
		--go_out=internal/jsonoptionspb \
		--go_opt=paths=source_relative \
		--go_opt=Mjson_options.proto='github.com/eiiches/mysql-protobuf-functions/internal/jsonoptionspb' \
		src/json_options.proto

# Generate Go code for marshal_options.proto in internal/marshaloptionspb
internal/marshaloptionspb/marshal_options.pb.go: src/marshal_options.proto
	@echo "Generating Go protobuf code for marshal_options.proto..."
	mkdir -p internal/marshaloptionspb
	protoc --proto_path=src \
		--go_out=internal/marshaloptionspb \
		--go_opt=paths=source_relative \
		--go_opt=Mmarshal_options.proto='github.com/eiiches/mysql-protobuf-functions/internal/marshaloptionspb' \
		src/marshal_options.proto

# Generate Go code for descriptor_set.proto in internal/descriptorsetpb
internal/descriptorsetpb/descriptor_set.pb.go: src/descriptor_set.proto
	@echo "Generating Go protobuf code for descriptor_set.proto..."
	mkdir -p internal/descriptorsetpb
	protoc --proto_path=src \
		--go_out=internal/descriptorsetpb \
		--go_opt=paths=source_relative \
		--go_opt=Mdescriptor_set.proto='github.com/eiiches/mysql-protobuf-functions/internal/descriptorsetpb' \
		src/descriptor_set.proto

.PHONY: test
test: purge reload ensure-test-database internal/jsonoptionspb/json_options.pb.go internal/marshaloptionspb/marshal_options.pb.go internal/descriptorsetpb/descriptor_set.pb.go
	go test ./internal/...
	go test ./tests -database "root@tcp($(MYSQL_HOST):$(MYSQL_PORT))/$(MYSQL_DATABASE)" -fuzz-iterations 20 $${GO_TEST_FLAGS:-}

.PHONY: clean
clean::
	$(RM) $(ALL_SQL_FILES)
