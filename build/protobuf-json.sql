-- Code generated by scripts/common.mk; DO NOT EDIT.

DELIMITER $$

DROP FUNCTION IF EXISTS _pb_util_snake_to_lower_camel $$
CREATE FUNCTION _pb_util_snake_to_lower_camel(s TEXT) RETURNS TEXT DETERMINISTIC
BEGIN
	-- TODO: implement
	RETURN s;
END $$

DROP PROCEDURE IF EXISTS _pb_wire_json_get_primitive_field_as_json $$
CREATE PROCEDURE _pb_wire_json_get_primitive_field_as_json(IN wire_json JSON, IN field_number INT, IN field_type INT, IN is_repeated BOOLEAN, IN has_field_presence BOOLEAN, IN emit_64bit_integers_as_numbers BOOLEAN, OUT field_json_value JSON)
BEGIN
	DECLARE message_text TEXT;
	DECLARE boolean_value BOOLEAN;
	DECLARE uint_value BIGINT UNSIGNED;
	DECLARE int_value BIGINT;

	CASE field_type
	WHEN 1 THEN -- double
		IF is_repeated THEN
			SET field_json_value = pb_wire_json_get_repeated_double_field_as_json_array(wire_json, field_number);
		ELSE
			SET field_json_value = CAST(pb_wire_json_get_double_field(wire_json, field_number, IF(has_field_presence, NULL, 0)) AS JSON);
		END IF;
	WHEN 2 THEN -- float
		IF is_repeated THEN
			SET field_json_value = pb_wire_json_get_repeated_float_field_as_json_array(wire_json, field_number);
		ELSE
			SET field_json_value = CAST(pb_wire_json_get_float_field(wire_json, field_number, IF(has_field_presence, NULL, 0)) AS JSON);
		END IF;
	WHEN 3 THEN -- int64
		IF is_repeated THEN
			IF emit_64bit_integers_as_numbers THEN
				SET field_json_value = pb_wire_json_get_repeated_int64_field_as_json_array(wire_json, field_number);
			ELSE
				SET field_json_value = pb_wire_json_get_repeated_int64_field_as_json_string_array(wire_json, field_number);
			END IF;
		ELSE
			SET int_value = pb_wire_json_get_int64_field(wire_json, field_number, IF(has_field_presence, NULL, 0));
			IF emit_64bit_integers_as_numbers THEN
				SET field_json_value = CAST(int_value AS JSON);
			ELSE
				SET field_json_value = JSON_QUOTE(CAST(int_value AS CHAR));
			END IF;
		END IF;
	WHEN 4 THEN -- uint64
		IF is_repeated THEN
			IF emit_64bit_integers_as_numbers THEN
				SET field_json_value = pb_wire_json_get_repeated_uint64_field_as_json_array(wire_json, field_number);
			ELSE
				SET field_json_value = pb_wire_json_get_repeated_uint64_field_as_json_string_array(wire_json, field_number);
			END IF;
		ELSE
			SET uint_value = pb_wire_json_get_uint64_field(wire_json, field_number, IF(has_field_presence, NULL, 0));
			IF emit_64bit_integers_as_numbers THEN
				SET field_json_value = CAST(uint_value AS JSON);
			ELSE
				SET field_json_value = JSON_QUOTE(CAST(uint_value AS CHAR));
			END IF;
		END IF;
	WHEN 5 THEN -- int32
		IF is_repeated THEN
			SET field_json_value = pb_wire_json_get_repeated_int32_field_as_json_array(wire_json, field_number);
		ELSE
			SET field_json_value = CAST(pb_wire_json_get_int32_field(wire_json, field_number, IF(has_field_presence, NULL, 0)) AS JSON);
		END IF;
	WHEN 6 THEN -- fixed64
		IF is_repeated THEN
			IF emit_64bit_integers_as_numbers THEN
				SET field_json_value = pb_wire_json_get_repeated_fixed64_field_as_json_array(wire_json, field_number);
			ELSE
				SET field_json_value = pb_wire_json_get_repeated_fixed64_field_as_json_string_array(wire_json, field_number);
			END IF;
		ELSE
			SET uint_value = pb_wire_json_get_fixed64_field(wire_json, field_number, IF(has_field_presence, NULL, 0));
			IF emit_64bit_integers_as_numbers THEN
				SET field_json_value = CAST(uint_value AS JSON);
			ELSE
				SET field_json_value = JSON_QUOTE(CAST(uint_value AS CHAR));
			END IF;
		END IF;
	WHEN 7 THEN -- fixed32
		IF is_repeated THEN
			SET field_json_value = pb_wire_json_get_repeated_fixed32_field_as_json_array(wire_json, field_number);
		ELSE
			SET field_json_value = CAST(pb_wire_json_get_fixed32_field(wire_json, field_number, IF(has_field_presence, NULL, 0)) AS JSON);
		END IF;
	WHEN 8 THEN -- bool
		IF is_repeated THEN
			SET field_json_value = pb_wire_json_get_repeated_bool_field_as_json_array(wire_json, field_number);
		ELSE
			SET boolean_value = pb_wire_json_get_bool_field(wire_json, field_number, IF(has_field_presence, NULL, FALSE));
			IF boolean_value IS NULL THEN
				SET field_json_value = NULL;
			ELSE
				-- See https://bugs.mysql.com/bug.php?id=79813
				SET field_json_value = CAST((boolean_value IS TRUE) AS JSON);
			END IF;
		END IF;
	WHEN 9 THEN -- string
		IF is_repeated THEN
			SET field_json_value = pb_wire_json_get_repeated_string_field_as_json_array(wire_json, field_number);
		ELSE
			SET field_json_value = JSON_QUOTE(pb_wire_json_get_string_field(wire_json, field_number, IF(has_field_presence, NULL, '')));
		END IF;
	WHEN 12 THEN -- bytes
		IF is_repeated THEN
			SET field_json_value = pb_wire_json_get_repeated_bytes_field_as_json_array(wire_json, field_number);
		ELSE
			SET field_json_value = JSON_QUOTE(TO_BASE64(pb_wire_json_get_bytes_field(wire_json, field_number, IF(has_field_presence, NULL, _binary X''))));
		END IF;
	WHEN 13 THEN -- uint32
		IF is_repeated THEN
			SET field_json_value = pb_wire_json_get_repeated_uint32_field_as_json_array(wire_json, field_number);
		ELSE
			SET field_json_value = CAST(pb_wire_json_get_uint32_field(wire_json, field_number, IF(has_field_presence, NULL, 0)) AS JSON);
		END IF;
	WHEN 15 THEN -- sfixed32
		IF is_repeated THEN
			SET field_json_value = pb_wire_json_get_repeated_sfixed32_field_as_json_array(wire_json, field_number);
		ELSE
			SET field_json_value = CAST(pb_wire_json_get_sfixed32_field(wire_json, field_number, IF(has_field_presence, NULL, 0)) AS JSON);
		END IF;
	WHEN 16 THEN -- sfixed64
		IF is_repeated THEN
			IF emit_64bit_integers_as_numbers THEN
				SET field_json_value = pb_wire_json_get_repeated_sfixed64_field_as_json_array(wire_json, field_number);
			ELSE
				SET field_json_value = pb_wire_json_get_repeated_sfixed64_field_as_json_string_array(wire_json, field_number);
			END IF;
		ELSE
			SET int_value = pb_wire_json_get_sfixed64_field(wire_json, field_number, IF(has_field_presence, NULL, 0));
			IF emit_64bit_integers_as_numbers THEN
				SET field_json_value = CAST(int_value AS JSON);
			ELSE
				SET field_json_value = JSON_QUOTE(CAST(int_value AS CHAR));
			END IF;
		END IF;
	WHEN 17 THEN -- sint32
		IF is_repeated THEN
			SET field_json_value = pb_wire_json_get_repeated_sint32_field_as_json_array(wire_json, field_number);
		ELSE
			SET field_json_value = CAST(pb_wire_json_get_sint32_field(wire_json, field_number, IF(has_field_presence, NULL, 0)) AS JSON);
		END IF;
	WHEN 18 THEN -- sint64
		IF is_repeated THEN
			IF emit_64bit_integers_as_numbers THEN
				SET field_json_value = pb_wire_json_get_repeated_sint64_field_as_json_array(wire_json, field_number);
			ELSE
				SET field_json_value = pb_wire_json_get_repeated_sint64_field_as_json_string_array(wire_json, field_number);
			END IF;
		ELSE
			SET int_value = pb_wire_json_get_sint64_field(wire_json, field_number, IF(has_field_presence, NULL, 0));
			IF emit_64bit_integers_as_numbers THEN
				SET field_json_value = CAST(int_value AS JSON);
			ELSE
				SET field_json_value = JSON_QUOTE(CAST(int_value AS CHAR));
			END IF;
		END IF;
	ELSE
		SET message_text = CONCAT('_pb_message_to_json: unknown field_type `', field_type, '` for field `', field_name, '` (', field_number, ').');
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = message_text;
	END CASE;
END $$

DELIMITER $$

-- Helper function to get message descriptor from descriptor set JSON
DROP FUNCTION IF EXISTS _pb_get_message_descriptor $$
CREATE FUNCTION _pb_get_message_descriptor(descriptor_set_json JSON, type_name TEXT) RETURNS JSON DETERMINISTIC
BEGIN
	DECLARE type_index JSON;
	DECLARE type_paths JSON;
	DECLARE kind INT;
	DECLARE file_path TEXT;
	DECLARE type_path TEXT;

	-- Get type index (element 2)
	SET type_index = JSON_EXTRACT(descriptor_set_json, '$[2]');

	-- Get paths for the type
	SET type_paths = JSON_EXTRACT(type_index, CONCAT('$."', type_name, '"'));

	IF type_paths IS NULL THEN
		RETURN NULL;
	END IF;

	-- Extract kind, file path and type path
	SET kind = JSON_EXTRACT(type_paths, '$[0]');
	SET file_path = JSON_UNQUOTE(JSON_EXTRACT(type_paths, '$[1]'));
	SET type_path = JSON_UNQUOTE(JSON_EXTRACT(type_paths, '$[2]'));

	-- Verify this is a message type (kind = 11)
	IF kind <> 11 THEN
		RETURN NULL;
	END IF;

	-- Return the message descriptor
	RETURN JSON_EXTRACT(descriptor_set_json, type_path);
END $$

-- Helper function to get enum descriptor from descriptor set JSON
DROP FUNCTION IF EXISTS _pb_get_enum_descriptor $$
CREATE FUNCTION _pb_get_enum_descriptor(descriptor_set_json JSON, type_name TEXT) RETURNS JSON DETERMINISTIC
BEGIN
	DECLARE type_index JSON;
	DECLARE type_paths JSON;
	DECLARE kind INT;
	DECLARE file_path TEXT;
	DECLARE type_path TEXT;

	-- Get type index (element 2)
	SET type_index = JSON_EXTRACT(descriptor_set_json, '$[2]');

	-- Get paths for the type
	SET type_paths = JSON_EXTRACT(type_index, CONCAT('$."', type_name, '"'));

	IF type_paths IS NULL THEN
		RETURN NULL;
	END IF;

	-- Extract kind, file path and type path
	SET kind = JSON_EXTRACT(type_paths, '$[0]');
	SET file_path = JSON_UNQUOTE(JSON_EXTRACT(type_paths, '$[1]'));
	SET type_path = JSON_UNQUOTE(JSON_EXTRACT(type_paths, '$[2]'));

	-- Verify this is an enum type (kind = 14)
	IF kind <> 14 THEN
		RETURN NULL;
	END IF;

	-- Return the enum descriptor
	RETURN JSON_EXTRACT(descriptor_set_json, type_path);
END $$

-- Helper procedure to convert enum value to JSON using descriptor set
DROP PROCEDURE IF EXISTS _pb_enum_to_json $$
CREATE PROCEDURE _pb_enum_to_json(IN descriptor_set_json JSON, IN full_type_name TEXT, IN enum_value_number INT, OUT result JSON)
proc: BEGIN
	DECLARE enum_descriptor JSON;
	DECLARE enum_values JSON;
	DECLARE enum_value JSON;
	DECLARE enum_count INT;
	DECLARE enum_index INT;
	DECLARE current_number INT;
	DECLARE current_name TEXT;

	SET enum_descriptor = _pb_get_enum_descriptor(descriptor_set_json, full_type_name);

	IF enum_descriptor IS NULL THEN
		SET result = NULL;
		LEAVE proc;
	END IF;

	-- Get enum values array (field 2 in EnumDescriptorProto)
	SET enum_values = JSON_EXTRACT(enum_descriptor, '$."2"');

	IF enum_values IS NULL THEN
		SET result = NULL;
		LEAVE proc;
	END IF;

	SET enum_count = JSON_LENGTH(enum_values);
	SET enum_index = 0;

	-- Find enum value by number
	WHILE enum_index < enum_count DO
		SET enum_value = JSON_EXTRACT(enum_values, CONCAT('$[', enum_index, ']'));
		SET current_number = JSON_EXTRACT(enum_value, '$."2"'); -- number field

		IF current_number = enum_value_number THEN
			SET current_name = JSON_UNQUOTE(JSON_EXTRACT(enum_value, '$."1"')); -- name field
			SET result = JSON_QUOTE(current_name);
			LEAVE proc;
		END IF;

		SET enum_index = enum_index + 1;
	END WHILE;

	-- If not found, return the numeric value (Proto3 behavior for unknown enum values)
	IF result IS NULL THEN
		SET result = CAST(enum_value_number AS JSON);
	END IF;
END $$

-- Helper function to get file descriptor for a type
DROP FUNCTION IF EXISTS _pb_get_file_descriptor $$
CREATE FUNCTION _pb_get_file_descriptor(descriptor_set_json JSON, type_name TEXT) RETURNS JSON DETERMINISTIC
BEGIN
	DECLARE type_index JSON;
	DECLARE type_paths JSON;
	DECLARE file_path TEXT;

	-- Get type index (element 2)
	SET type_index = JSON_EXTRACT(descriptor_set_json, '$[2]');

	-- Get paths for the type
	SET type_paths = JSON_EXTRACT(type_index, CONCAT('$."', type_name, '"'));

	IF type_paths IS NULL THEN
		RETURN NULL;
	END IF;

	-- Extract file path (now at index 1)
	SET file_path = JSON_UNQUOTE(JSON_EXTRACT(type_paths, '$[1]'));

	-- Return the file descriptor
	RETURN JSON_EXTRACT(descriptor_set_json, file_path);
END $$

-- Helper function to get the appropriate descriptor set for Google well-known types
DROP FUNCTION IF EXISTS _pb_get_wkt_descriptor_set $$
CREATE FUNCTION _pb_get_wkt_descriptor_set(full_type_name TEXT) RETURNS JSON DETERMINISTIC
BEGIN
	-- For Google well-known types, use built-in descriptor functions
	CASE
	WHEN full_type_name IN ('.google.protobuf.Struct', '.google.protobuf.Value', '.google.protobuf.ListValue', '.google.protobuf.NullValue') THEN
		RETURN _pb_google_struct_proto();
	WHEN full_type_name = '.google.protobuf.FieldMask' THEN
		RETURN _pb_google_field_mask_proto();
	WHEN full_type_name IN ('.google.protobuf.DoubleValue', '.google.protobuf.FloatValue', '.google.protobuf.Int64Value', '.google.protobuf.UInt64Value', '.google.protobuf.Int32Value', '.google.protobuf.UInt32Value', '.google.protobuf.BoolValue', '.google.protobuf.StringValue', '.google.protobuf.BytesValue') THEN
		RETURN _pb_google_wrappers_proto();
	WHEN full_type_name = '.google.protobuf.Empty' THEN
		RETURN _pb_google_empty_proto();
	WHEN full_type_name = '.google.protobuf.Any' THEN
		RETURN _pb_google_any_proto();
	WHEN full_type_name = '.google.protobuf.Timestamp' THEN
		RETURN _pb_google_timestamp_proto();
	WHEN full_type_name = '.google.protobuf.Duration' THEN
		RETURN _pb_google_duration_proto();
	ELSE
		-- Return NULL for types that don't match or should use regular WKT handling
		RETURN NULL;
	END CASE;
END $$

-- Main procedure for converting protobuf message to JSON using descriptor set
DROP PROCEDURE IF EXISTS _pb_wire_json_to_json_proc $$
CREATE PROCEDURE _pb_wire_json_to_json_proc(IN descriptor_set_json JSON, IN full_type_name TEXT, IN wire_json JSON, IN as_number_json BOOLEAN, IN emit_default_values BOOLEAN, OUT result JSON)
proc: BEGIN
	DECLARE CUSTOM_EXCEPTION CONDITION FOR SQLSTATE '45000';

	DECLARE message_text TEXT;
	DECLARE message_descriptor JSON;
	DECLARE file_descriptor JSON;
	DECLARE syntax TEXT;
	DECLARE fields JSON;
	DECLARE field_count INT;
	DECLARE field_index INT;
	DECLARE field_descriptor JSON;

	-- Field properties
	DECLARE field_number INT;
	DECLARE field_name TEXT;
	DECLARE field_label INT;
	DECLARE field_type INT;
	DECLARE field_type_name TEXT;
	DECLARE json_name TEXT;
	DECLARE proto3_optional BOOLEAN;
	DECLARE oneof_index INT;
	DECLARE default_value TEXT;

	-- Processing variables
	DECLARE is_repeated BOOLEAN;
	DECLARE has_field_presence BOOLEAN;
	DECLARE field_json_value JSON;
	DECLARE json_field_name TEXT;
	DECLARE bytes_value LONGBLOB;
	DECLARE nested_json_value JSON;
	DECLARE elements JSON;
	DECLARE element JSON;
	DECLARE element_count INT;
	DECLARE element_index INT;
	DECLARE field_enum_value INT;

	-- Map handling
	DECLARE is_map BOOLEAN;
	DECLARE map_entry_descriptor JSON;
	DECLARE map_key_field JSON;
	DECLARE map_value_field JSON;
	DECLARE map_key_type INT;
	DECLARE map_value_type INT;
	DECLARE map_value_type_name TEXT;
	DECLARE map_key JSON;
	DECLARE map_value JSON;

	-- Oneof handling
	DECLARE oneofs JSON;
	DECLARE oneof_priority INT;
	DECLARE oneof_priority_prev INT;

	DECLARE wkt_descriptor_set JSON;

	SET @@SESSION.max_sp_recursion_depth = 255;

	-- Handle well-known types first (only for regular JSON, not number JSON)
	IF full_type_name LIKE '.google.protobuf.%' THEN
		IF as_number_json THEN -- For ProtoNumberJSON, no special WKT handling is performed.
			SET wkt_descriptor_set = _pb_get_wkt_descriptor_set(full_type_name);
			IF wkt_descriptor_set IS NOT NULL THEN
				SET descriptor_set_json = wkt_descriptor_set;
			END IF;
		ELSE -- For ProtoJSON, we use special WKT decoders.
			SET result = _pb_wire_json_decode_wkt_as_json(wire_json, full_type_name);
			IF result IS NOT NULL THEN
				LEAVE proc;
			END IF;
		END IF;
	END IF;

	-- Get message descriptor
	SET message_descriptor = _pb_get_message_descriptor(descriptor_set_json, full_type_name);

	IF message_descriptor IS NULL THEN
		SET message_text = CONCAT('_pb_wire_json_to_json: message type `', full_type_name, '` not found in descriptor set');
		SIGNAL CUSTOM_EXCEPTION SET MESSAGE_TEXT = message_text;
	END IF;

	-- Get file descriptor to determine syntax
	SET file_descriptor = _pb_get_file_descriptor(descriptor_set_json, full_type_name);
	SET syntax = JSON_UNQUOTE(JSON_EXTRACT(file_descriptor, '$."12"')); -- syntax field
	IF syntax IS NULL THEN
		SET syntax = 'proto2'; -- default
	END IF;

	SET result = JSON_OBJECT();
	SET oneofs = JSON_OBJECT();

	-- Get fields array (field 2 in DescriptorProto)
	SET fields = JSON_EXTRACT(message_descriptor, '$."2"');

	IF fields IS NOT NULL THEN
		SET field_count = JSON_LENGTH(fields);
		SET field_index = 0;

		WHILE field_index < field_count DO
			SET field_descriptor = JSON_EXTRACT(fields, CONCAT('$[', field_index, ']'));

			-- Extract field properties from FieldDescriptorProto
			SET field_number = JSON_EXTRACT(field_descriptor, '$."3"'); -- number
			SET field_name = JSON_UNQUOTE(JSON_EXTRACT(field_descriptor, '$."1"')); -- name
			SET field_label = JSON_EXTRACT(field_descriptor, '$."4"'); -- label
			SET field_type = JSON_EXTRACT(field_descriptor, '$."5"'); -- type
			SET field_type_name = JSON_UNQUOTE(JSON_EXTRACT(field_descriptor, '$."6"')); -- type_name
			SET json_name = JSON_UNQUOTE(JSON_EXTRACT(field_descriptor, '$."10"')); -- json_name
			SET proto3_optional = COALESCE(CAST(JSON_EXTRACT(field_descriptor, '$."17"') AS UNSIGNED), FALSE); -- proto3_optional
			SET oneof_index = JSON_EXTRACT(field_descriptor, '$."9"'); -- oneof_index
			SET default_value = JSON_UNQUOTE(JSON_EXTRACT(field_descriptor, '$."7"')); -- default_value

			SET is_repeated = (field_label = 3); -- LABEL_REPEATED

			-- Check if this is a map field
			SET is_map = FALSE;
			IF field_type = 11 AND field_type_name IS NOT NULL THEN -- TYPE_MESSAGE
				SET map_entry_descriptor = _pb_get_message_descriptor(descriptor_set_json, field_type_name);
				SET is_map = COALESCE(CAST(JSON_EXTRACT(map_entry_descriptor, '$."7"."7"') AS UNSIGNED), FALSE); -- map_entry
			END IF;

			-- Determine field presence
			SET has_field_presence =
				(syntax = 'proto2' AND field_label <> 3) -- proto2: all non-repeated fields
				OR (syntax = 'proto3'
					AND (
						(field_label = 1 AND proto3_optional) -- proto3 optional
						OR (field_label <> 3 AND field_type = 11) -- message fields
						OR (oneof_index IS NOT NULL) -- oneof fields
					));

			CASE field_type
			WHEN 10 THEN -- TYPE_GROUP (unsupported)
				SET message_text = CONCAT('_pb_wire_json_to_json: unsupported field_type `', field_type, '` for field `', field_name, '` (', field_number, ').');
				SIGNAL CUSTOM_EXCEPTION SET MESSAGE_TEXT = message_text;

			WHEN 11 THEN -- TYPE_MESSAGE
				IF is_map THEN
					-- Handle map fields
					SET elements = pb_wire_json_get_repeated_message_field_as_json_array(wire_json, field_number);
					SET element_count = JSON_LENGTH(elements);
					SET element_index = 0;
					SET field_json_value = JSON_OBJECT();

					-- Get map key/value field descriptors
					SET map_key_field = JSON_EXTRACT(map_entry_descriptor, '$."2"[0]'); -- first field (key)
					SET map_value_field = JSON_EXTRACT(map_entry_descriptor, '$."2"[1]'); -- second field (value)
					SET map_key_type = JSON_EXTRACT(map_key_field, '$."5"');
					SET map_value_type = JSON_EXTRACT(map_value_field, '$."5"');
					SET map_value_type_name = JSON_UNQUOTE(JSON_EXTRACT(map_value_field, '$."6"'));

					WHILE element_index < element_count DO
						SET element = pb_message_to_wire_json(FROM_BASE64(JSON_UNQUOTE(JSON_EXTRACT(elements, CONCAT('$[', element_index, ']')))));
						CALL _pb_wire_json_get_primitive_field_as_json(element, 1, map_key_type, FALSE, FALSE, as_number_json, map_key);

						IF map_value_type = 11 THEN -- message
							CALL _pb_message_to_json(descriptor_set_json, map_value_type_name, pb_wire_json_get_message_field(element, 2, NULL), as_number_json, emit_default_values, map_value);
						ELSEIF map_value_type = 14 THEN -- enum
							IF as_number_json THEN
								SET map_value = CAST(pb_wire_json_get_enum_field(element, 2, NULL) AS JSON);
							ELSE
								CALL _pb_enum_to_json(descriptor_set_json, map_value_type_name, pb_wire_json_get_enum_field(element, 2, NULL), map_value);
							END IF;
						ELSE
							CALL _pb_wire_json_get_primitive_field_as_json(element, 2, map_value_type, FALSE, TRUE, as_number_json, map_value);
						END IF;

						IF JSON_TYPE(map_key) = 'STRING' THEN
							SET field_json_value = JSON_SET(field_json_value, CONCAT('$.', map_key), map_value);
						ELSE
							SET field_json_value = JSON_SET(field_json_value, CONCAT('$."', map_key, '"'), map_value);
						END IF;

						SET element_index = element_index + 1;
					END WHILE;

					IF NOT emit_default_values AND element_count = 0 THEN
						SET field_json_value = NULL;
					END IF;

				ELSEIF is_repeated THEN
					-- Handle repeated message fields
					SET element_count = pb_wire_json_get_repeated_message_field_count(wire_json, field_number);
					SET element_index = 0;
					SET field_json_value = JSON_ARRAY();

					WHILE element_index < element_count DO
						SET bytes_value = pb_wire_json_get_repeated_message_field_element(wire_json, field_number, element_index);
						CALL _pb_message_to_json(descriptor_set_json, field_type_name, bytes_value, as_number_json, emit_default_values, nested_json_value);
						SET field_json_value = JSON_ARRAY_APPEND(field_json_value, '$', nested_json_value);
						SET element_index = element_index + 1;
					END WHILE;

					IF NOT emit_default_values AND element_count = 0 THEN
						SET field_json_value = NULL;
					END IF;
				ELSE
					-- Handle singular message fields
					SET bytes_value = pb_wire_json_get_message_field(wire_json, field_number, NULL);
					CALL _pb_message_to_json(descriptor_set_json, field_type_name, bytes_value, as_number_json, emit_default_values, field_json_value);
				END IF;

			WHEN 14 THEN -- TYPE_ENUM
				IF is_repeated THEN
					SET elements = pb_wire_json_get_repeated_enum_field_as_json_array(wire_json, field_number);
					SET element_count = JSON_LENGTH(elements);
					SET element_index = 0;
					SET field_json_value = JSON_ARRAY();

					WHILE element_index < element_count DO
						SET element = JSON_EXTRACT(elements, CONCAT('$[', element_index, ']'));
						IF as_number_json THEN
							SET field_json_value = JSON_ARRAY_APPEND(field_json_value, '$', CAST(element AS JSON));
						ELSE
							CALL _pb_enum_to_json(descriptor_set_json, field_type_name, element, nested_json_value);
							SET field_json_value = JSON_ARRAY_APPEND(field_json_value, '$', nested_json_value);
						END IF;
						SET element_index = element_index + 1;
					END WHILE;

					IF NOT emit_default_values AND element_count = 0 THEN
						SET field_json_value = NULL;
					END IF;
				ELSE
					-- Handle singular enum fields
					SET field_enum_value = pb_wire_json_get_enum_field(wire_json, field_number, NULL);
					IF syntax = 'proto3' AND NOT has_field_presence AND field_enum_value = 0 THEN
						SET field_enum_value = NULL;
					END IF;

					SET field_json_value = NULL;
					IF as_number_json THEN -- ProtoNumberJSON: always omit default values
						IF field_enum_value IS NOT NULL THEN
							SET field_json_value = CAST(field_enum_value AS JSON);
						END IF;
					ELSE -- ProtoJSON:
						IF field_enum_value IS NOT NULL OR (emit_default_values AND NOT has_field_presence) THEN
							IF field_enum_value IS NULL THEN
								SET field_enum_value = 0;
							END IF;
							CALL _pb_enum_to_json(descriptor_set_json, field_type_name, field_enum_value, field_json_value);
						END IF;
					END IF;
				END IF;
			ELSE
				-- Handle primitive types using existing function
				CALL _pb_wire_json_get_primitive_field_as_json(wire_json, field_number, field_type, is_repeated, has_field_presence, as_number_json, field_json_value);
				IF is_repeated THEN
					IF NOT emit_default_values AND JSON_LENGTH(field_json_value) = 0 THEN
						SET field_json_value = NULL;
					END IF;
				ELSE
					IF NOT has_field_presence THEN
						IF syntax = 'proto3' AND _pb_is_proto3_default_value(field_type, field_json_value) THEN
							SET field_json_value = NULL;
						END IF;
						IF emit_default_values AND field_json_value IS NULL THEN
							SET field_json_value = _pb_get_proto3_default_value(field_type, as_number_json);
						END IF;
					END IF;
				END IF;
			END CASE;

			-- Add field to result if it has a value
			IF field_json_value IS NOT NULL THEN
				IF as_number_json THEN
					SET json_field_name = CAST(field_number AS CHAR);
				ELSE
					SET json_field_name = IF(json_name IS NOT NULL, json_name, _pb_util_snake_to_lower_camel(field_name));
				END IF;

				IF oneof_index IS NOT NULL AND NOT proto3_optional THEN
					-- Handle oneof fields
					SET elements = JSON_EXTRACT(wire_json, CONCAT('$."', field_number, '"'));
					SET oneof_priority = JSON_EXTRACT(elements, CONCAT('$[', JSON_LENGTH(elements)-1, '].i'));
					SET oneof_priority_prev = JSON_EXTRACT(oneofs, CONCAT('$."', oneof_index, '".i'));

					IF oneof_priority_prev IS NULL OR oneof_priority_prev < oneof_priority THEN
						SET oneofs = JSON_SET(oneofs, CONCAT('$."', oneof_index, '"'), JSON_OBJECT('i', oneof_priority, 'v', JSON_OBJECT(json_field_name, field_json_value)));
					END IF;
				ELSE
					-- Regular field
					IF as_number_json THEN
						-- For number JSON format, field names are numeric and need to be quoted in JSON paths
						SET result = JSON_SET(result, CONCAT('$."', json_field_name, '"'), field_json_value);
					ELSE
						SET result = JSON_SET(result, CONCAT('$.', json_field_name), field_json_value);
					END IF;
				END IF;
			END IF;

			SET field_index = field_index + 1;
		END WHILE;
	END IF;

	-- Add oneof fields to result
	SET elements = JSON_EXTRACT(oneofs, '$.*.v');
	SET element_count = JSON_LENGTH(elements);
	SET element_index = 0;

	WHILE element_index < element_count DO
		SET field_json_value = JSON_EXTRACT(elements, CONCAT('$[', element_index, ']'));
		SET result = JSON_MERGE(result, field_json_value);
		SET element_index = element_index + 1;
	END WHILE;
END $$

-- Wrapper procedure that converts LONGBLOB to wire_json and delegates
DROP PROCEDURE IF EXISTS _pb_message_to_json $$
CREATE PROCEDURE _pb_message_to_json(IN descriptor_set_json JSON, IN full_type_name TEXT, IN message LONGBLOB, IN as_number_json BOOLEAN, IN emit_default_values BOOLEAN, OUT result JSON)
BEGIN
	DECLARE message_text TEXT;

	-- Validate type name starts with dot
	IF full_type_name NOT LIKE '.%' THEN
		SET message_text = CONCAT('_pb_message_to_json: type name `', full_type_name, '` must start with a dot');
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = message_text;
	END IF;

	IF message IS NULL THEN
		SET result = NULL;
	ELSE
		CALL _pb_wire_json_to_json_proc(descriptor_set_json, full_type_name, pb_message_to_wire_json(message), as_number_json, emit_default_values, result);
	END IF;
END $$

DROP PROCEDURE IF EXISTS _pb_wire_json_to_json $$
CREATE PROCEDURE _pb_wire_json_to_json(IN descriptor_set_json JSON, IN full_type_name TEXT, IN wire_json JSON, IN as_number_json BOOLEAN, IN emit_default_values BOOLEAN, OUT result JSON)
BEGIN
	DECLARE message_text TEXT;

	-- Validate type name starts with dot
	IF full_type_name NOT LIKE '.%' THEN
		SET message_text = CONCAT('_pb_wire_json_to_json: type name `', full_type_name, '` must start with a dot');
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = message_text;
	END IF;

	IF wire_json IS NULL THEN
		SET result = NULL;
	ELSE
		CALL _pb_wire_json_to_json_proc(descriptor_set_json, full_type_name, wire_json, as_number_json, emit_default_values, result);
	END IF;
END $$

-- Public function interface
DROP FUNCTION IF EXISTS pb_message_to_json $$
CREATE FUNCTION pb_message_to_json(descriptor_set_json JSON, type_name TEXT, message LONGBLOB) RETURNS JSON DETERMINISTIC
BEGIN
	DECLARE result JSON;
	CALL _pb_message_to_json(descriptor_set_json, type_name, message, FALSE, TRUE, result);
	RETURN result;
END $$

-- Private function interface for protonumberjson format
DROP FUNCTION IF EXISTS _pb_message_to_number_json $$
CREATE FUNCTION _pb_message_to_number_json(descriptor_set_json JSON, type_name TEXT, message LONGBLOB) RETURNS JSON DETERMINISTIC
BEGIN
	DECLARE result JSON;
	CALL _pb_message_to_json(descriptor_set_json, type_name, message, TRUE, FALSE, result);
	RETURN result;
END $$

-- Public function interface for wire_json input
DROP FUNCTION IF EXISTS pb_wire_json_to_json $$
CREATE FUNCTION pb_wire_json_to_json(descriptor_set_json JSON, type_name TEXT, wire_json JSON) RETURNS JSON DETERMINISTIC
BEGIN
	DECLARE result JSON;
	CALL _pb_wire_json_to_json(descriptor_set_json, type_name, wire_json, FALSE, TRUE, result);
	RETURN result;
END $$

-- Private function interface for wire_json input with number JSON format
DROP FUNCTION IF EXISTS _pb_wire_json_to_number_json $$
CREATE FUNCTION _pb_wire_json_to_number_json(descriptor_set_json JSON, type_name TEXT, wire_json JSON) RETURNS JSON DETERMINISTIC
BEGIN
	DECLARE result JSON;
	CALL _pb_wire_json_to_json(descriptor_set_json, type_name, wire_json, TRUE, FALSE, result);
	RETURN result;
END $$

DELIMITER $$

-- Helper function to convert JSON value to BIGINT SIGNED, handling both numbers and strings
DROP FUNCTION IF EXISTS _pb_json_to_signed_int $$
CREATE FUNCTION _pb_json_to_signed_int(json_value JSON) RETURNS BIGINT DETERMINISTIC
BEGIN
	IF JSON_TYPE(json_value) = 'STRING' THEN
		RETURN CAST(JSON_UNQUOTE(json_value) AS SIGNED);
	ELSE
		RETURN CAST(json_value AS SIGNED);
	END IF;
END $$

-- Helper function to convert JSON value to BIGINT UNSIGNED, handling both numbers and strings
DROP FUNCTION IF EXISTS _pb_json_to_unsigned_int $$
CREATE FUNCTION _pb_json_to_unsigned_int(json_value JSON) RETURNS BIGINT UNSIGNED DETERMINISTIC
BEGIN
	IF JSON_TYPE(json_value) = 'STRING' THEN
		RETURN CAST(JSON_UNQUOTE(json_value) AS UNSIGNED);
	ELSE
		RETURN CAST(json_value AS UNSIGNED);
	END IF;
END $$

-- Helper procedure to convert JSON enum value to number using descriptor set
DROP PROCEDURE IF EXISTS _pb_enum_from_json $$
CREATE PROCEDURE _pb_enum_from_json(IN descriptor_set_json JSON, IN full_type_name TEXT, IN enum_value_json JSON, OUT result INT)
proc: BEGIN
	DECLARE enum_descriptor JSON;
	DECLARE enum_values JSON;
	DECLARE enum_value JSON;
	DECLARE enum_count INT;
	DECLARE enum_index INT;
	DECLARE current_number INT;
	DECLARE current_name TEXT;
	DECLARE input_value TEXT;

	SET enum_descriptor = _pb_get_enum_descriptor(descriptor_set_json, full_type_name);

	IF enum_descriptor IS NULL THEN
		SET result = NULL;
		LEAVE proc;
	END IF;

	-- Get enum values array (field 2 in EnumDescriptorProto)
	SET enum_values = JSON_EXTRACT(enum_descriptor, '$."2"');

	IF enum_values IS NULL THEN
		SET result = NULL;
		LEAVE proc;
	END IF;

	-- Handle both string and number inputs
	IF JSON_TYPE(enum_value_json) = 'STRING' THEN
		SET input_value = JSON_UNQUOTE(enum_value_json);

		-- Find enum value by name
		SET enum_count = JSON_LENGTH(enum_values);
		SET enum_index = 0;

		WHILE enum_index < enum_count DO
			SET enum_value = JSON_EXTRACT(enum_values, CONCAT('$[', enum_index, ']'));
			SET current_name = JSON_UNQUOTE(JSON_EXTRACT(enum_value, '$."1"')); -- name field

			IF current_name = input_value THEN
				SET current_number = JSON_EXTRACT(enum_value, '$."2"'); -- number field
				SET result = current_number;
				LEAVE proc;
			END IF;

			SET enum_index = enum_index + 1;
		END WHILE;

		-- If not found by name, return null
		SET result = NULL;
	ELSEIF JSON_TYPE(enum_value_json) = 'INTEGER' THEN
		-- Input is a number, use directly
		SET result = CAST(enum_value_json AS SIGNED);
	ELSE
		SET result = NULL;
	END IF;
END $$

-- Helper function to check if a value is a proto3 default value
DROP FUNCTION IF EXISTS _pb_is_proto3_default_value $$
CREATE FUNCTION _pb_is_proto3_default_value(field_type INT, json_value JSON) RETURNS BOOLEAN DETERMINISTIC
BEGIN
	DECLARE message_text TEXT;
	CASE field_type
	WHEN 1 THEN -- TYPE_DOUBLE
		RETURN CAST(json_value AS DOUBLE) = 0.0;
	WHEN 2 THEN -- TYPE_FLOAT
		RETURN CAST(json_value AS FLOAT) = 0.0;
	WHEN 3 THEN -- TYPE_INT64
		RETURN _pb_json_to_signed_int(json_value) = 0;
	WHEN 4 THEN -- TYPE_UINT64
		RETURN _pb_json_to_unsigned_int(json_value) = 0;
	WHEN 5 THEN -- TYPE_INT32
		RETURN _pb_json_to_signed_int(json_value) = 0;
	WHEN 6 THEN -- TYPE_FIXED64
		RETURN _pb_json_to_unsigned_int(json_value) = 0;
	WHEN 7 THEN -- TYPE_FIXED32
		RETURN _pb_json_to_unsigned_int(json_value) = 0;
	WHEN 8 THEN -- TYPE_BOOL
		RETURN json_value = CAST(false AS JSON);
	WHEN 9 THEN -- TYPE_STRING
		RETURN JSON_UNQUOTE(json_value) = '';
	WHEN 12 THEN -- TYPE_BYTES
		RETURN JSON_UNQUOTE(json_value) = '';
	WHEN 13 THEN -- TYPE_UINT32
		RETURN _pb_json_to_unsigned_int(json_value) = 0;
	WHEN 15 THEN -- TYPE_SFIXED32
		RETURN _pb_json_to_signed_int(json_value) = 0;
	WHEN 16 THEN -- TYPE_SFIXED64
		RETURN _pb_json_to_signed_int(json_value) = 0;
	WHEN 17 THEN -- TYPE_SINT32
		RETURN _pb_json_to_signed_int(json_value) = 0;
	WHEN 18 THEN -- TYPE_SINT64
		RETURN _pb_json_to_signed_int(json_value) = 0;
	WHEN 14 THEN -- TYPE_ENUM
		-- Expects numeric enum value (conversion should be done elsewhere)
		RETURN CAST(json_value AS SIGNED) = 0;
	ELSE
		-- For unknown types, raise error
		SET message_text = CONCAT('_pb_is_proto3_default_value: unsupported field_type ', field_type);
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = message_text;
	END CASE;
END $$

-- Helper function to get proto3 default value for a field type
DROP FUNCTION IF EXISTS _pb_get_proto3_default_value $$
CREATE FUNCTION _pb_get_proto3_default_value(field_type INT, emit_64bit_integers_as_numbers BOOLEAN) RETURNS JSON DETERMINISTIC
BEGIN
	DECLARE message_text TEXT;
	CASE field_type
	WHEN 1 THEN -- TYPE_DOUBLE
		RETURN CAST(0.0 AS JSON);
	WHEN 2 THEN -- TYPE_FLOAT
		RETURN CAST(0.0 AS JSON);
	WHEN 3 THEN -- TYPE_INT64
		IF emit_64bit_integers_as_numbers THEN
			RETURN CAST(0 AS JSON);
		ELSE
			RETURN JSON_QUOTE('0');
		END IF;
	WHEN 4 THEN -- TYPE_UINT64
		IF emit_64bit_integers_as_numbers THEN
			RETURN CAST(0 AS JSON);
		ELSE
			RETURN JSON_QUOTE('0');
		END IF;
	WHEN 5 THEN -- TYPE_INT32
		RETURN CAST(0 AS JSON);
	WHEN 6 THEN -- TYPE_FIXED64
		IF emit_64bit_integers_as_numbers THEN
			RETURN CAST(0 AS JSON);
		ELSE
			RETURN JSON_QUOTE('0');
		END IF;
	WHEN 7 THEN -- TYPE_FIXED32
		RETURN CAST(0 AS JSON);
	WHEN 8 THEN -- TYPE_BOOL
		RETURN CAST(false AS JSON);
	WHEN 9 THEN -- TYPE_STRING
		RETURN JSON_QUOTE('');
	WHEN 12 THEN -- TYPE_BYTES
		RETURN JSON_QUOTE('');
	WHEN 13 THEN -- TYPE_UINT32
		RETURN CAST(0 AS JSON);
	WHEN 15 THEN -- TYPE_SFIXED32
		RETURN CAST(0 AS JSON);
	WHEN 16 THEN -- TYPE_SFIXED64
		IF emit_64bit_integers_as_numbers THEN
			RETURN CAST(0 AS JSON);
		ELSE
			RETURN JSON_QUOTE('0');
		END IF;
	WHEN 17 THEN -- TYPE_SINT32
		RETURN CAST(0 AS JSON);
	WHEN 18 THEN -- TYPE_SINT64
		IF emit_64bit_integers_as_numbers THEN
			RETURN CAST(0 AS JSON);
		ELSE
			RETURN JSON_QUOTE('0');
		END IF;
	WHEN 14 THEN -- TYPE_ENUM
		RETURN CAST(0 AS JSON);
	ELSE
		-- For unknown types, raise error
		SET message_text = CONCAT('_pb_get_proto3_default_value: unsupported field_type ', field_type);
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = message_text;
	END CASE;
END $$

-- Helper procedure to set primitive field values in wire_json format
DROP PROCEDURE IF EXISTS _pb_json_set_primitive_field_as_wire_json $$
CREATE PROCEDURE _pb_json_set_primitive_field_as_wire_json(IN wire_json JSON, IN field_number INT, IN field_type INT, IN is_repeated BOOLEAN, IN json_value JSON, IN use_packed BOOLEAN, IN syntax TEXT, IN has_field_presence BOOLEAN, OUT result JSON)
proc: BEGIN
	DECLARE element_count INT;
	DECLARE element_index INT;
	DECLARE element JSON;
	DECLARE temp_wire_json JSON;

	SET result = wire_json;

	-- Skip encoding proto3 default values for fields without explicit presence
	IF NOT is_repeated AND syntax = 'proto3' AND NOT has_field_presence AND _pb_is_proto3_default_value(field_type, json_value) THEN
		-- Do not encode default values in proto3 for fields without explicit presence
		LEAVE proc;
	END IF;

	IF is_repeated THEN
		-- Handle repeated primitive fields
		SET element_count = JSON_LENGTH(json_value);
		SET element_index = 0;

		WHILE element_index < element_count DO
			SET element = JSON_EXTRACT(json_value, CONCAT('$[', element_index, ']'));

			CASE field_type
			WHEN 1 THEN -- TYPE_DOUBLE
				SET result = pb_wire_json_add_repeated_double_field_element(result, field_number, CAST(element AS DOUBLE), use_packed);
			WHEN 2 THEN -- TYPE_FLOAT
				SET result = pb_wire_json_add_repeated_float_field_element(result, field_number, CAST(element AS FLOAT), use_packed);
			WHEN 3 THEN -- TYPE_INT64
				SET result = pb_wire_json_add_repeated_int64_field_element(result, field_number, _pb_json_to_signed_int(element), use_packed);
			WHEN 4 THEN -- TYPE_UINT64
				SET result = pb_wire_json_add_repeated_uint64_field_element(result, field_number, _pb_json_to_unsigned_int(element), use_packed);
			WHEN 5 THEN -- TYPE_INT32
				SET result = pb_wire_json_add_repeated_int32_field_element(result, field_number, _pb_json_to_signed_int(element), use_packed);
			WHEN 6 THEN -- TYPE_FIXED64
				SET result = pb_wire_json_add_repeated_fixed64_field_element(result, field_number, _pb_json_to_unsigned_int(element), use_packed);
			WHEN 7 THEN -- TYPE_FIXED32
				SET result = pb_wire_json_add_repeated_fixed32_field_element(result, field_number, _pb_json_to_unsigned_int(element), use_packed);
			WHEN 8 THEN -- TYPE_BOOL
				SET result = pb_wire_json_add_repeated_bool_field_element(result, field_number, IF(element, TRUE, FALSE), use_packed);
			WHEN 9 THEN -- TYPE_STRING
				SET result = pb_wire_json_add_repeated_string_field_element(result, field_number, JSON_UNQUOTE(element));
			WHEN 10 THEN -- TYPE_SFIXED64
				SET result = pb_wire_json_add_repeated_sfixed64_field_element(result, field_number, _pb_json_to_signed_int(element), use_packed);
			WHEN 11 THEN -- TYPE_SFIXED32
				SET result = pb_wire_json_add_repeated_sfixed32_field_element(result, field_number, _pb_json_to_signed_int(element), use_packed);
			WHEN 12 THEN -- TYPE_BYTES
				SET result = pb_wire_json_add_repeated_bytes_field_element(result, field_number, FROM_BASE64(JSON_UNQUOTE(element)));
			WHEN 13 THEN -- TYPE_UINT32
				SET result = pb_wire_json_add_repeated_uint32_field_element(result, field_number, _pb_json_to_unsigned_int(element), use_packed);
			WHEN 15 THEN -- TYPE_SFIXED32 (duplicate, but keeping for completeness)
				SET result = pb_wire_json_add_repeated_sfixed32_field_element(result, field_number, _pb_json_to_signed_int(element), use_packed);
			WHEN 16 THEN -- TYPE_SFIXED64 (duplicate, but keeping for completeness)
				SET result = pb_wire_json_add_repeated_sfixed64_field_element(result, field_number, _pb_json_to_signed_int(element), use_packed);
			WHEN 17 THEN -- TYPE_SINT32
				SET result = pb_wire_json_add_repeated_sint32_field_element(result, field_number, _pb_json_to_signed_int(element), use_packed);
			WHEN 18 THEN -- TYPE_SINT64
				SET result = pb_wire_json_add_repeated_sint64_field_element(result, field_number, _pb_json_to_signed_int(element), use_packed);
			END CASE;

			SET element_index = element_index + 1;
		END WHILE;
	ELSE
		-- Handle singular primitive fields
		CASE field_type
		WHEN 1 THEN -- TYPE_DOUBLE
			SET result = pb_wire_json_set_double_field(result, field_number, CAST(json_value AS DOUBLE));
		WHEN 2 THEN -- TYPE_FLOAT
			SET result = pb_wire_json_set_float_field(result, field_number, CAST(json_value AS FLOAT));
		WHEN 3 THEN -- TYPE_INT64
			SET result = pb_wire_json_set_int64_field(result, field_number, _pb_json_to_signed_int(json_value));
		WHEN 4 THEN -- TYPE_UINT64
			SET result = pb_wire_json_set_uint64_field(result, field_number, _pb_json_to_unsigned_int(json_value));
		WHEN 5 THEN -- TYPE_INT32
			SET result = pb_wire_json_set_int32_field(result, field_number, _pb_json_to_signed_int(json_value));
		WHEN 6 THEN -- TYPE_FIXED64
			SET result = pb_wire_json_set_fixed64_field(result, field_number, _pb_json_to_unsigned_int(json_value));
		WHEN 7 THEN -- TYPE_FIXED32
			SET result = pb_wire_json_set_fixed32_field(result, field_number, _pb_json_to_unsigned_int(json_value));
		WHEN 8 THEN -- TYPE_BOOL
			SET result = pb_wire_json_set_bool_field(result, field_number, IF(json_value, TRUE, FALSE));
		WHEN 9 THEN -- TYPE_STRING
			SET result = pb_wire_json_set_string_field(result, field_number, JSON_UNQUOTE(json_value));
		WHEN 10 THEN -- TYPE_SFIXED64
			SET result = pb_wire_json_set_sfixed64_field(result, field_number, _pb_json_to_signed_int(json_value));
		WHEN 11 THEN -- TYPE_SFIXED32
			SET result = pb_wire_json_set_sfixed32_field(result, field_number, _pb_json_to_signed_int(json_value));
		WHEN 12 THEN -- TYPE_BYTES
			SET result = pb_wire_json_set_bytes_field(result, field_number, FROM_BASE64(JSON_UNQUOTE(json_value)));
		WHEN 13 THEN -- TYPE_UINT32
			SET result = pb_wire_json_set_uint32_field(result, field_number, _pb_json_to_unsigned_int(json_value));
		WHEN 15 THEN -- TYPE_SFIXED32 (duplicate, but keeping for completeness)
			SET result = pb_wire_json_set_sfixed32_field(result, field_number, _pb_json_to_signed_int(json_value));
		WHEN 16 THEN -- TYPE_SFIXED64 (duplicate, but keeping for completeness)
			SET result = pb_wire_json_set_sfixed64_field(result, field_number, _pb_json_to_signed_int(json_value));
		WHEN 17 THEN -- TYPE_SINT32
			SET result = pb_wire_json_set_sint32_field(result, field_number, _pb_json_to_signed_int(json_value));
		WHEN 18 THEN -- TYPE_SINT64
			SET result = pb_wire_json_set_sint64_field(result, field_number, _pb_json_to_signed_int(json_value));
		END CASE;
	END IF;
END $$

-- Main procedure for converting JSON to protobuf wire_json using descriptor set
DROP PROCEDURE IF EXISTS _pb_json_to_wire_json_proc $$
CREATE PROCEDURE _pb_json_to_wire_json_proc(IN descriptor_set_json JSON, IN full_type_name TEXT, IN json_value JSON, IN from_number_json BOOLEAN, OUT result JSON)
proc: BEGIN
	DECLARE CUSTOM_EXCEPTION CONDITION FOR SQLSTATE '45000';

	DECLARE message_text TEXT;
	DECLARE message_descriptor JSON;
	DECLARE file_descriptor JSON;
	DECLARE syntax TEXT;
	DECLARE fields JSON;
	DECLARE field_count INT;
	DECLARE field_index INT;
	DECLARE field_descriptor JSON;

	-- Field properties
	DECLARE field_number INT;
	DECLARE field_name TEXT;
	DECLARE field_label INT;
	DECLARE field_type INT;
	DECLARE field_type_name TEXT;
	DECLARE json_name TEXT;
	DECLARE proto3_optional BOOLEAN;
	DECLARE oneof_index INT;
	DECLARE default_value TEXT;

	-- Processing variables
	DECLARE is_repeated BOOLEAN;
	DECLARE has_field_presence BOOLEAN;
	DECLARE use_packed BOOLEAN;
	DECLARE field_json_value JSON;
	DECLARE json_field_name TEXT;
	DECLARE element JSON;
	DECLARE element_count INT;
	DECLARE element_index INT;
	DECLARE nested_wire_json JSON;
	DECLARE enum_number INT;

	-- Map handling
	DECLARE is_map BOOLEAN;
	DECLARE map_entry_descriptor JSON;
	DECLARE map_key_field JSON;
	DECLARE map_value_field JSON;
	DECLARE map_key_type INT;
	DECLARE map_value_type INT;
	DECLARE map_value_type_name TEXT;
	DECLARE map_keys JSON;
	DECLARE map_key_count INT;
	DECLARE map_key_index INT;
	DECLARE map_key_name TEXT;
	DECLARE map_entry_wire_json JSON;
	DECLARE map_value_json JSON;
	DECLARE map_value_wire_json JSON;

	SET @@SESSION.max_sp_recursion_depth = 255;

	-- Handle well-known types first
	IF full_type_name LIKE '.google.protobuf.%' THEN
		SET result = _pb_json_encode_wkt_as_wire_json(json_value, full_type_name, from_number_json);
		IF result IS NOT NULL THEN
			LEAVE proc;
		END IF;
	END IF;

	IF JSON_TYPE(json_value) = 'NULL' THEN
		-- Null value should not produce any field in protobuf
		SET result = NULL;
		LEAVE proc;
	END IF;

	-- Get message descriptor
	SET message_descriptor = _pb_get_message_descriptor(descriptor_set_json, full_type_name);

	IF message_descriptor IS NULL THEN
		SET message_text = CONCAT('_pb_json_to_wire_json: message type `', full_type_name, '` not found in descriptor set');
		SIGNAL CUSTOM_EXCEPTION SET MESSAGE_TEXT = message_text;
	END IF;

	-- Get file descriptor to determine syntax
	SET file_descriptor = _pb_get_file_descriptor(descriptor_set_json, full_type_name);
	SET syntax = JSON_UNQUOTE(JSON_EXTRACT(file_descriptor, '$."12"')); -- syntax field
	IF syntax IS NULL THEN
		SET syntax = 'proto2'; -- default
	END IF;

	SET result = JSON_OBJECT();

	-- Get fields array (field 2 in DescriptorProto)
	SET fields = JSON_EXTRACT(message_descriptor, '$."2"');

	IF fields IS NOT NULL THEN
		SET field_count = JSON_LENGTH(fields);
		SET field_index = 0;

		WHILE field_index < field_count DO
			SET field_descriptor = JSON_EXTRACT(fields, CONCAT('$[', field_index, ']'));

			-- Extract field properties from FieldDescriptorProto
			SET field_number = JSON_EXTRACT(field_descriptor, '$."3"'); -- number
			SET field_name = JSON_UNQUOTE(JSON_EXTRACT(field_descriptor, '$."1"')); -- name
			SET field_label = JSON_EXTRACT(field_descriptor, '$."4"'); -- label
			SET field_type = JSON_EXTRACT(field_descriptor, '$."5"'); -- type
			SET field_type_name = JSON_UNQUOTE(JSON_EXTRACT(field_descriptor, '$."6"')); -- type_name
			SET json_name = JSON_UNQUOTE(JSON_EXTRACT(field_descriptor, '$."10"')); -- json_name
			SET proto3_optional = COALESCE(CAST(JSON_EXTRACT(field_descriptor, '$."17"') AS UNSIGNED), FALSE); -- proto3_optional
			SET oneof_index = JSON_EXTRACT(field_descriptor, '$."9"'); -- oneof_index
			SET default_value = JSON_UNQUOTE(JSON_EXTRACT(field_descriptor, '$."7"')); -- default_value

			SET is_repeated = (field_label = 3); -- LABEL_REPEATED

			-- Check if this is a map field
			SET is_map = FALSE;
			IF field_type = 11 AND field_type_name IS NOT NULL THEN -- TYPE_MESSAGE
				SET map_entry_descriptor = _pb_get_message_descriptor(descriptor_set_json, field_type_name);
				SET is_map = COALESCE(CAST(JSON_EXTRACT(map_entry_descriptor, '$."7"."7"') AS UNSIGNED), FALSE); -- map_entry
			END IF;

			-- Determine field presence
			SET has_field_presence =
				(syntax = 'proto2' AND field_label <> 3) -- proto2: all non-repeated fields
				OR (syntax = 'proto3'
					AND (
						(field_label = 1 AND proto3_optional) -- proto3 optional
						OR (field_label <> 3 AND field_type = 11) -- message fields
						OR (oneof_index IS NOT NULL) -- oneof fields
					));

			-- Determine packed encoding for repeated fields
			-- Check field options for explicit packed setting (field 8.2 in FieldDescriptorProto)
			SET use_packed = CAST(JSON_EXTRACT(field_descriptor, '$."8"."2"') AS UNSIGNED);

			-- Use syntax default if field option not set
			IF use_packed IS NULL THEN
				-- Proto3: packed by default, Proto2: unpacked by default
				SET use_packed = (syntax = 'proto3');
			END IF;

			-- Determine JSON field name to look for
			IF from_number_json THEN
				SET json_field_name = CAST(field_number AS CHAR);
			ELSE
				SET json_field_name = IF(json_name IS NOT NULL, json_name, _pb_util_snake_to_lower_camel(field_name));
			END IF;

			-- Extract field value from JSON
			SET field_json_value = JSON_EXTRACT(json_value, CONCAT('$."', json_field_name, '"'));

			-- Process field if it exists in JSON
			IF field_json_value IS NOT NULL THEN
				CASE field_type
				WHEN 10 THEN -- TYPE_GROUP (unsupported)
					SET message_text = CONCAT('_pb_json_to_wire_json: unsupported field_type `', field_type, '` for field `', field_name, '` (', field_number, ').');
					SIGNAL CUSTOM_EXCEPTION SET MESSAGE_TEXT = message_text;

				WHEN 11 THEN -- TYPE_MESSAGE
					IF is_map THEN
						-- Handle map fields - convert JSON object to repeated message entries
						SET map_keys = JSON_KEYS(field_json_value);
						SET map_key_count = JSON_LENGTH(map_keys);
						SET map_key_index = 0;

						-- Get map key/value field descriptors
						SET map_key_field = JSON_EXTRACT(map_entry_descriptor, '$."2"[0]'); -- first field (key)
						SET map_value_field = JSON_EXTRACT(map_entry_descriptor, '$."2"[1]'); -- second field (value)
						SET map_key_type = JSON_EXTRACT(map_key_field, '$."5"');
						SET map_value_type = JSON_EXTRACT(map_value_field, '$."5"');
						SET map_value_type_name = JSON_UNQUOTE(JSON_EXTRACT(map_value_field, '$."6"'));

						WHILE map_key_index < map_key_count DO
							SET map_key_name = JSON_UNQUOTE(JSON_EXTRACT(map_keys, CONCAT('$[', map_key_index, ']')));
							SET map_value_json = JSON_EXTRACT(field_json_value, CONCAT('$."', map_key_name, '"'));

							-- Create map entry with key=1, value=2
							SET map_entry_wire_json = JSON_OBJECT();

							-- Add key field (always field 1)
							-- Convert map key to proper JSON type based on key type
							-- Map keys always have presence and should always be encoded
							CASE map_key_type
							WHEN 8 THEN -- bool
								CALL _pb_json_set_primitive_field_as_wire_json(map_entry_wire_json, 1, map_key_type, FALSE, CAST((map_key_name = 'true') AS JSON), FALSE, syntax, TRUE, map_entry_wire_json);
							ELSE
								CALL _pb_json_set_primitive_field_as_wire_json(map_entry_wire_json, 1, map_key_type, FALSE, JSON_QUOTE(map_key_name), FALSE, syntax, TRUE, map_entry_wire_json);
							END CASE;

							-- Add value field (always field 2)
							IF map_value_type = 11 THEN -- message
								CALL _pb_json_to_wire_json_proc(descriptor_set_json, map_value_type_name, map_value_json, from_number_json, map_value_wire_json);
								SET map_entry_wire_json = pb_wire_json_set_message_field(map_entry_wire_json, 2, pb_wire_json_to_message(map_value_wire_json));
							ELSEIF map_value_type = 14 THEN -- enum
								CALL _pb_enum_from_json(descriptor_set_json, map_value_type_name, map_value_json, enum_number);
								SET map_entry_wire_json = pb_wire_json_set_enum_field(map_entry_wire_json, 2, enum_number);
							ELSE
								-- Map values also always have presence in map entries
								CALL _pb_json_set_primitive_field_as_wire_json(map_entry_wire_json, 2, map_value_type, FALSE, map_value_json, FALSE, syntax, TRUE, map_entry_wire_json);
							END IF;

							-- Add map entry to result
							SET result = pb_wire_json_add_repeated_message_field_element(result, field_number, pb_wire_json_to_message(map_entry_wire_json));
							SET map_key_index = map_key_index + 1;
						END WHILE;

					ELSEIF is_repeated THEN
						-- Handle repeated message fields
						SET element_count = JSON_LENGTH(field_json_value);
						SET element_index = 0;

						WHILE element_index < element_count DO
							SET element = JSON_EXTRACT(field_json_value, CONCAT('$[', element_index, ']'));
							CALL _pb_json_to_wire_json_proc(descriptor_set_json, field_type_name, element, from_number_json, nested_wire_json);
							SET result = pb_wire_json_add_repeated_message_field_element(result, field_number, pb_wire_json_to_message(nested_wire_json));
							SET element_index = element_index + 1;
						END WHILE;
					ELSE
						-- Handle singular message fields
						CALL _pb_json_to_wire_json_proc(descriptor_set_json, field_type_name, field_json_value, from_number_json, nested_wire_json);
						IF nested_wire_json IS NOT NULL THEN
							SET result = pb_wire_json_set_message_field(result, field_number, pb_wire_json_to_message(nested_wire_json));
						END IF;
					END IF;

				WHEN 14 THEN -- TYPE_ENUM
					IF is_repeated THEN
						SET element_count = JSON_LENGTH(field_json_value);
						SET element_index = 0;

						WHILE element_index < element_count DO
							SET element = JSON_EXTRACT(field_json_value, CONCAT('$[', element_index, ']'));
							CALL _pb_enum_from_json(descriptor_set_json, field_type_name, element, enum_number);
							SET result = pb_wire_json_add_repeated_enum_field_element(result, field_number, enum_number, use_packed);
							SET element_index = element_index + 1;
						END WHILE;
					ELSE
						CALL _pb_enum_from_json(descriptor_set_json, field_type_name, field_json_value, enum_number);
						-- Skip encoding proto3 default values for fields without explicit presence
						IF NOT (syntax = 'proto3' AND NOT has_field_presence AND enum_number = 0) THEN
							SET result = pb_wire_json_set_enum_field(result, field_number, enum_number);
						END IF;
					END IF;

				ELSE
					-- Handle primitive types
					CALL _pb_json_set_primitive_field_as_wire_json(result, field_number, field_type, is_repeated, field_json_value, use_packed, syntax, has_field_presence, result);
				END CASE;
			END IF;

			SET field_index = field_index + 1;
		END WHILE;
	END IF;
END $$

-- Wrapper procedure for JSON to wire_json conversion
DROP PROCEDURE IF EXISTS _pb_json_to_wire_json $$
CREATE PROCEDURE _pb_json_to_wire_json(IN descriptor_set_json JSON, IN full_type_name TEXT, IN json_value JSON, IN from_number_json BOOLEAN, OUT result JSON)
BEGIN
	DECLARE message_text TEXT;

	-- Validate type name starts with dot
	IF full_type_name NOT LIKE '.%' THEN
		SET message_text = CONCAT('_pb_json_to_wire_json: type name `', full_type_name, '` must start with a dot');
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = message_text;
	END IF;

	IF json_value IS NULL THEN
		SET result = NULL;
	ELSE
		CALL _pb_json_to_wire_json_proc(descriptor_set_json, full_type_name, json_value, from_number_json, result);
	END IF;
END $$

-- Wrapper procedure for number JSON to wire_json conversion
DROP PROCEDURE IF EXISTS _pb_number_json_to_wire_json $$
CREATE PROCEDURE _pb_number_json_to_wire_json(IN descriptor_set_json JSON, IN full_type_name TEXT, IN json_value JSON, OUT result JSON)
BEGIN
	CALL _pb_json_to_wire_json(descriptor_set_json, full_type_name, json_value, TRUE, result);
END $$

-- Wrapper procedure for JSON to message conversion
DROP PROCEDURE IF EXISTS _pb_json_to_message $$
CREATE PROCEDURE _pb_json_to_message(IN descriptor_set_json JSON, IN full_type_name TEXT, IN json_value JSON, IN from_number_json BOOLEAN, OUT result LONGBLOB)
BEGIN
	DECLARE message_text TEXT;
	DECLARE wire_json JSON;

	-- Validate type name starts with dot
	IF full_type_name NOT LIKE '.%' THEN
		SET message_text = CONCAT('_pb_json_to_message: type name `', full_type_name, '` must start with a dot');
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = message_text;
	END IF;

	IF json_value IS NULL THEN
		SET result = NULL;
	ELSE
		CALL _pb_json_to_wire_json_proc(descriptor_set_json, full_type_name, json_value, from_number_json, wire_json);
		SET result = pb_wire_json_to_message(wire_json);
	END IF;
END $$

-- Wrapper procedure for number JSON to message conversion
DROP PROCEDURE IF EXISTS _pb_number_json_to_message $$
CREATE PROCEDURE _pb_number_json_to_message(IN descriptor_set_json JSON, IN full_type_name TEXT, IN json_value JSON, OUT result LONGBLOB)
BEGIN
	CALL _pb_json_to_message(descriptor_set_json, full_type_name, json_value, TRUE, result);
END $$

-- Public function interface for JSON to wire_json conversion
DROP FUNCTION IF EXISTS pb_json_to_wire_json $$
CREATE FUNCTION pb_json_to_wire_json(descriptor_set_json JSON, type_name TEXT, json_value JSON) RETURNS JSON DETERMINISTIC
BEGIN
	DECLARE result JSON;
	CALL _pb_json_to_wire_json(descriptor_set_json, type_name, json_value, FALSE, result);
	RETURN result;
END $$

-- Private function interface for number JSON to wire_json conversion
DROP FUNCTION IF EXISTS _pb_number_json_to_wire_json_func $$
CREATE FUNCTION _pb_number_json_to_wire_json_func(descriptor_set_json JSON, type_name TEXT, json_value JSON) RETURNS JSON DETERMINISTIC
BEGIN
	DECLARE result JSON;
	CALL _pb_number_json_to_wire_json(descriptor_set_json, type_name, json_value, result);
	RETURN result;
END $$

-- Public function interface for JSON to message conversion
DROP FUNCTION IF EXISTS pb_json_to_message $$
CREATE FUNCTION pb_json_to_message(descriptor_set_json JSON, type_name TEXT, json_value JSON) RETURNS LONGBLOB DETERMINISTIC
BEGIN
	DECLARE result LONGBLOB;
	CALL _pb_json_to_message(descriptor_set_json, type_name, json_value, FALSE, result);
	RETURN result;
END $$

-- Private function interface for number JSON to message conversion
DROP FUNCTION IF EXISTS _pb_number_json_to_message_func $$
CREATE FUNCTION _pb_number_json_to_message_func(descriptor_set_json JSON, type_name TEXT, json_value JSON) RETURNS LONGBLOB DETERMINISTIC
BEGIN
	DECLARE result LONGBLOB;
	CALL _pb_number_json_to_message(descriptor_set_json, type_name, json_value, result);
	RETURN result;
END $$

DELIMITER $$

DROP FUNCTION IF EXISTS _pb_json_wkt_timestamp_format_fractional_seconds $$
CREATE FUNCTION _pb_json_wkt_timestamp_format_fractional_seconds(nanos INT) RETURNS TEXT DETERMINISTIC
BEGIN
	DECLARE abs_nanos INT;

	SET nanos = nanos % 1000000000;
	IF nanos = 0 THEN
		RETURN '';
	END IF;

	-- Handle negative nanoseconds
	SET abs_nanos = ABS(nanos);

	IF abs_nanos % 1000000 = 0 THEN
		RETURN CONCAT('.', LPAD(CAST(abs_nanos DIV 1000000 AS CHAR), 3, '0')); -- 3 digits
	ELSEIF abs_nanos % 1000 = 0 THEN
		RETURN CONCAT('.', LPAD(CAST(abs_nanos DIV 1000 AS CHAR), 6, '0')); -- 6 digits
	ELSE
		RETURN CONCAT('.', LPAD(CAST(abs_nanos AS CHAR), 9, '0')); -- 9 digits
	END IF;
END $$

DROP FUNCTION IF EXISTS _pb_wire_json_decode_wkt_timestamp_as_json $$
CREATE FUNCTION _pb_wire_json_decode_wkt_timestamp_as_json(wire_json JSON) RETURNS JSON DETERMINISTIC
BEGIN
	DECLARE seconds BIGINT;
	DECLARE nanos INT;

	DECLARE elements JSON;
	DECLARE element JSON;
	DECLARE element_count INT;
	DECLARE element_index INT;
	DECLARE wire_type INT;
	DECLARE field_number INT;
	DECLARE uint_value BIGINT UNSIGNED;
	DECLARE datetime_part TEXT;

	SET seconds = 0;
	SET nanos = 0;

	SET elements = JSON_EXTRACT(wire_json, '$.*[*]');
	SET element_index = 0;
	SET element_count = JSON_LENGTH(elements);
	WHILE element_index < element_count DO
		SET element = JSON_EXTRACT(elements, CONCAT('$[', element_index, ']'));
		SET wire_type = JSON_EXTRACT(element, '$.t');
		SET field_number = JSON_EXTRACT(element, '$.n');

		CASE wire_type
		WHEN 0 THEN
			SET uint_value = CAST(JSON_EXTRACT(element, '$.v') AS UNSIGNED);
			CASE field_number
			WHEN 1 THEN
				SET seconds = _pb_util_reinterpret_uint64_as_int64(uint_value);
			WHEN 2 THEN
				SET nanos = _pb_util_reinterpret_uint64_as_int64(uint_value);
			END CASE;
		END CASE;

		SET element_index = element_index + 1;
	END WHILE;

	SET seconds = seconds + (nanos DIV 1000000000);
	SET nanos = nanos % 1000000000;

	-- Validate timestamp range: [0001-01-01T00:00:00Z, 9999-12-31T23:59:59.999999999Z]
	-- This corresponds to seconds range: [-62135596800, 253402300799]
	-- Allow for 1 second tolerance in case of nanosecond normalization
	IF seconds < -62135596800 OR seconds > 253402300800 THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Timestamp out of range';
	END IF;

	-- Convert seconds since Unix epoch to datetime string using TIMESTAMPADD
	SET datetime_part = TIMESTAMPADD(SECOND, seconds, '1970-01-01 00:00:00');

	RETURN JSON_QUOTE(CONCAT(REPLACE(datetime_part, " ", "T"), _pb_json_wkt_timestamp_format_fractional_seconds(nanos), "Z"));
END $$

-- Helper function to convert Timestamp string to wire_json
DROP FUNCTION IF EXISTS _pb_json_encode_wkt_timestamp_as_wire_json $$
CREATE FUNCTION _pb_json_encode_wkt_timestamp_as_wire_json(timestamp_str TEXT) RETURNS JSON DETERMINISTIC
BEGIN
	DECLARE result JSON;
	DECLARE seconds BIGINT;
	DECLARE nanos INT;
	DECLARE dot_pos INT;
	DECLARE nanos_str TEXT;
	DECLARE target_datetime DATETIME;
	DECLARE timezone_offset TEXT;

	-- Validate RFC 3339 format - must end with uppercase 'Z'
	IF timestamp_str IS NULL OR timestamp_str = '' THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Invalid timestamp format - empty timestamp';
	END IF;

	-- Validate RFC 3339 format (supports uppercase Z suffix or timezone offsets)
	IF timestamp_str NOT REGEXP '^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{1,9})?(Z|[+-][0-9]{2}:[0-9]{2})$' COLLATE utf8mb4_bin THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Invalid timestamp format - must follow RFC 3339 format';
	END IF;

	SET result = JSON_OBJECT();
	-- Convert timestamp string to seconds since Unix epoch, handling timezone offsets
	-- Extract timezone from the input string and convert to UTC
	IF timestamp_str LIKE '%Z' THEN
		-- UTC timezone, parse directly
		SET target_datetime = STR_TO_DATE(LEFT(timestamp_str, 19), '%Y-%m-%dT%H:%i:%s');
	ELSEIF timestamp_str REGEXP '[+-][0-9]{2}:[0-9]{2}$' THEN
		-- Handle timezone offset (+08:00, -08:00)
		SET timezone_offset = RIGHT(timestamp_str, 6);
		SET target_datetime = STR_TO_DATE(LEFT(timestamp_str, 19), '%Y-%m-%dT%H:%i:%s');
		-- Convert from local timezone to UTC using CONVERT_TZ
		SET target_datetime = CONVERT_TZ(target_datetime, timezone_offset, '+00:00');
		IF target_datetime IS NULL THEN
			SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Invalid timezone offset in timestamp';
		END IF;
	ELSE
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Invalid timestamp format - must end with Z or timezone offset';
	END IF;
	SET seconds = TIMESTAMPDIFF(SECOND, '1970-01-01 00:00:00', target_datetime);

	-- Extract nanoseconds if present
	SET nanos = 0;
	SET dot_pos = LOCATE('.', timestamp_str);
	IF dot_pos > 0 THEN
		SET nanos_str = SUBSTRING(timestamp_str, dot_pos + 1);
		-- Remove timezone suffix (Z or +/-HH:MM)
		IF nanos_str LIKE '%Z' THEN
			SET nanos_str = LEFT(nanos_str, LENGTH(nanos_str) - 1);
		ELSEIF nanos_str REGEXP '[+-][0-9]{2}:[0-9]{2}$' THEN
			SET nanos_str = LEFT(nanos_str, LENGTH(nanos_str) - 6);
		END IF;
		-- Pad or truncate to 9 digits for nanoseconds
		WHILE LENGTH(nanos_str) < 9 DO
			SET nanos_str = CONCAT(nanos_str, '0');
		END WHILE;
		SET nanos_str = LEFT(nanos_str, 9);
		SET nanos = CAST(nanos_str AS UNSIGNED);
	END IF;

	-- Validate timestamp range: [0001-01-01T00:00:00Z, 9999-12-31T23:59:59.999999999Z]
	-- This corresponds to seconds range: [-62135596800, 253402300799]
	IF seconds < -62135596800 OR seconds > 253402300799 THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Timestamp out of range';
	END IF;

	-- For proto3 semantics, omit default values (seconds=0 and nanos=0)
	IF seconds = 0 AND nanos = 0 THEN
		RETURN result; -- Return empty wire_json
	END IF;

	-- Add non-default values
	IF seconds <> 0 THEN
		SET result = pb_wire_json_set_int64_field(result, 1, seconds);
	END IF;

	IF nanos <> 0 THEN
		SET result = pb_wire_json_set_int32_field(result, 2, nanos);
	END IF;

	RETURN result;
END $$

DELIMITER $$

DROP FUNCTION IF EXISTS _pb_json_wkt_duration_format_fractional_seconds $$
CREATE FUNCTION _pb_json_wkt_duration_format_fractional_seconds(nanos INT) RETURNS TEXT DETERMINISTIC
BEGIN
	DECLARE abs_nanos INT;

	SET nanos = nanos % 1000000000;
	IF nanos = 0 THEN
		RETURN '';
	END IF;

	-- Handle negative nanoseconds
	SET abs_nanos = ABS(nanos);

	IF abs_nanos % 1000000 = 0 THEN
		RETURN CONCAT('.', LPAD(CAST(abs_nanos DIV 1000000 AS CHAR), 3, '0')); -- 3 digits
	ELSEIF abs_nanos % 1000 = 0 THEN
		RETURN CONCAT('.', LPAD(CAST(abs_nanos DIV 1000 AS CHAR), 6, '0')); -- 6 digits
	ELSE
		RETURN CONCAT('.', LPAD(CAST(abs_nanos AS CHAR), 9, '0')); -- 9 digits
	END IF;
END $$

DROP FUNCTION IF EXISTS _pb_wire_json_decode_wkt_duration_as_json $$
CREATE FUNCTION _pb_wire_json_decode_wkt_duration_as_json(wire_json JSON) RETURNS JSON DETERMINISTIC
BEGIN
	DECLARE seconds BIGINT;
	DECLARE nanos INT;

	DECLARE elements JSON;
	DECLARE element JSON;
	DECLARE element_count INT;
	DECLARE element_index INT;
	DECLARE wire_type INT;
	DECLARE field_number INT;
	DECLARE uint_value BIGINT UNSIGNED;

	SET seconds = 0;
	SET nanos = 0;

	SET elements = JSON_EXTRACT(wire_json, '$.*[*]');
	SET element_index = 0;
	SET element_count = JSON_LENGTH(elements);
	WHILE element_index < element_count DO
		SET element = JSON_EXTRACT(elements, CONCAT('$[', element_index, ']'));
		SET wire_type = JSON_EXTRACT(element, '$.t');
		SET field_number = JSON_EXTRACT(element, '$.n');

		CASE wire_type
		WHEN 0 THEN
			SET uint_value = CAST(JSON_EXTRACT(element, '$.v') AS UNSIGNED);
			CASE field_number
			WHEN 1 THEN
				SET seconds = _pb_util_reinterpret_uint64_as_int64(uint_value);
			WHEN 2 THEN
				SET nanos = _pb_util_reinterpret_uint64_as_int64(uint_value);
			END CASE;
		END CASE;

		SET element_index = element_index + 1;
	END WHILE;

	SET seconds = seconds + (nanos DIV 1000000000);
	SET nanos = nanos % 1000000000;

	-- Validate duration range: [-315576000000, +315576000000] seconds
	IF seconds < -315576000000 OR seconds > 315576000000 THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Duration out of range';
	END IF;

	-- Handle case where seconds=0 but nanos<0 (e.g., -0.5s)
	IF seconds = 0 AND nanos < 0 THEN
		RETURN JSON_QUOTE(CONCAT('-0', _pb_json_wkt_duration_format_fractional_seconds(nanos), 's'));
	ELSE
		RETURN JSON_QUOTE(CONCAT(CAST(seconds AS CHAR), _pb_json_wkt_duration_format_fractional_seconds(nanos), 's'));
	END IF;
END $$

-- Helper function to convert Duration string to wire_json
DROP FUNCTION IF EXISTS _pb_json_encode_wkt_duration_as_wire_json $$
CREATE FUNCTION _pb_json_encode_wkt_duration_as_wire_json(duration_str TEXT) RETURNS JSON DETERMINISTIC
BEGIN
	DECLARE result JSON;
	DECLARE seconds BIGINT;
	DECLARE nanos INT;
	DECLARE dot_pos INT;
	DECLARE s_pos INT;
	DECLARE nanos_str TEXT;
	DECLARE is_negative BOOLEAN DEFAULT FALSE;
	DECLARE duration_without_s TEXT;

	SET result = JSON_OBJECT();

	-- Validate duration format - must end with 's'
	IF duration_str IS NULL OR duration_str = '' THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Invalid duration format - empty duration';
	END IF;

	-- Find 's' suffix
	SET s_pos = LOCATE('s', duration_str);
	IF s_pos = 0 OR s_pos <> LENGTH(duration_str) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Invalid duration format - must end with s';
	END IF;

	-- Remove 's' suffix and check for negative sign
	SET duration_without_s = LEFT(duration_str, s_pos - 1);
	SET is_negative = LEFT(TRIM(duration_without_s), 1) = '-';

	SET dot_pos = LOCATE('.', duration_without_s);

	IF dot_pos > 0 THEN
		-- Has fractional seconds
		SET seconds = CAST(LEFT(duration_without_s, dot_pos - 1) AS SIGNED);
		SET nanos_str = SUBSTRING(duration_without_s, dot_pos + 1);
		-- Pad to 9 digits for nanoseconds
		WHILE LENGTH(nanos_str) < 9 DO
			SET nanos_str = CONCAT(nanos_str, '0');
		END WHILE;
		SET nanos_str = LEFT(nanos_str, 9);
		SET nanos = CAST(nanos_str AS SIGNED);

		-- Handle negative durations: if seconds is negative or zero but original had minus, nanos should be negative
		IF seconds < 0 OR (seconds = 0 AND is_negative) THEN
			SET nanos = -nanos;
		END IF;
	ELSE
		-- Whole seconds only
		SET seconds = CAST(duration_without_s AS SIGNED);
		SET nanos = 0;
	END IF;

	-- Validate duration range: [-315576000000, +315576000000] seconds
	IF seconds < -315576000000 OR seconds > 315576000000 THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Duration out of range';
	END IF;

	-- For proto3 semantics, omit default values (seconds=0 and nanos=0)
	IF seconds = 0 AND nanos = 0 THEN
		RETURN result; -- Return empty wire_json
	END IF;

	-- Add non-default values
	IF seconds <> 0 THEN
		SET result = pb_wire_json_set_int64_field(result, 1, seconds);
	END IF;

	IF nanos <> 0 THEN
		SET result = pb_wire_json_set_int32_field(result, 2, nanos);
	END IF;

	RETURN result;
END $$

DELIMITER $$

DROP FUNCTION IF EXISTS _pb_wire_json_decode_wkt_struct_as_json $$
CREATE FUNCTION _pb_wire_json_decode_wkt_struct_as_json(wire_json JSON) RETURNS JSON DETERMINISTIC
BEGIN
	DECLARE elements JSON;
	DECLARE element JSON;
	DECLARE element_count INT;
	DECLARE element_index INT;
	DECLARE wire_type INT;
	DECLARE field_number INT;
	DECLARE object_key TEXT;
	DECLARE object_value JSON;
	DECLARE result JSON;

	SET result = JSON_OBJECT();

	SET elements = JSON_EXTRACT(wire_json, '$.*[*]');
	SET element_index = 0;
	SET element_count = JSON_LENGTH(elements);
	WHILE element_index < element_count DO
		SET element = JSON_EXTRACT(elements, CONCAT('$[', element_index, ']'));
		SET wire_type = JSON_EXTRACT(element, '$.t');
		SET field_number = JSON_EXTRACT(element, '$.n');

		CASE wire_type
		WHEN 2 THEN
			SET element = pb_message_to_wire_json(FROM_BASE64(JSON_UNQUOTE(JSON_EXTRACT(element, '$.v'))));
			CASE field_number
			WHEN 1 THEN
				SET object_key = pb_wire_json_get_string_field(element, 1, '');
				SET object_value = _pb_wire_json_decode_wkt_value_as_json(pb_message_to_wire_json(pb_wire_json_get_message_field(element, 2, _binary X'')));
				SET result = JSON_MERGE(result, JSON_OBJECT(object_key, object_value));
			END CASE;
		END CASE;

		SET element_index = element_index + 1;
	END WHILE;

	RETURN result;
END $$

DROP FUNCTION IF EXISTS _pb_wire_json_decode_wkt_value_as_json $$
CREATE FUNCTION _pb_wire_json_decode_wkt_value_as_json(wire_json JSON) RETURNS JSON DETERMINISTIC
BEGIN
	DECLARE elements JSON;
	DECLARE element JSON;
	DECLARE element_count INT;
	DECLARE element_index INT;
	DECLARE wire_type INT;
	DECLARE field_number INT;
	DECLARE result JSON;
	DECLARE uint_value BIGINT UNSIGNED;
	DECLARE bytes_value LONGBLOB;

	SET result = JSON_OBJECT();

	SET elements = JSON_EXTRACT(wire_json, '$.*[*]');
	SET element_index = 0;
	SET element_count = JSON_LENGTH(elements);
	WHILE element_index < element_count DO
		SET element = JSON_EXTRACT(elements, CONCAT('$[', element_index, ']'));
		SET wire_type = JSON_EXTRACT(element, '$.t');
		SET field_number = JSON_EXTRACT(element, '$.n');

		CASE wire_type
		WHEN 0 THEN -- VARINT
			SET uint_value = CAST(JSON_EXTRACT(element, '$.v') AS UNSIGNED);
			CASE field_number
			WHEN 1 THEN -- null_value
				SET result = NULL;
			WHEN 4 THEN -- bool_value
				SET result = CAST(((uint_value <> 0) IS TRUE) AS JSON);
			END CASE;
		WHEN 2 THEN -- LEN
			SET bytes_value = FROM_BASE64(JSON_UNQUOTE(JSON_EXTRACT(element, '$.v')));
			CASE field_number
			WHEN 3 THEN -- string_value
				SET result = JSON_QUOTE(CONVERT(bytes_value USING utf8mb4));
			WHEN 5 THEN -- struct_value
				SET result = _pb_wire_json_decode_wkt_struct_as_json(pb_message_to_wire_json(bytes_value));
			WHEN 6 THEN -- list_value
				SET result = _pb_wire_json_decode_wkt_list_value_as_json(pb_message_to_wire_json(bytes_value));
			END CASE;
		WHEN 1 THEN -- I64
			SET uint_value = CAST(JSON_EXTRACT(element, '$.v') AS UNSIGNED);
			CASE field_number
			WHEN 2 THEN -- double_value
				SET result = CAST(_pb_util_reinterpret_uint64_as_double(uint_value) AS JSON);
			END CASE;
		END CASE;

		SET element_index = element_index + 1;
	END WHILE;

	RETURN result;
END $$

DROP FUNCTION IF EXISTS _pb_wire_json_decode_wkt_list_value_as_json $$
CREATE FUNCTION _pb_wire_json_decode_wkt_list_value_as_json(wire_json JSON) RETURNS JSON DETERMINISTIC
BEGIN
	DECLARE elements JSON;
	DECLARE element JSON;
	DECLARE element_count INT;
	DECLARE element_index INT;
	DECLARE wire_type INT;
	DECLARE field_number INT;
	DECLARE result JSON;
	DECLARE bytes_value LONGBLOB;

	SET result = JSON_ARRAY();

	SET elements = JSON_EXTRACT(wire_json, '$.*[*]');
	SET element_index = 0;
	SET element_count = JSON_LENGTH(elements);
	WHILE element_index < element_count DO
		SET element = JSON_EXTRACT(elements, CONCAT('$[', element_index, ']'));
		SET wire_type = JSON_EXTRACT(element, '$.t');
		SET field_number = JSON_EXTRACT(element, '$.n');

		CASE wire_type
		WHEN 2 THEN -- LEN
			SET bytes_value = FROM_BASE64(JSON_UNQUOTE(JSON_EXTRACT(element, '$.v')));
			CASE field_number
			WHEN 1 THEN -- values
				SET result = JSON_ARRAY_APPEND(result, '$', _pb_wire_json_decode_wkt_value_as_json(pb_message_to_wire_json(bytes_value)));
			END CASE;
		END CASE;

		SET element_index = element_index + 1;
	END WHILE;

	RETURN result;
END $$

-- Helper procedure to convert JSON object to Struct wire_json (allows recursion)
DROP PROCEDURE IF EXISTS _pb_json_encode_wkt_struct_as_wire_json $$
CREATE PROCEDURE _pb_json_encode_wkt_struct_as_wire_json(IN json_value JSON, IN from_number_json BOOLEAN, OUT result JSON)
BEGIN
	DECLARE struct_keys JSON;
	DECLARE struct_key_count INT;
	DECLARE struct_key_index INT;
	DECLARE struct_key_name TEXT;
	DECLARE struct_value_json JSON;
	DECLARE struct_value_wire_json JSON;
	DECLARE struct_entry_wire_json JSON;

	SET @@SESSION.max_sp_recursion_depth = 255;
	SET result = JSON_OBJECT();

	IF JSON_TYPE(json_value) = 'OBJECT' THEN
		SET struct_keys = JSON_KEYS(json_value);
		SET struct_key_count = JSON_LENGTH(struct_keys);
		SET struct_key_index = 0;

		WHILE struct_key_index < struct_key_count DO
			SET struct_key_name = JSON_UNQUOTE(JSON_EXTRACT(struct_keys, CONCAT('$[', struct_key_index, ']')));
			SET struct_value_json = JSON_EXTRACT(json_value, CONCAT('$."', struct_key_name, '"'));

			-- Create map entry with key=1, value=2
			SET struct_entry_wire_json = JSON_OBJECT();
			SET struct_entry_wire_json = pb_wire_json_set_string_field(struct_entry_wire_json, 1, struct_key_name);

			-- Convert value to Value type (recursive call)
			CALL _pb_json_encode_wkt_value_as_wire_json(struct_value_json, from_number_json, struct_value_wire_json);
			IF struct_value_wire_json IS NOT NULL THEN
				SET struct_entry_wire_json = pb_wire_json_set_message_field(struct_entry_wire_json, 2, pb_wire_json_to_message(struct_value_wire_json));
				SET result = pb_wire_json_add_repeated_message_field_element(result, 1, pb_wire_json_to_message(struct_entry_wire_json));
			END IF;

			SET struct_key_index = struct_key_index + 1;
		END WHILE;
	END IF;
END $$

-- Helper procedure to convert JSON array to ListValue wire_json (allows recursion)
DROP PROCEDURE IF EXISTS _pb_json_encode_wkt_listvalue_as_wire_json $$
CREATE PROCEDURE _pb_json_encode_wkt_listvalue_as_wire_json(IN json_value JSON, IN from_number_json BOOLEAN, OUT result JSON)
BEGIN
	DECLARE list_element_count INT;
	DECLARE list_element_index INT;
	DECLARE list_element JSON;
	DECLARE list_value_wire_json JSON;

	SET @@SESSION.max_sp_recursion_depth = 255;
	SET result = JSON_OBJECT();

	IF JSON_TYPE(json_value) = 'ARRAY' THEN
		SET list_element_count = JSON_LENGTH(json_value);
		SET list_element_index = 0;

		WHILE list_element_index < list_element_count DO
			SET list_element = JSON_EXTRACT(json_value, CONCAT('$[', list_element_index, ']'));

			-- Convert element to Value type (recursive call)
			CALL _pb_json_encode_wkt_value_as_wire_json(list_element, from_number_json, list_value_wire_json);
			IF list_value_wire_json IS NOT NULL THEN
				SET result = pb_wire_json_add_repeated_message_field_element(result, 1, pb_wire_json_to_message(list_value_wire_json));
			END IF;

			SET list_element_index = list_element_index + 1;
		END WHILE;
	END IF;
END $$

-- Helper procedure to convert JSON to google.protobuf.Value wire_json (allows recursion)
DROP PROCEDURE IF EXISTS _pb_json_encode_wkt_value_as_wire_json $$
CREATE PROCEDURE _pb_json_encode_wkt_value_as_wire_json(IN json_value JSON, IN from_number_json BOOLEAN, OUT result JSON)
BEGIN
	DECLARE struct_wire_json JSON;
	DECLARE list_wire_json JSON;

	SET @@SESSION.max_sp_recursion_depth = 255;
	SET result = JSON_OBJECT();

	CASE JSON_TYPE(json_value)
	WHEN 'NULL' THEN
		-- null_value = 0 (field 1, enum)
		SET result = pb_wire_json_set_enum_field(result, 1, 0);
	WHEN 'BOOLEAN' THEN
		-- bool_value (field 4)
		SET result = pb_wire_json_set_bool_field(result, 4, IF(json_value, TRUE, FALSE));
	WHEN 'INTEGER' THEN
		-- number_value (field 2)
		SET result = pb_wire_json_set_double_field(result, 2, CAST(json_value AS DOUBLE));
	WHEN 'DECIMAL' THEN
		-- number_value (field 2)
		SET result = pb_wire_json_set_double_field(result, 2, CAST(json_value AS DOUBLE));
	WHEN 'DOUBLE' THEN
		-- number_value (field 2)
		SET result = pb_wire_json_set_double_field(result, 2, CAST(json_value AS DOUBLE));
	WHEN 'STRING' THEN
		-- string_value (field 3)
		SET result = pb_wire_json_set_string_field(result, 3, JSON_UNQUOTE(json_value));
	WHEN 'DATETIME' THEN
		-- string_value (field 3) - convert datetime to string
		SET result = pb_wire_json_set_string_field(result, 3, JSON_UNQUOTE(json_value));
	WHEN 'DATE' THEN
		-- string_value (field 3) - convert date to string
		SET result = pb_wire_json_set_string_field(result, 3, JSON_UNQUOTE(json_value));
	WHEN 'TIME' THEN
		-- string_value (field 3) - convert time to string
		SET result = pb_wire_json_set_string_field(result, 3, JSON_UNQUOTE(json_value));
	WHEN 'OBJECT' THEN
		-- struct_value (field 5) - convert to Struct
		CALL _pb_json_encode_wkt_struct_as_wire_json(json_value, from_number_json, struct_wire_json);
		IF struct_wire_json IS NOT NULL THEN
			SET result = pb_wire_json_set_message_field(result, 5, pb_wire_json_to_message(struct_wire_json));
		END IF;
	WHEN 'ARRAY' THEN
		-- list_value (field 6) - convert to ListValue
		CALL _pb_json_encode_wkt_listvalue_as_wire_json(json_value, from_number_json, list_wire_json);
		IF list_wire_json IS NOT NULL THEN
			SET result = pb_wire_json_set_message_field(result, 6, pb_wire_json_to_message(list_wire_json));
		END IF;
	WHEN 'BLOB' THEN
		-- string_value (field 3) - treat binary as string
		SET result = pb_wire_json_set_string_field(result, 3, JSON_UNQUOTE(json_value));
	WHEN 'OPAQUE' THEN
		-- string_value (field 3) - treat opaque as string
		SET result = pb_wire_json_set_string_field(result, 3, JSON_UNQUOTE(json_value));
	END CASE;
END $$

DELIMITER $$

DROP FUNCTION IF EXISTS _pb_wire_json_decode_wkt_field_mask_as_json $$
CREATE FUNCTION _pb_wire_json_decode_wkt_field_mask_as_json(wire_json JSON) RETURNS JSON DETERMINISTIC
BEGIN
	DECLARE elements JSON;
	DECLARE element JSON;
	DECLARE element_count INT;
	DECLARE element_index INT;
	DECLARE wire_type INT;
	DECLARE field_number INT;
	DECLARE result TEXT;
	DECLARE string_value TEXT;
	DECLARE sep TEXT;

	SET result = '';
	SET sep = '';

	SET elements = JSON_EXTRACT(wire_json, '$.*[*]');
	SET element_index = 0;
	SET element_count = JSON_LENGTH(elements);
	WHILE element_index < element_count DO
		SET element = JSON_EXTRACT(elements, CONCAT('$[', element_index, ']'));
		SET wire_type = JSON_EXTRACT(element, '$.t');
		SET field_number = JSON_EXTRACT(element, '$.n');

		CASE wire_type
		WHEN 2 THEN -- LEN
			SET string_value = CONVERT(FROM_BASE64(JSON_UNQUOTE(JSON_EXTRACT(element, '$.v'))) USING utf8mb4);
			CASE field_number
			WHEN 1 THEN -- values
				SET result = CONCAT(result, sep, string_value);
				SET sep = ',';
			END CASE;
		END CASE;

		SET element_index = element_index + 1;
	END WHILE;

	RETURN JSON_QUOTE(result);
END $$

-- Helper function to convert FieldMask string to wire_json
DROP FUNCTION IF EXISTS _pb_json_encode_wkt_field_mask_as_wire_json $$
CREATE FUNCTION _pb_json_encode_wkt_field_mask_as_wire_json(field_mask_str TEXT) RETURNS JSON DETERMINISTIC
BEGIN
	DECLARE result JSON;
	DECLARE comma_pos INT;
	DECLARE path TEXT;
	DECLARE remaining TEXT;

	SET result = JSON_OBJECT();
	SET remaining = field_mask_str;

	WHILE remaining IS NOT NULL AND LENGTH(remaining) > 0 DO
		SET comma_pos = LOCATE(',', remaining);
		IF comma_pos > 0 THEN
			SET path = TRIM(LEFT(remaining, comma_pos - 1));
			SET remaining = SUBSTRING(remaining, comma_pos + 1);
		ELSE
			SET path = TRIM(remaining);
			SET remaining = NULL;
		END IF;

		IF LENGTH(path) > 0 THEN
			-- Use add_repeated_string_field_element for repeated field
			SET result = pb_wire_json_add_repeated_string_field_element(result, 1, path);
		END IF;
	END WHILE;

	RETURN result;
END $$

DELIMITER $$

DROP FUNCTION IF EXISTS _pb_wire_json_decode_wkt_as_json $$
CREATE FUNCTION _pb_wire_json_decode_wkt_as_json(wire_json JSON, full_type_name TEXT) RETURNS JSON DETERMINISTIC
BEGIN
	CASE full_type_name
	WHEN '.google.protobuf.Timestamp' THEN
		RETURN _pb_wire_json_decode_wkt_timestamp_as_json(wire_json);
	WHEN '.google.protobuf.Duration' THEN
		RETURN _pb_wire_json_decode_wkt_duration_as_json(wire_json);
	WHEN '.google.protobuf.Struct' THEN
		RETURN _pb_wire_json_decode_wkt_struct_as_json(wire_json);
	WHEN '.google.protobuf.Value' THEN
		RETURN _pb_wire_json_decode_wkt_value_as_json(wire_json);
	WHEN '.google.protobuf.ListValue' THEN
		RETURN _pb_wire_json_decode_wkt_list_value_as_json(wire_json);
	WHEN '.google.protobuf.Empty' THEN
		RETURN JSON_OBJECT();
	WHEN '.google.protobuf.DoubleValue' THEN
		RETURN CAST(pb_wire_json_get_double_field(wire_json, 1, 0.0) AS JSON);
	WHEN '.google.protobuf.FloatValue' THEN
		RETURN CAST(pb_wire_json_get_float_field(wire_json, 1, 0.0) AS JSON);
	WHEN '.google.protobuf.Int64Value' THEN
		RETURN JSON_QUOTE(CAST(pb_wire_json_get_int64_field(wire_json, 1, 0) AS CHAR));
	WHEN '.google.protobuf.UInt64Value' THEN
		RETURN JSON_QUOTE(CAST(pb_wire_json_get_uint64_field(wire_json, 1, 0) AS CHAR));
	WHEN '.google.protobuf.Int32Value' THEN
		RETURN CAST(pb_wire_json_get_int32_field(wire_json, 1, 0) AS JSON);
	WHEN '.google.protobuf.UInt32Value' THEN
		RETURN CAST(pb_wire_json_get_uint32_field(wire_json, 1, 0) AS JSON);
	WHEN '.google.protobuf.BoolValue' THEN
		RETURN CAST((pb_wire_json_get_bool_field(wire_json, 1, FALSE) IS TRUE) AS JSON);
	WHEN '.google.protobuf.StringValue' THEN
		RETURN JSON_QUOTE(pb_wire_json_get_string_field(wire_json, 1, ''));
	WHEN '.google.protobuf.BytesValue' THEN
		RETURN JSON_QUOTE(TO_BASE64(pb_wire_json_get_bytes_field(wire_json, 1, _binary X'')));
	WHEN '.google.protobuf.FieldMask' THEN
		RETURN _pb_wire_json_decode_wkt_field_mask_as_json(wire_json);
	ELSE
		RETURN NULL;
	END CASE;
END $$

-- Helper function to encode well-known types from JSON to wire_json
DROP FUNCTION IF EXISTS _pb_json_encode_wkt_as_wire_json $$
CREATE FUNCTION _pb_json_encode_wkt_as_wire_json(json_value JSON, full_type_name TEXT, from_number_json BOOLEAN) RETURNS JSON DETERMINISTIC
BEGIN
	DECLARE result JSON;
	DECLARE float_value FLOAT;
	DECLARE double_value DOUBLE;

	CASE full_type_name
	WHEN '.google.protobuf.Timestamp' THEN
		-- Parse RFC 3339 timestamp string like "1996-12-19T16:39:57.000340012Z"
		IF JSON_TYPE(json_value) = 'NULL' THEN
			-- Null timestamp should not produce any field in protobuf
			RETURN NULL;
		ELSEIF JSON_TYPE(json_value) = 'STRING' THEN
			RETURN _pb_json_encode_wkt_timestamp_as_wire_json(JSON_UNQUOTE(json_value));
		END IF;

	WHEN '.google.protobuf.Duration' THEN
		-- Parse duration string like "1.000340012s" or "3600s"
		IF JSON_TYPE(json_value) = 'NULL' THEN
			-- Null duration should not produce any field in protobuf
			RETURN NULL;
		ELSEIF JSON_TYPE(json_value) = 'STRING' THEN
			RETURN _pb_json_encode_wkt_duration_as_wire_json(JSON_UNQUOTE(json_value));
		END IF;

	WHEN '.google.protobuf.FieldMask' THEN
		-- Parse comma-separated field names like "path1,path2"
		IF JSON_TYPE(json_value) = 'STRING' THEN
			RETURN _pb_json_encode_wkt_field_mask_as_wire_json(JSON_UNQUOTE(json_value));
		END IF;

	WHEN '.google.protobuf.Empty' THEN
		-- Always return empty wire_json
		RETURN JSON_OBJECT();

	WHEN '.google.protobuf.Struct' THEN
		-- Convert JSON object to Struct with repeated fields map
		CALL _pb_json_encode_wkt_struct_as_wire_json(json_value, from_number_json, result);
		IF result IS NOT NULL THEN
			RETURN result;
		END IF;

	WHEN '.google.protobuf.Value' THEN
		-- Handle different JSON value types
		CALL _pb_json_encode_wkt_value_as_wire_json(json_value, from_number_json, result);
		IF result IS NOT NULL THEN
			RETURN result;
		END IF;

	WHEN '.google.protobuf.ListValue' THEN
		-- Convert JSON array to ListValue with repeated Value fields
		CALL _pb_json_encode_wkt_listvalue_as_wire_json(json_value, from_number_json, result);
		IF result IS NOT NULL THEN
			RETURN result;
		END IF;

	-- Wrapper types
	WHEN '.google.protobuf.Int32Value' THEN
		IF JSON_TYPE(json_value) IN ('INTEGER', 'DECIMAL', 'STRING') THEN
			SET result = JSON_OBJECT();
			-- Only encode non-default values (proto3 behavior)
			IF _pb_json_to_signed_int(json_value) <> 0 THEN
				SET result = pb_wire_json_set_int32_field(result, 1, _pb_json_to_signed_int(json_value));
			END IF;
			RETURN result;
		END IF;

	WHEN '.google.protobuf.UInt32Value' THEN
		IF JSON_TYPE(json_value) IN ('INTEGER', 'DECIMAL', 'STRING') THEN
			SET result = JSON_OBJECT();
			-- Only encode non-default values (proto3 behavior)
			IF _pb_json_to_unsigned_int(json_value) <> 0 THEN
				SET result = pb_wire_json_set_uint32_field(result, 1, _pb_json_to_unsigned_int(json_value));
			END IF;
			RETURN result;
		END IF;

	WHEN '.google.protobuf.Int64Value' THEN
		IF JSON_TYPE(json_value) IN ('INTEGER', 'DECIMAL', 'STRING') THEN
			SET result = JSON_OBJECT();
			-- Only encode non-default values (proto3 behavior)
			IF _pb_json_to_signed_int(json_value) <> 0 THEN
				SET result = pb_wire_json_set_int64_field(result, 1, _pb_json_to_signed_int(json_value));
			END IF;
			RETURN result;
		END IF;

	WHEN '.google.protobuf.UInt64Value' THEN
		IF JSON_TYPE(json_value) IN ('INTEGER', 'DECIMAL', 'STRING') THEN
			SET result = JSON_OBJECT();
			-- Only encode non-default values (proto3 behavior)
			IF _pb_json_to_unsigned_int(json_value) <> 0 THEN
				SET result = pb_wire_json_set_uint64_field(result, 1, _pb_json_to_unsigned_int(json_value));
			END IF;
			RETURN result;
		END IF;

	WHEN '.google.protobuf.FloatValue' THEN
		IF JSON_TYPE(json_value) IN ('INTEGER', 'DECIMAL', 'DOUBLE', 'STRING') THEN
			SET result = JSON_OBJECT();
			IF JSON_TYPE(json_value) = 'STRING' THEN
				SET float_value = CAST(JSON_UNQUOTE(json_value) AS FLOAT);
			ELSE
				SET float_value = CAST(json_value AS FLOAT);
			END IF;
			-- Only encode non-default values (proto3 behavior)
			IF float_value <> 0.0 THEN
				SET result = pb_wire_json_set_float_field(result, 1, float_value);
			END IF;
			RETURN result;
		END IF;

	WHEN '.google.protobuf.DoubleValue' THEN
		IF JSON_TYPE(json_value) IN ('INTEGER', 'DECIMAL', 'DOUBLE', 'STRING') THEN
			SET result = JSON_OBJECT();
			IF JSON_TYPE(json_value) = 'STRING' THEN
				SET double_value = CAST(JSON_UNQUOTE(json_value) AS DOUBLE);
			ELSE
				SET double_value = CAST(json_value AS DOUBLE);
			END IF;
			-- Only encode non-default values (proto3 behavior)
			IF double_value <> 0.0 THEN
				SET result = pb_wire_json_set_double_field(result, 1, double_value);
			END IF;
			RETURN result;
		END IF;

	WHEN '.google.protobuf.BoolValue' THEN
		IF JSON_TYPE(json_value) = 'BOOLEAN' THEN
			SET result = JSON_OBJECT();
			-- Only encode non-default values (proto3 behavior)
			IF json_value THEN
				SET result = pb_wire_json_set_bool_field(result, 1, TRUE);
			END IF;
			RETURN result;
		END IF;

	WHEN '.google.protobuf.StringValue' THEN
		IF JSON_TYPE(json_value) = 'STRING' THEN
			SET result = JSON_OBJECT();
			-- Only encode non-default values (proto3 behavior)
			IF JSON_UNQUOTE(json_value) <> '' THEN
				SET result = pb_wire_json_set_string_field(result, 1, JSON_UNQUOTE(json_value));
			END IF;
			RETURN result;
		END IF;

	WHEN '.google.protobuf.BytesValue' THEN
		IF JSON_TYPE(json_value) = 'STRING' THEN
			SET result = JSON_OBJECT();
			-- Only encode non-default values (proto3 behavior)
			IF JSON_UNQUOTE(json_value) <> '' THEN
				SET result = pb_wire_json_set_bytes_field(result, 1, FROM_BASE64(JSON_UNQUOTE(json_value)));
			END IF;
			RETURN result;
		END IF;
	END CASE;

	-- Return NULL to fall back to normal message handling
	RETURN NULL;
END $$

DELIMITER $$

-- Helper function to build fully-qualified type name
DROP FUNCTION IF EXISTS _pb_build_type_name $$
CREATE FUNCTION _pb_build_type_name(package_name TEXT, type_name TEXT) RETURNS TEXT DETERMINISTIC
BEGIN
	IF package_name = '' OR package_name IS NULL THEN
		RETURN CONCAT('.', type_name);
	ELSE
		RETURN CONCAT('.', package_name, '.', type_name);
	END IF;
END $$

-- Helper procedure to process nested types recursively
DROP PROCEDURE IF EXISTS _pb_build_nested_types $$
CREATE PROCEDURE _pb_build_nested_types(
	IN message_descriptor JSON,
	IN parent_name TEXT,
	IN parent_path TEXT,
	IN file_path TEXT,
	INOUT type_index JSON
)
proc: BEGIN
	DECLARE nested_messages JSON;
	DECLARE nested_enums JSON;
	DECLARE nested_msg_count INT DEFAULT 0;
	DECLARE nested_enum_count INT DEFAULT 0;
	DECLARE nested_msg_index INT DEFAULT 0;
	DECLARE nested_enum_index INT DEFAULT 0;
	DECLARE nested_msg_descriptor JSON;
	DECLARE nested_enum_descriptor JSON;
	DECLARE nested_msg_name TEXT;
	DECLARE nested_enum_name TEXT;
	DECLARE nested_msg_path TEXT;
	DECLARE nested_enum_path TEXT;
	DECLARE nested_type_name TEXT;
	DECLARE type_entry JSON;

	-- Process nested message types (field 3 in DescriptorProto)
	SET nested_messages = JSON_EXTRACT(message_descriptor, '$."3"');

	IF nested_messages IS NOT NULL THEN
		SET nested_msg_count = JSON_LENGTH(nested_messages);
		SET nested_msg_index = 0;

		WHILE nested_msg_index < nested_msg_count DO
			SET nested_msg_descriptor = JSON_EXTRACT(nested_messages, CONCAT('$[', nested_msg_index, ']'));
			SET nested_msg_name = JSON_UNQUOTE(JSON_EXTRACT(nested_msg_descriptor, '$."1"')); -- name field
			SET nested_msg_path = CONCAT(parent_path, '."3"[', nested_msg_index, ']');
			SET nested_type_name = CONCAT(parent_name, '.', nested_msg_name);

			-- Add to type index: [kind=11, file_path, type_path]
			SET type_entry = JSON_ARRAY(11, file_path, nested_msg_path);
			SET type_index = JSON_SET(type_index, CONCAT('$."', nested_type_name, '"'), type_entry);

			-- Recursively process further nested types
			CALL _pb_build_nested_types(nested_msg_descriptor, nested_type_name, nested_msg_path, file_path, type_index);

			SET nested_msg_index = nested_msg_index + 1;
		END WHILE;
	END IF;

	-- Process nested enum types (field 4 in DescriptorProto)
	SET nested_enums = JSON_EXTRACT(message_descriptor, '$."4"');

	IF nested_enums IS NOT NULL THEN
		SET nested_enum_count = JSON_LENGTH(nested_enums);
		SET nested_enum_index = 0;

		WHILE nested_enum_index < nested_enum_count DO
			SET nested_enum_descriptor = JSON_EXTRACT(nested_enums, CONCAT('$[', nested_enum_index, ']'));
			SET nested_enum_name = JSON_UNQUOTE(JSON_EXTRACT(nested_enum_descriptor, '$."1"')); -- name field
			SET nested_enum_path = CONCAT(parent_path, '."4"[', nested_enum_index, ']');
			SET nested_type_name = CONCAT(parent_name, '.', nested_enum_name);

			-- Add to type index: [kind=14, file_path, type_path]
			SET type_entry = JSON_ARRAY(14, file_path, nested_enum_path);
			SET type_index = JSON_SET(type_index, CONCAT('$."', nested_type_name, '"'), type_entry);

			SET nested_enum_index = nested_enum_index + 1;
		END WHILE;
	END IF;
END $$

-- Public function to generate type index from FileDescriptorSet in protonumberjson format
DROP FUNCTION IF EXISTS _pb_build_type_index_from_descriptor_set $$
CREATE FUNCTION _pb_build_type_index_from_descriptor_set(file_descriptor_set_json JSON) RETURNS JSON DETERMINISTIC
BEGIN
	DECLARE type_index JSON DEFAULT JSON_OBJECT();
	DECLARE files JSON;
	DECLARE file_count INT DEFAULT 0;
	DECLARE file_index INT DEFAULT 0;
	DECLARE file_descriptor JSON;
	DECLARE file_package TEXT;
	DECLARE file_path TEXT;
	DECLARE message_types JSON;
	DECLARE enum_types JSON;
	DECLARE msg_count INT DEFAULT 0;
	DECLARE enum_count INT DEFAULT 0;
	DECLARE msg_index INT DEFAULT 0;
	DECLARE enum_index INT DEFAULT 0;
	DECLARE message_descriptor JSON;
	DECLARE enum_descriptor JSON;
	DECLARE message_name TEXT;
	DECLARE enum_name TEXT;
	DECLARE message_path TEXT;
	DECLARE enum_path TEXT;
	DECLARE full_type_name TEXT;
	DECLARE type_entry JSON;

	-- Extract files array (field 1 in FileDescriptorSet)
	SET files = JSON_EXTRACT(file_descriptor_set_json, '$."1"');

	IF files IS NULL THEN
		RETURN type_index;
	END IF;

	SET file_count = JSON_LENGTH(files);
	SET file_index = 0;

	-- Iterate through each file
	WHILE file_index < file_count DO
		SET file_descriptor = JSON_EXTRACT(files, CONCAT('$[', file_index, ']'));
		SET file_package = COALESCE(JSON_UNQUOTE(JSON_EXTRACT(file_descriptor, '$."2"')), ''); -- package field
		SET file_path = CONCAT('$[1]."1"[', file_index, ']');

		-- Process message types (field 4 in FileDescriptorProto)
		SET message_types = JSON_EXTRACT(file_descriptor, '$."4"');

		IF message_types IS NOT NULL THEN
			SET msg_count = JSON_LENGTH(message_types);
			SET msg_index = 0;

			WHILE msg_index < msg_count DO
				SET message_descriptor = JSON_EXTRACT(message_types, CONCAT('$[', msg_index, ']'));
				SET message_name = JSON_UNQUOTE(JSON_EXTRACT(message_descriptor, '$."1"')); -- name field
				SET message_path = CONCAT(file_path, '."4"[', msg_index, ']');
				SET full_type_name = _pb_build_type_name(file_package, message_name);

				-- Add to type index: [kind=11, file_path, type_path]
				SET type_entry = JSON_ARRAY(11, file_path, message_path);
				SET type_index = JSON_SET(type_index, CONCAT('$."', full_type_name, '"'), type_entry);

				-- Process nested types recursively
				CALL _pb_build_nested_types(message_descriptor, full_type_name, message_path, file_path, type_index);

				SET msg_index = msg_index + 1;
			END WHILE;
		END IF;

		-- Process enum types (field 5 in FileDescriptorProto)
		SET enum_types = JSON_EXTRACT(file_descriptor, '$."5"');

		IF enum_types IS NOT NULL THEN
			SET enum_count = JSON_LENGTH(enum_types);
			SET enum_index = 0;

			WHILE enum_index < enum_count DO
				SET enum_descriptor = JSON_EXTRACT(enum_types, CONCAT('$[', enum_index, ']'));
				SET enum_name = JSON_UNQUOTE(JSON_EXTRACT(enum_descriptor, '$."1"')); -- name field
				SET enum_path = CONCAT(file_path, '."5"[', enum_index, ']');
				SET full_type_name = _pb_build_type_name(file_package, enum_name);

				-- Add to type index: [kind=14, file_path, type_path]
				SET type_entry = JSON_ARRAY(14, file_path, enum_path);
				SET type_index = JSON_SET(type_index, CONCAT('$."', full_type_name, '"'), type_entry);

				SET enum_index = enum_index + 1;
			END WHILE;
		END IF;

		SET file_index = file_index + 1;
	END WHILE;

	RETURN type_index;
END $$

-- Public function to convert FileDescriptorSet LONGBLOB to descriptor set JSON
-- Returns a 2-element JSON array: [fileDescriptorSet, typeIndex]
DROP FUNCTION IF EXISTS pb_build_descriptor_set_json $$
CREATE FUNCTION pb_build_descriptor_set_json(file_descriptor_set_blob LONGBLOB) RETURNS JSON DETERMINISTIC
BEGIN
	DECLARE file_descriptor_set_number_json JSON;
	DECLARE type_index JSON;
	DECLARE result JSON;

	-- Convert FileDescriptorSet LONGBLOB to protonumberjson format
	SET file_descriptor_set_number_json = _pb_message_to_number_json(
		_pb_google_descriptor_proto(),
		'.google.protobuf.FileDescriptorSet',
		file_descriptor_set_blob
	);

	-- Build type index from the FileDescriptorSet
	SET type_index = _pb_build_type_index_from_descriptor_set(file_descriptor_set_number_json);

	-- Return 3-element array: [version, fileDescriptorSet, typeIndex]
	SET result = JSON_ARRAY(1, file_descriptor_set_number_json, type_index);

	RETURN result;
END $$

-- Generated by cmd/generate-descriptorsets; DO NOT EDIT

-- The following FileDescriptorSets (in JSON format) are auto-generated from files
-- in https://github.com/google/protobuf, and the following license terms apply.

-- Copyright 2010 The Go Authors.  All rights reserved.
--
-- Redistribution and use in source and binary forms, with or without
-- modification, are permitted provided that the following conditions are
-- met:
--
--     * Redistributions of source code must retain the above copyright
-- notice, this list of conditions and the following disclaimer.
--     * Redistributions in binary form must reproduce the above
-- copyright notice, this list of conditions and the following disclaimer
-- in the documentation and/or other materials provided with the
-- distribution.
--     * Neither the name of Google Inc. nor the names of its
-- contributors may be used to endorse or promote products derived from
-- this software without specific prior written permission.
--
-- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-- "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-- LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-- A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-- OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-- SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-- LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-- DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-- THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-- (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-- OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

DELIMITER $$

DROP FUNCTION IF EXISTS _pb_google_descriptor_proto $$
CREATE FUNCTION _pb_google_descriptor_proto() RETURNS JSON DETERMINISTIC
BEGIN
	RETURN CAST('[1,{"1":[{"1":"google/protobuf/descriptor.proto","2":"google.protobuf","4":[{"1":"FileDescriptorSet","2":[{"1":"file","10":"file","3":1,"4":3,"5":11,"6":".google.protobuf.FileDescriptorProto"}],"5":[{"1":536000000,"2":536000001}]},{"1":"FileDescriptorProto","2":[{"1":"name","10":"name","3":1,"4":1,"5":9},{"1":"package","10":"package","3":2,"4":1,"5":9},{"1":"dependency","10":"dependency","3":3,"4":3,"5":9},{"1":"public_dependency","10":"publicDependency","3":10,"4":3,"5":5},{"1":"weak_dependency","10":"weakDependency","3":11,"4":3,"5":5},{"1":"message_type","10":"messageType","3":4,"4":3,"5":11,"6":".google.protobuf.DescriptorProto"},{"1":"enum_type","10":"enumType","3":5,"4":3,"5":11,"6":".google.protobuf.EnumDescriptorProto"},{"1":"service","10":"service","3":6,"4":3,"5":11,"6":".google.protobuf.ServiceDescriptorProto"},{"1":"extension","10":"extension","3":7,"4":3,"5":11,"6":".google.protobuf.FieldDescriptorProto"},{"1":"options","10":"options","3":8,"4":1,"5":11,"6":".google.protobuf.FileOptions"},{"1":"source_code_info","10":"sourceCodeInfo","3":9,"4":1,"5":11,"6":".google.protobuf.SourceCodeInfo"},{"1":"syntax","10":"syntax","3":12,"4":1,"5":9},{"1":"edition","10":"edition","3":14,"4":1,"5":14,"6":".google.protobuf.Edition"}]},{"1":"DescriptorProto","2":[{"1":"name","10":"name","3":1,"4":1,"5":9},{"1":"field","10":"field","3":2,"4":3,"5":11,"6":".google.protobuf.FieldDescriptorProto"},{"1":"extension","10":"extension","3":6,"4":3,"5":11,"6":".google.protobuf.FieldDescriptorProto"},{"1":"nested_type","10":"nestedType","3":3,"4":3,"5":11,"6":".google.protobuf.DescriptorProto"},{"1":"enum_type","10":"enumType","3":4,"4":3,"5":11,"6":".google.protobuf.EnumDescriptorProto"},{"1":"extension_range","10":"extensionRange","3":5,"4":3,"5":11,"6":".google.protobuf.DescriptorProto.ExtensionRange"},{"1":"oneof_decl","10":"oneofDecl","3":8,"4":3,"5":11,"6":".google.protobuf.OneofDescriptorProto"},{"1":"options","10":"options","3":7,"4":1,"5":11,"6":".google.protobuf.MessageOptions"},{"1":"reserved_range","10":"reservedRange","3":9,"4":3,"5":11,"6":".google.protobuf.DescriptorProto.ReservedRange"},{"1":"reserved_name","10":"reservedName","3":10,"4":3,"5":9}],"3":[{"1":"ExtensionRange","2":[{"1":"start","10":"start","3":1,"4":1,"5":5},{"1":"end","10":"end","3":2,"4":1,"5":5},{"1":"options","10":"options","3":3,"4":1,"5":11,"6":".google.protobuf.ExtensionRangeOptions"}]},{"1":"ReservedRange","2":[{"1":"start","10":"start","3":1,"4":1,"5":5},{"1":"end","10":"end","3":2,"4":1,"5":5}]}]},{"1":"ExtensionRangeOptions","2":[{"1":"uninterpreted_option","10":"uninterpretedOption","3":999,"4":3,"5":11,"6":".google.protobuf.UninterpretedOption"},{"1":"declaration","10":"declaration","3":2,"4":3,"5":11,"6":".google.protobuf.ExtensionRangeOptions.Declaration","8":{"17":2}},{"1":"features","10":"features","3":50,"4":1,"5":11,"6":".google.protobuf.FeatureSet"},{"1":"verification","10":"verification","3":3,"4":1,"5":14,"6":".google.protobuf.ExtensionRangeOptions.VerificationState","7":"UNVERIFIED","8":{"17":2}}],"3":[{"1":"Declaration","2":[{"1":"number","10":"number","3":1,"4":1,"5":5},{"1":"full_name","10":"fullName","3":2,"4":1,"5":9},{"1":"type","10":"type","3":3,"4":1,"5":9},{"1":"reserved","10":"reserved","3":5,"4":1,"5":8},{"1":"repeated","10":"repeated","3":6,"4":1,"5":8}],"9":[{"1":4,"2":5}]}],"4":[{"1":"VerificationState","2":[{"1":"DECLARATION","2":0},{"1":"UNVERIFIED","2":1}]}],"5":[{"1":1000,"2":536870912}]},{"1":"FieldDescriptorProto","2":[{"1":"name","10":"name","3":1,"4":1,"5":9},{"1":"number","10":"number","3":3,"4":1,"5":5},{"1":"label","10":"label","3":4,"4":1,"5":14,"6":".google.protobuf.FieldDescriptorProto.Label"},{"1":"type","10":"type","3":5,"4":1,"5":14,"6":".google.protobuf.FieldDescriptorProto.Type"},{"1":"type_name","10":"typeName","3":6,"4":1,"5":9},{"1":"extendee","10":"extendee","3":2,"4":1,"5":9},{"1":"default_value","10":"defaultValue","3":7,"4":1,"5":9},{"1":"oneof_index","10":"oneofIndex","3":9,"4":1,"5":5},{"1":"json_name","10":"jsonName","3":10,"4":1,"5":9},{"1":"options","10":"options","3":8,"4":1,"5":11,"6":".google.protobuf.FieldOptions"},{"1":"proto3_optional","10":"proto3Optional","3":17,"4":1,"5":8}],"4":[{"1":"Type","2":[{"1":"TYPE_DOUBLE","2":1},{"1":"TYPE_FLOAT","2":2},{"1":"TYPE_INT64","2":3},{"1":"TYPE_UINT64","2":4},{"1":"TYPE_INT32","2":5},{"1":"TYPE_FIXED64","2":6},{"1":"TYPE_FIXED32","2":7},{"1":"TYPE_BOOL","2":8},{"1":"TYPE_STRING","2":9},{"1":"TYPE_GROUP","2":10},{"1":"TYPE_MESSAGE","2":11},{"1":"TYPE_BYTES","2":12},{"1":"TYPE_UINT32","2":13},{"1":"TYPE_ENUM","2":14},{"1":"TYPE_SFIXED32","2":15},{"1":"TYPE_SFIXED64","2":16},{"1":"TYPE_SINT32","2":17},{"1":"TYPE_SINT64","2":18}]},{"1":"Label","2":[{"1":"LABEL_OPTIONAL","2":1},{"1":"LABEL_REPEATED","2":3},{"1":"LABEL_REQUIRED","2":2}]}]},{"1":"OneofDescriptorProto","2":[{"1":"name","10":"name","3":1,"4":1,"5":9},{"1":"options","10":"options","3":2,"4":1,"5":11,"6":".google.protobuf.OneofOptions"}]},{"1":"EnumDescriptorProto","2":[{"1":"name","10":"name","3":1,"4":1,"5":9},{"1":"value","10":"value","3":2,"4":3,"5":11,"6":".google.protobuf.EnumValueDescriptorProto"},{"1":"options","10":"options","3":3,"4":1,"5":11,"6":".google.protobuf.EnumOptions"},{"1":"reserved_range","10":"reservedRange","3":4,"4":3,"5":11,"6":".google.protobuf.EnumDescriptorProto.EnumReservedRange"},{"1":"reserved_name","10":"reservedName","3":5,"4":3,"5":9}],"3":[{"1":"EnumReservedRange","2":[{"1":"start","10":"start","3":1,"4":1,"5":5},{"1":"end","10":"end","3":2,"4":1,"5":5}]}]},{"1":"EnumValueDescriptorProto","2":[{"1":"name","10":"name","3":1,"4":1,"5":9},{"1":"number","10":"number","3":2,"4":1,"5":5},{"1":"options","10":"options","3":3,"4":1,"5":11,"6":".google.protobuf.EnumValueOptions"}]},{"1":"ServiceDescriptorProto","2":[{"1":"name","10":"name","3":1,"4":1,"5":9},{"1":"method","10":"method","3":2,"4":3,"5":11,"6":".google.protobuf.MethodDescriptorProto"},{"1":"options","10":"options","3":3,"4":1,"5":11,"6":".google.protobuf.ServiceOptions"}]},{"1":"MethodDescriptorProto","2":[{"1":"name","10":"name","3":1,"4":1,"5":9},{"1":"input_type","10":"inputType","3":2,"4":1,"5":9},{"1":"output_type","10":"outputType","3":3,"4":1,"5":9},{"1":"options","10":"options","3":4,"4":1,"5":11,"6":".google.protobuf.MethodOptions"},{"1":"client_streaming","10":"clientStreaming","3":5,"4":1,"5":8,"7":"false"},{"1":"server_streaming","10":"serverStreaming","3":6,"4":1,"5":8,"7":"false"}]},{"1":"FileOptions","10":["php_generic_services"],"2":[{"1":"java_package","10":"javaPackage","3":1,"4":1,"5":9},{"1":"java_outer_classname","10":"javaOuterClassname","3":8,"4":1,"5":9},{"1":"java_multiple_files","10":"javaMultipleFiles","3":10,"4":1,"5":8,"7":"false"},{"1":"java_generate_equals_and_hash","10":"javaGenerateEqualsAndHash","3":20,"4":1,"5":8,"8":{"3":true}},{"1":"java_string_check_utf8","10":"javaStringCheckUtf8","3":27,"4":1,"5":8,"7":"false"},{"1":"optimize_for","10":"optimizeFor","3":9,"4":1,"5":14,"6":".google.protobuf.FileOptions.OptimizeMode","7":"SPEED"},{"1":"go_package","10":"goPackage","3":11,"4":1,"5":9},{"1":"cc_generic_services","10":"ccGenericServices","3":16,"4":1,"5":8,"7":"false"},{"1":"java_generic_services","10":"javaGenericServices","3":17,"4":1,"5":8,"7":"false"},{"1":"py_generic_services","10":"pyGenericServices","3":18,"4":1,"5":8,"7":"false"},{"1":"deprecated","10":"deprecated","3":23,"4":1,"5":8,"7":"false"},{"1":"cc_enable_arenas","10":"ccEnableArenas","3":31,"4":1,"5":8,"7":"true"},{"1":"objc_class_prefix","10":"objcClassPrefix","3":36,"4":1,"5":9},{"1":"csharp_namespace","10":"csharpNamespace","3":37,"4":1,"5":9},{"1":"swift_prefix","10":"swiftPrefix","3":39,"4":1,"5":9},{"1":"php_class_prefix","10":"phpClassPrefix","3":40,"4":1,"5":9},{"1":"php_namespace","10":"phpNamespace","3":41,"4":1,"5":9},{"1":"php_metadata_namespace","10":"phpMetadataNamespace","3":44,"4":1,"5":9},{"1":"ruby_package","10":"rubyPackage","3":45,"4":1,"5":9},{"1":"features","10":"features","3":50,"4":1,"5":11,"6":".google.protobuf.FeatureSet"},{"1":"uninterpreted_option","10":"uninterpretedOption","3":999,"4":3,"5":11,"6":".google.protobuf.UninterpretedOption"}],"4":[{"1":"OptimizeMode","2":[{"1":"SPEED","2":1},{"1":"CODE_SIZE","2":2},{"1":"LITE_RUNTIME","2":3}]}],"5":[{"1":1000,"2":536870912}],"9":[{"1":42,"2":43},{"1":38,"2":39}]},{"1":"MessageOptions","2":[{"1":"message_set_wire_format","10":"messageSetWireFormat","3":1,"4":1,"5":8,"7":"false"},{"1":"no_standard_descriptor_accessor","10":"noStandardDescriptorAccessor","3":2,"4":1,"5":8,"7":"false"},{"1":"deprecated","10":"deprecated","3":3,"4":1,"5":8,"7":"false"},{"1":"map_entry","10":"mapEntry","3":7,"4":1,"5":8},{"1":"deprecated_legacy_json_field_conflicts","10":"deprecatedLegacyJsonFieldConflicts","3":11,"4":1,"5":8,"8":{"3":true}},{"1":"features","10":"features","3":12,"4":1,"5":11,"6":".google.protobuf.FeatureSet"},{"1":"uninterpreted_option","10":"uninterpretedOption","3":999,"4":3,"5":11,"6":".google.protobuf.UninterpretedOption"}],"5":[{"1":1000,"2":536870912}],"9":[{"1":4,"2":5},{"1":5,"2":6},{"1":6,"2":7},{"1":8,"2":9},{"1":9,"2":10}]},{"1":"FieldOptions","2":[{"1":"ctype","10":"ctype","3":1,"4":1,"5":14,"6":".google.protobuf.FieldOptions.CType","7":"STRING"},{"1":"packed","10":"packed","3":2,"4":1,"5":8},{"1":"jstype","10":"jstype","3":6,"4":1,"5":14,"6":".google.protobuf.FieldOptions.JSType","7":"JS_NORMAL"},{"1":"lazy","10":"lazy","3":5,"4":1,"5":8,"7":"false"},{"1":"unverified_lazy","10":"unverifiedLazy","3":15,"4":1,"5":8,"7":"false"},{"1":"deprecated","10":"deprecated","3":3,"4":1,"5":8,"7":"false"},{"1":"weak","10":"weak","3":10,"4":1,"5":8,"7":"false"},{"1":"debug_redact","10":"debugRedact","3":16,"4":1,"5":8,"7":"false"},{"1":"retention","10":"retention","3":17,"4":1,"5":14,"6":".google.protobuf.FieldOptions.OptionRetention"},{"1":"targets","10":"targets","3":19,"4":3,"5":14,"6":".google.protobuf.FieldOptions.OptionTargetType"},{"1":"edition_defaults","10":"editionDefaults","3":20,"4":3,"5":11,"6":".google.protobuf.FieldOptions.EditionDefault"},{"1":"features","10":"features","3":21,"4":1,"5":11,"6":".google.protobuf.FeatureSet"},{"1":"feature_support","10":"featureSupport","3":22,"4":1,"5":11,"6":".google.protobuf.FieldOptions.FeatureSupport"},{"1":"uninterpreted_option","10":"uninterpretedOption","3":999,"4":3,"5":11,"6":".google.protobuf.UninterpretedOption"}],"3":[{"1":"EditionDefault","2":[{"1":"edition","10":"edition","3":3,"4":1,"5":14,"6":".google.protobuf.Edition"},{"1":"value","10":"value","3":2,"4":1,"5":9}]},{"1":"FeatureSupport","2":[{"1":"edition_introduced","10":"editionIntroduced","3":1,"4":1,"5":14,"6":".google.protobuf.Edition"},{"1":"edition_deprecated","10":"editionDeprecated","3":2,"4":1,"5":14,"6":".google.protobuf.Edition"},{"1":"deprecation_warning","10":"deprecationWarning","3":3,"4":1,"5":9},{"1":"edition_removed","10":"editionRemoved","3":4,"4":1,"5":14,"6":".google.protobuf.Edition"}]}],"4":[{"1":"CType","2":[{"1":"STRING","2":0},{"1":"CORD","2":1},{"1":"STRING_PIECE","2":2}]},{"1":"JSType","2":[{"1":"JS_NORMAL","2":0},{"1":"JS_STRING","2":1},{"1":"JS_NUMBER","2":2}]},{"1":"OptionRetention","2":[{"1":"RETENTION_UNKNOWN","2":0},{"1":"RETENTION_RUNTIME","2":1},{"1":"RETENTION_SOURCE","2":2}]},{"1":"OptionTargetType","2":[{"1":"TARGET_TYPE_UNKNOWN","2":0},{"1":"TARGET_TYPE_FILE","2":1},{"1":"TARGET_TYPE_EXTENSION_RANGE","2":2},{"1":"TARGET_TYPE_MESSAGE","2":3},{"1":"TARGET_TYPE_FIELD","2":4},{"1":"TARGET_TYPE_ONEOF","2":5},{"1":"TARGET_TYPE_ENUM","2":6},{"1":"TARGET_TYPE_ENUM_ENTRY","2":7},{"1":"TARGET_TYPE_SERVICE","2":8},{"1":"TARGET_TYPE_METHOD","2":9}]}],"5":[{"1":1000,"2":536870912}],"9":[{"1":4,"2":5},{"1":18,"2":19}]},{"1":"OneofOptions","2":[{"1":"features","10":"features","3":1,"4":1,"5":11,"6":".google.protobuf.FeatureSet"},{"1":"uninterpreted_option","10":"uninterpretedOption","3":999,"4":3,"5":11,"6":".google.protobuf.UninterpretedOption"}],"5":[{"1":1000,"2":536870912}]},{"1":"EnumOptions","2":[{"1":"allow_alias","10":"allowAlias","3":2,"4":1,"5":8},{"1":"deprecated","10":"deprecated","3":3,"4":1,"5":8,"7":"false"},{"1":"deprecated_legacy_json_field_conflicts","10":"deprecatedLegacyJsonFieldConflicts","3":6,"4":1,"5":8,"8":{"3":true}},{"1":"features","10":"features","3":7,"4":1,"5":11,"6":".google.protobuf.FeatureSet"},{"1":"uninterpreted_option","10":"uninterpretedOption","3":999,"4":3,"5":11,"6":".google.protobuf.UninterpretedOption"}],"5":[{"1":1000,"2":536870912}],"9":[{"1":5,"2":6}]},{"1":"EnumValueOptions","2":[{"1":"deprecated","10":"deprecated","3":1,"4":1,"5":8,"7":"false"},{"1":"features","10":"features","3":2,"4":1,"5":11,"6":".google.protobuf.FeatureSet"},{"1":"debug_redact","10":"debugRedact","3":3,"4":1,"5":8,"7":"false"},{"1":"feature_support","10":"featureSupport","3":4,"4":1,"5":11,"6":".google.protobuf.FieldOptions.FeatureSupport"},{"1":"uninterpreted_option","10":"uninterpretedOption","3":999,"4":3,"5":11,"6":".google.protobuf.UninterpretedOption"}],"5":[{"1":1000,"2":536870912}]},{"1":"ServiceOptions","2":[{"1":"features","10":"features","3":34,"4":1,"5":11,"6":".google.protobuf.FeatureSet"},{"1":"deprecated","10":"deprecated","3":33,"4":1,"5":8,"7":"false"},{"1":"uninterpreted_option","10":"uninterpretedOption","3":999,"4":3,"5":11,"6":".google.protobuf.UninterpretedOption"}],"5":[{"1":1000,"2":536870912}]},{"1":"MethodOptions","2":[{"1":"deprecated","10":"deprecated","3":33,"4":1,"5":8,"7":"false"},{"1":"idempotency_level","10":"idempotencyLevel","3":34,"4":1,"5":14,"6":".google.protobuf.MethodOptions.IdempotencyLevel","7":"IDEMPOTENCY_UNKNOWN"},{"1":"features","10":"features","3":35,"4":1,"5":11,"6":".google.protobuf.FeatureSet"},{"1":"uninterpreted_option","10":"uninterpretedOption","3":999,"4":3,"5":11,"6":".google.protobuf.UninterpretedOption"}],"4":[{"1":"IdempotencyLevel","2":[{"1":"IDEMPOTENCY_UNKNOWN","2":0},{"1":"NO_SIDE_EFFECTS","2":1},{"1":"IDEMPOTENT","2":2}]}],"5":[{"1":1000,"2":536870912}]},{"1":"UninterpretedOption","2":[{"1":"name","10":"name","3":2,"4":3,"5":11,"6":".google.protobuf.UninterpretedOption.NamePart"},{"1":"identifier_value","10":"identifierValue","3":3,"4":1,"5":9},{"1":"positive_int_value","10":"positiveIntValue","3":4,"4":1,"5":4},{"1":"negative_int_value","10":"negativeIntValue","3":5,"4":1,"5":3},{"1":"double_value","10":"doubleValue","3":6,"4":1,"5":1},{"1":"string_value","10":"stringValue","3":7,"4":1,"5":12},{"1":"aggregate_value","10":"aggregateValue","3":8,"4":1,"5":9}],"3":[{"1":"NamePart","2":[{"1":"name_part","10":"namePart","3":1,"4":2,"5":9},{"1":"is_extension","10":"isExtension","3":2,"4":2,"5":8}]}]},{"1":"FeatureSet","2":[{"1":"field_presence","10":"fieldPresence","3":1,"4":1,"5":14,"6":".google.protobuf.FeatureSet.FieldPresence","8":{"17":1,"19":[4,1],"20":[{"2":"EXPLICIT","3":900},{"2":"IMPLICIT","3":999},{"2":"EXPLICIT","3":1000}],"22":{"1":1000}}},{"1":"enum_type","10":"enumType","3":2,"4":1,"5":14,"6":".google.protobuf.FeatureSet.EnumType","8":{"17":1,"19":[6,1],"20":[{"2":"CLOSED","3":900},{"2":"OPEN","3":999}],"22":{"1":1000}}},{"1":"repeated_field_encoding","10":"repeatedFieldEncoding","3":3,"4":1,"5":14,"6":".google.protobuf.FeatureSet.RepeatedFieldEncoding","8":{"17":1,"19":[4,1],"20":[{"2":"EXPANDED","3":900},{"2":"PACKED","3":999}],"22":{"1":1000}}},{"1":"utf8_validation","10":"utf8Validation","3":4,"4":1,"5":14,"6":".google.protobuf.FeatureSet.Utf8Validation","8":{"17":1,"19":[4,1],"20":[{"2":"NONE","3":900},{"2":"VERIFY","3":999}],"22":{"1":1000}}},{"1":"message_encoding","10":"messageEncoding","3":5,"4":1,"5":14,"6":".google.protobuf.FeatureSet.MessageEncoding","8":{"17":1,"19":[4,1],"20":[{"2":"LENGTH_PREFIXED","3":900}],"22":{"1":1000}}},{"1":"json_format","10":"jsonFormat","3":6,"4":1,"5":14,"6":".google.protobuf.FeatureSet.JsonFormat","8":{"17":1,"19":[3,6,1],"20":[{"2":"LEGACY_BEST_EFFORT","3":900},{"2":"ALLOW","3":999}],"22":{"1":1000}}},{"1":"enforce_naming_style","10":"enforceNamingStyle","3":7,"4":1,"5":14,"6":".google.protobuf.FeatureSet.EnforceNamingStyle","8":{"17":2,"19":[1,2,3,4,5,6,7,8,9],"20":[{"2":"STYLE_LEGACY","3":900},{"2":"STYLE2024","3":1001}],"22":{"1":1001}}}],"4":[{"1":"FieldPresence","2":[{"1":"FIELD_PRESENCE_UNKNOWN","2":0},{"1":"EXPLICIT","2":1},{"1":"IMPLICIT","2":2},{"1":"LEGACY_REQUIRED","2":3}]},{"1":"EnumType","2":[{"1":"ENUM_TYPE_UNKNOWN","2":0},{"1":"OPEN","2":1},{"1":"CLOSED","2":2}]},{"1":"RepeatedFieldEncoding","2":[{"1":"REPEATED_FIELD_ENCODING_UNKNOWN","2":0},{"1":"PACKED","2":1},{"1":"EXPANDED","2":2}]},{"1":"Utf8Validation","2":[{"1":"UTF8_VALIDATION_UNKNOWN","2":0},{"1":"VERIFY","2":2},{"1":"NONE","2":3}],"4":[{"1":1,"2":1}]},{"1":"MessageEncoding","2":[{"1":"MESSAGE_ENCODING_UNKNOWN","2":0},{"1":"LENGTH_PREFIXED","2":1},{"1":"DELIMITED","2":2}]},{"1":"JsonFormat","2":[{"1":"JSON_FORMAT_UNKNOWN","2":0},{"1":"ALLOW","2":1},{"1":"LEGACY_BEST_EFFORT","2":2}]},{"1":"EnforceNamingStyle","2":[{"1":"ENFORCE_NAMING_STYLE_UNKNOWN","2":0},{"1":"STYLE2024","2":1},{"1":"STYLE_LEGACY","2":2}]}],"5":[{"1":1000,"2":9995},{"1":9995,"2":10000},{"1":10000,"2":10001}],"9":[{"1":999,"2":1000}]},{"1":"FeatureSetDefaults","2":[{"1":"defaults","10":"defaults","3":1,"4":3,"5":11,"6":".google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault"},{"1":"minimum_edition","10":"minimumEdition","3":4,"4":1,"5":14,"6":".google.protobuf.Edition"},{"1":"maximum_edition","10":"maximumEdition","3":5,"4":1,"5":14,"6":".google.protobuf.Edition"}],"3":[{"1":"FeatureSetEditionDefault","10":["features"],"2":[{"1":"edition","10":"edition","3":3,"4":1,"5":14,"6":".google.protobuf.Edition"},{"1":"overridable_features","10":"overridableFeatures","3":4,"4":1,"5":11,"6":".google.protobuf.FeatureSet"},{"1":"fixed_features","10":"fixedFeatures","3":5,"4":1,"5":11,"6":".google.protobuf.FeatureSet"}],"9":[{"1":1,"2":2},{"1":2,"2":3}]}]},{"1":"SourceCodeInfo","2":[{"1":"location","10":"location","3":1,"4":3,"5":11,"6":".google.protobuf.SourceCodeInfo.Location"}],"3":[{"1":"Location","2":[{"1":"path","10":"path","3":1,"4":3,"5":5,"8":{"2":true}},{"1":"span","10":"span","3":2,"4":3,"5":5,"8":{"2":true}},{"1":"leading_comments","10":"leadingComments","3":3,"4":1,"5":9},{"1":"trailing_comments","10":"trailingComments","3":4,"4":1,"5":9},{"1":"leading_detached_comments","10":"leadingDetachedComments","3":6,"4":3,"5":9}]}],"5":[{"1":536000000,"2":536000001}]},{"1":"GeneratedCodeInfo","2":[{"1":"annotation","10":"annotation","3":1,"4":3,"5":11,"6":".google.protobuf.GeneratedCodeInfo.Annotation"}],"3":[{"1":"Annotation","2":[{"1":"path","10":"path","3":1,"4":3,"5":5,"8":{"2":true}},{"1":"source_file","10":"sourceFile","3":2,"4":1,"5":9},{"1":"begin","10":"begin","3":3,"4":1,"5":5},{"1":"end","10":"end","3":4,"4":1,"5":5},{"1":"semantic","10":"semantic","3":5,"4":1,"5":14,"6":".google.protobuf.GeneratedCodeInfo.Annotation.Semantic"}],"4":[{"1":"Semantic","2":[{"1":"NONE","2":0},{"1":"SET","2":1},{"1":"ALIAS","2":2}]}]}]}],"5":[{"1":"Edition","2":[{"1":"EDITION_UNKNOWN","2":0},{"1":"EDITION_LEGACY","2":900},{"1":"EDITION_PROTO2","2":998},{"1":"EDITION_PROTO3","2":999},{"1":"EDITION_2023","2":1000},{"1":"EDITION_2024","2":1001},{"1":"EDITION_1_TEST_ONLY","2":1},{"1":"EDITION_2_TEST_ONLY","2":2},{"1":"EDITION_99997_TEST_ONLY","2":99997},{"1":"EDITION_99998_TEST_ONLY","2":99998},{"1":"EDITION_99999_TEST_ONLY","2":99999},{"1":"EDITION_MAX","2":2147483647}]}],"8":{"1":"com.google.protobuf","11":"google.golang.org/protobuf/types/descriptorpb","31":true,"36":"GPB","37":"Google.Protobuf.Reflection","8":"DescriptorProtos","9":1}}]},{".google.protobuf.DescriptorProto":[11,"$[1].\\"1\\"[0]","$[1].\\"1\\"[0].\\"4\\"[2]"],".google.protobuf.DescriptorProto.ExtensionRange":[11,"$[1].\\"1\\"[0]","$[1].\\"1\\"[0].\\"4\\"[2].\\"3\\"[0]"],".google.protobuf.DescriptorProto.ReservedRange":[11,"$[1].\\"1\\"[0]","$[1].\\"1\\"[0].\\"4\\"[2].\\"3\\"[1]"],".google.protobuf.Edition":[14,"$[1].\\"1\\"[0]","$[1].\\"1\\"[0].\\"5\\"[0]"],".google.protobuf.EnumDescriptorProto":[11,"$[1].\\"1\\"[0]","$[1].\\"1\\"[0].\\"4\\"[6]"],".google.protobuf.EnumDescriptorProto.EnumReservedRange":[11,"$[1].\\"1\\"[0]","$[1].\\"1\\"[0].\\"4\\"[6].\\"3\\"[0]"],".google.protobuf.EnumOptions":[11,"$[1].\\"1\\"[0]","$[1].\\"1\\"[0].\\"4\\"[14]"],".google.protobuf.EnumValueDescriptorProto":[11,"$[1].\\"1\\"[0]","$[1].\\"1\\"[0].\\"4\\"[7]"],".google.protobuf.EnumValueOptions":[11,"$[1].\\"1\\"[0]","$[1].\\"1\\"[0].\\"4\\"[15]"],".google.protobuf.ExtensionRangeOptions":[11,"$[1].\\"1\\"[0]","$[1].\\"1\\"[0].\\"4\\"[3]"],".google.protobuf.ExtensionRangeOptions.Declaration":[11,"$[1].\\"1\\"[0]","$[1].\\"1\\"[0].\\"4\\"[3].\\"3\\"[0]"],".google.protobuf.ExtensionRangeOptions.VerificationState":[14,"$[1].\\"1\\"[0]","$[1].\\"1\\"[0].\\"4\\"[3].\\"4\\"[0]"],".google.protobuf.FeatureSet":[11,"$[1].\\"1\\"[0]","$[1].\\"1\\"[0].\\"4\\"[19]"],".google.protobuf.FeatureSet.EnforceNamingStyle":[14,"$[1].\\"1\\"[0]","$[1].\\"1\\"[0].\\"4\\"[19].\\"4\\"[6]"],".google.protobuf.FeatureSet.EnumType":[14,"$[1].\\"1\\"[0]","$[1].\\"1\\"[0].\\"4\\"[19].\\"4\\"[1]"],".google.protobuf.FeatureSet.FieldPresence":[14,"$[1].\\"1\\"[0]","$[1].\\"1\\"[0].\\"4\\"[19].\\"4\\"[0]"],".google.protobuf.FeatureSet.JsonFormat":[14,"$[1].\\"1\\"[0]","$[1].\\"1\\"[0].\\"4\\"[19].\\"4\\"[5]"],".google.protobuf.FeatureSet.MessageEncoding":[14,"$[1].\\"1\\"[0]","$[1].\\"1\\"[0].\\"4\\"[19].\\"4\\"[4]"],".google.protobuf.FeatureSet.RepeatedFieldEncoding":[14,"$[1].\\"1\\"[0]","$[1].\\"1\\"[0].\\"4\\"[19].\\"4\\"[2]"],".google.protobuf.FeatureSet.Utf8Validation":[14,"$[1].\\"1\\"[0]","$[1].\\"1\\"[0].\\"4\\"[19].\\"4\\"[3]"],".google.protobuf.FeatureSetDefaults":[11,"$[1].\\"1\\"[0]","$[1].\\"1\\"[0].\\"4\\"[20]"],".google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault":[11,"$[1].\\"1\\"[0]","$[1].\\"1\\"[0].\\"4\\"[20].\\"3\\"[0]"],".google.protobuf.FieldDescriptorProto":[11,"$[1].\\"1\\"[0]","$[1].\\"1\\"[0].\\"4\\"[4]"],".google.protobuf.FieldDescriptorProto.Label":[14,"$[1].\\"1\\"[0]","$[1].\\"1\\"[0].\\"4\\"[4].\\"4\\"[1]"],".google.protobuf.FieldDescriptorProto.Type":[14,"$[1].\\"1\\"[0]","$[1].\\"1\\"[0].\\"4\\"[4].\\"4\\"[0]"],".google.protobuf.FieldOptions":[11,"$[1].\\"1\\"[0]","$[1].\\"1\\"[0].\\"4\\"[12]"],".google.protobuf.FieldOptions.CType":[14,"$[1].\\"1\\"[0]","$[1].\\"1\\"[0].\\"4\\"[12].\\"4\\"[0]"],".google.protobuf.FieldOptions.EditionDefault":[11,"$[1].\\"1\\"[0]","$[1].\\"1\\"[0].\\"4\\"[12].\\"3\\"[0]"],".google.protobuf.FieldOptions.FeatureSupport":[11,"$[1].\\"1\\"[0]","$[1].\\"1\\"[0].\\"4\\"[12].\\"3\\"[1]"],".google.protobuf.FieldOptions.JSType":[14,"$[1].\\"1\\"[0]","$[1].\\"1\\"[0].\\"4\\"[12].\\"4\\"[1]"],".google.protobuf.FieldOptions.OptionRetention":[14,"$[1].\\"1\\"[0]","$[1].\\"1\\"[0].\\"4\\"[12].\\"4\\"[2]"],".google.protobuf.FieldOptions.OptionTargetType":[14,"$[1].\\"1\\"[0]","$[1].\\"1\\"[0].\\"4\\"[12].\\"4\\"[3]"],".google.protobuf.FileDescriptorProto":[11,"$[1].\\"1\\"[0]","$[1].\\"1\\"[0].\\"4\\"[1]"],".google.protobuf.FileDescriptorSet":[11,"$[1].\\"1\\"[0]","$[1].\\"1\\"[0].\\"4\\"[0]"],".google.protobuf.FileOptions":[11,"$[1].\\"1\\"[0]","$[1].\\"1\\"[0].\\"4\\"[10]"],".google.protobuf.FileOptions.OptimizeMode":[14,"$[1].\\"1\\"[0]","$[1].\\"1\\"[0].\\"4\\"[10].\\"4\\"[0]"],".google.protobuf.GeneratedCodeInfo":[11,"$[1].\\"1\\"[0]","$[1].\\"1\\"[0].\\"4\\"[22]"],".google.protobuf.GeneratedCodeInfo.Annotation":[11,"$[1].\\"1\\"[0]","$[1].\\"1\\"[0].\\"4\\"[22].\\"3\\"[0]"],".google.protobuf.GeneratedCodeInfo.Annotation.Semantic":[14,"$[1].\\"1\\"[0]","$[1].\\"1\\"[0].\\"4\\"[22].\\"3\\"[0].\\"4\\"[0]"],".google.protobuf.MessageOptions":[11,"$[1].\\"1\\"[0]","$[1].\\"1\\"[0].\\"4\\"[11]"],".google.protobuf.MethodDescriptorProto":[11,"$[1].\\"1\\"[0]","$[1].\\"1\\"[0].\\"4\\"[9]"],".google.protobuf.MethodOptions":[11,"$[1].\\"1\\"[0]","$[1].\\"1\\"[0].\\"4\\"[17]"],".google.protobuf.MethodOptions.IdempotencyLevel":[14,"$[1].\\"1\\"[0]","$[1].\\"1\\"[0].\\"4\\"[17].\\"4\\"[0]"],".google.protobuf.OneofDescriptorProto":[11,"$[1].\\"1\\"[0]","$[1].\\"1\\"[0].\\"4\\"[5]"],".google.protobuf.OneofOptions":[11,"$[1].\\"1\\"[0]","$[1].\\"1\\"[0].\\"4\\"[13]"],".google.protobuf.ServiceDescriptorProto":[11,"$[1].\\"1\\"[0]","$[1].\\"1\\"[0].\\"4\\"[8]"],".google.protobuf.ServiceOptions":[11,"$[1].\\"1\\"[0]","$[1].\\"1\\"[0].\\"4\\"[16]"],".google.protobuf.SourceCodeInfo":[11,"$[1].\\"1\\"[0]","$[1].\\"1\\"[0].\\"4\\"[21]"],".google.protobuf.SourceCodeInfo.Location":[11,"$[1].\\"1\\"[0]","$[1].\\"1\\"[0].\\"4\\"[21].\\"3\\"[0]"],".google.protobuf.UninterpretedOption":[11,"$[1].\\"1\\"[0]","$[1].\\"1\\"[0].\\"4\\"[18]"],".google.protobuf.UninterpretedOption.NamePart":[11,"$[1].\\"1\\"[0]","$[1].\\"1\\"[0].\\"4\\"[18].\\"3\\"[0]"]}]' AS JSON);
END $$

DROP FUNCTION IF EXISTS _pb_google_struct_proto $$
CREATE FUNCTION _pb_google_struct_proto() RETURNS JSON DETERMINISTIC
BEGIN
	RETURN CAST('[1,{"1":[{"1":"google/protobuf/struct.proto","12":"proto3","2":"google.protobuf","4":[{"1":"Struct","2":[{"1":"fields","10":"fields","3":1,"4":3,"5":11,"6":".google.protobuf.Struct.FieldsEntry"}],"3":[{"1":"FieldsEntry","2":[{"1":"key","10":"key","3":1,"4":1,"5":9},{"1":"value","10":"value","3":2,"4":1,"5":11,"6":".google.protobuf.Value"}],"7":{"7":true}}]},{"1":"Value","2":[{"1":"null_value","10":"nullValue","3":1,"4":1,"5":14,"6":".google.protobuf.NullValue","9":0},{"1":"number_value","10":"numberValue","3":2,"4":1,"5":1,"9":0},{"1":"string_value","10":"stringValue","3":3,"4":1,"5":9,"9":0},{"1":"bool_value","10":"boolValue","3":4,"4":1,"5":8,"9":0},{"1":"struct_value","10":"structValue","3":5,"4":1,"5":11,"6":".google.protobuf.Struct","9":0},{"1":"list_value","10":"listValue","3":6,"4":1,"5":11,"6":".google.protobuf.ListValue","9":0}],"8":[{"1":"kind"}]},{"1":"ListValue","2":[{"1":"values","10":"values","3":1,"4":3,"5":11,"6":".google.protobuf.Value"}]}],"5":[{"1":"NullValue","2":[{"1":"NULL_VALUE","2":0}]}],"8":{"1":"com.google.protobuf","10":true,"11":"google.golang.org/protobuf/types/known/structpb","31":true,"36":"GPB","37":"Google.Protobuf.WellKnownTypes","8":"StructProto"}}]},{".google.protobuf.ListValue":[11,"$[1].\\"1\\"[0]","$[1].\\"1\\"[0].\\"4\\"[2]"],".google.protobuf.NullValue":[14,"$[1].\\"1\\"[0]","$[1].\\"1\\"[0].\\"5\\"[0]"],".google.protobuf.Struct":[11,"$[1].\\"1\\"[0]","$[1].\\"1\\"[0].\\"4\\"[0]"],".google.protobuf.Struct.FieldsEntry":[11,"$[1].\\"1\\"[0]","$[1].\\"1\\"[0].\\"4\\"[0].\\"3\\"[0]"],".google.protobuf.Value":[11,"$[1].\\"1\\"[0]","$[1].\\"1\\"[0].\\"4\\"[1]"]}]' AS JSON);
END $$

DROP FUNCTION IF EXISTS _pb_google_field_mask_proto $$
CREATE FUNCTION _pb_google_field_mask_proto() RETURNS JSON DETERMINISTIC
BEGIN
	RETURN CAST('[1,{"1":[{"1":"google/protobuf/field_mask.proto","12":"proto3","2":"google.protobuf","4":[{"1":"FieldMask","2":[{"1":"paths","10":"paths","3":1,"4":3,"5":9}]}],"8":{"1":"com.google.protobuf","10":true,"11":"google.golang.org/protobuf/types/known/fieldmaskpb","31":true,"36":"GPB","37":"Google.Protobuf.WellKnownTypes","8":"FieldMaskProto"}}]},{".google.protobuf.FieldMask":[11,"$[1].\\"1\\"[0]","$[1].\\"1\\"[0].\\"4\\"[0]"]}]' AS JSON);
END $$

DROP FUNCTION IF EXISTS _pb_google_wrappers_proto $$
CREATE FUNCTION _pb_google_wrappers_proto() RETURNS JSON DETERMINISTIC
BEGIN
	RETURN CAST('[1,{"1":[{"1":"google/protobuf/wrappers.proto","12":"proto3","2":"google.protobuf","4":[{"1":"DoubleValue","2":[{"1":"value","10":"value","3":1,"4":1,"5":1}]},{"1":"FloatValue","2":[{"1":"value","10":"value","3":1,"4":1,"5":2}]},{"1":"Int64Value","2":[{"1":"value","10":"value","3":1,"4":1,"5":3}]},{"1":"UInt64Value","2":[{"1":"value","10":"value","3":1,"4":1,"5":4}]},{"1":"Int32Value","2":[{"1":"value","10":"value","3":1,"4":1,"5":5}]},{"1":"UInt32Value","2":[{"1":"value","10":"value","3":1,"4":1,"5":13}]},{"1":"BoolValue","2":[{"1":"value","10":"value","3":1,"4":1,"5":8}]},{"1":"StringValue","2":[{"1":"value","10":"value","3":1,"4":1,"5":9}]},{"1":"BytesValue","2":[{"1":"value","10":"value","3":1,"4":1,"5":12}]}],"8":{"1":"com.google.protobuf","10":true,"11":"google.golang.org/protobuf/types/known/wrapperspb","31":true,"36":"GPB","37":"Google.Protobuf.WellKnownTypes","8":"WrappersProto"}}]},{".google.protobuf.BoolValue":[11,"$[1].\\"1\\"[0]","$[1].\\"1\\"[0].\\"4\\"[6]"],".google.protobuf.BytesValue":[11,"$[1].\\"1\\"[0]","$[1].\\"1\\"[0].\\"4\\"[8]"],".google.protobuf.DoubleValue":[11,"$[1].\\"1\\"[0]","$[1].\\"1\\"[0].\\"4\\"[0]"],".google.protobuf.FloatValue":[11,"$[1].\\"1\\"[0]","$[1].\\"1\\"[0].\\"4\\"[1]"],".google.protobuf.Int32Value":[11,"$[1].\\"1\\"[0]","$[1].\\"1\\"[0].\\"4\\"[4]"],".google.protobuf.Int64Value":[11,"$[1].\\"1\\"[0]","$[1].\\"1\\"[0].\\"4\\"[2]"],".google.protobuf.StringValue":[11,"$[1].\\"1\\"[0]","$[1].\\"1\\"[0].\\"4\\"[7]"],".google.protobuf.UInt32Value":[11,"$[1].\\"1\\"[0]","$[1].\\"1\\"[0].\\"4\\"[5]"],".google.protobuf.UInt64Value":[11,"$[1].\\"1\\"[0]","$[1].\\"1\\"[0].\\"4\\"[3]"]}]' AS JSON);
END $$

DROP FUNCTION IF EXISTS _pb_google_timestamp_proto $$
CREATE FUNCTION _pb_google_timestamp_proto() RETURNS JSON DETERMINISTIC
BEGIN
	RETURN CAST('[1,{"1":[{"1":"google/protobuf/timestamp.proto","12":"proto3","2":"google.protobuf","4":[{"1":"Timestamp","2":[{"1":"seconds","10":"seconds","3":1,"4":1,"5":3},{"1":"nanos","10":"nanos","3":2,"4":1,"5":5}]}],"8":{"1":"com.google.protobuf","10":true,"11":"google.golang.org/protobuf/types/known/timestamppb","31":true,"36":"GPB","37":"Google.Protobuf.WellKnownTypes","8":"TimestampProto"}}]},{".google.protobuf.Timestamp":[11,"$[1].\\"1\\"[0]","$[1].\\"1\\"[0].\\"4\\"[0]"]}]' AS JSON);
END $$

DROP FUNCTION IF EXISTS _pb_google_duration_proto $$
CREATE FUNCTION _pb_google_duration_proto() RETURNS JSON DETERMINISTIC
BEGIN
	RETURN CAST('[1,{"1":[{"1":"google/protobuf/duration.proto","12":"proto3","2":"google.protobuf","4":[{"1":"Duration","2":[{"1":"seconds","10":"seconds","3":1,"4":1,"5":3},{"1":"nanos","10":"nanos","3":2,"4":1,"5":5}]}],"8":{"1":"com.google.protobuf","10":true,"11":"google.golang.org/protobuf/types/known/durationpb","31":true,"36":"GPB","37":"Google.Protobuf.WellKnownTypes","8":"DurationProto"}}]},{".google.protobuf.Duration":[11,"$[1].\\"1\\"[0]","$[1].\\"1\\"[0].\\"4\\"[0]"]}]' AS JSON);
END $$

DROP FUNCTION IF EXISTS _pb_google_any_proto $$
CREATE FUNCTION _pb_google_any_proto() RETURNS JSON DETERMINISTIC
BEGIN
	RETURN CAST('[1,{"1":[{"1":"google/protobuf/any.proto","12":"proto3","2":"google.protobuf","4":[{"1":"Any","2":[{"1":"type_url","10":"typeUrl","3":1,"4":1,"5":9},{"1":"value","10":"value","3":2,"4":1,"5":12}]}],"8":{"1":"com.google.protobuf","10":true,"11":"google.golang.org/protobuf/types/known/anypb","36":"GPB","37":"Google.Protobuf.WellKnownTypes","8":"AnyProto"}}]},{".google.protobuf.Any":[11,"$[1].\\"1\\"[0]","$[1].\\"1\\"[0].\\"4\\"[0]"]}]' AS JSON);
END $$

DROP FUNCTION IF EXISTS _pb_google_empty_proto $$
CREATE FUNCTION _pb_google_empty_proto() RETURNS JSON DETERMINISTIC
BEGIN
	RETURN CAST('[1,{"1":[{"1":"google/protobuf/empty.proto","12":"proto3","2":"google.protobuf","4":[{"1":"Empty"}],"8":{"1":"com.google.protobuf","10":true,"11":"google.golang.org/protobuf/types/known/emptypb","31":true,"36":"GPB","37":"Google.Protobuf.WellKnownTypes","8":"EmptyProto"}}]},{".google.protobuf.Empty":[11,"$[1].\\"1\\"[0]","$[1].\\"1\\"[0].\\"4\\"[0]"]}]' AS JSON);
END $$
