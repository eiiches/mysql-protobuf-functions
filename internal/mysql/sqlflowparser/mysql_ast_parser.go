// Code generated by pigeon; DO NOT EDIT.

package sqlflowparser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"sync"
	"unicode"
	"unicode/utf8"
)

// Helper function to create Position from pigeon position
func makePosition(pos position) Position {
	return Position{
		Line:   pos.line,
		Column: pos.col,
		Offset: pos.offset,
	}
}

// Helper function to create BaseStatement from pigeon context
func makeBaseStatement(c *current) BaseStatement {
	return BaseStatement{
		Pos:   makePosition(c.pos),
		Label: "",             // Will be set by Statement rule if label exists
		Text:  string(c.text), // Current matched text
	}
}

// Helper function to convert interface{} to []StatementAST
func toStatementList(v interface{}) []StatementAST {
	if v == nil {
		return nil
	}
	if list, ok := v.([]StatementAST); ok {
		return list
	}
	if stmt, ok := v.(StatementAST); ok {
		return []StatementAST{stmt}
	}
	return nil
}

// Helper function to convert interface{} to string
func toString(v interface{}) string {
	if v == nil {
		return ""
	}
	if s, ok := v.(string); ok {
		return s
	}
	if b, ok := v.([]byte); ok {
		return string(b)
	}
	return ""
}

// Helper function to convert interface{} to []Parameter
func toParameterList(v interface{}) []Parameter {
	if v == nil {
		return nil
	}
	if list, ok := v.([]Parameter); ok {
		return list
	}
	return nil
}

// Helper function to convert interface{} to []ElseIfClause
func toElseIfList(v interface{}) []ElseIfClause {
	if v == nil {
		return nil
	}
	if list, ok := v.([]ElseIfClause); ok {
		return list
	}
	// Handle []interface{} containing ElseIfClause elements
	if list, ok := v.([]interface{}); ok {
		var result []ElseIfClause
		for _, item := range list {
			if clause, ok := item.(ElseIfClause); ok {
				result = append(result, clause)
			}
		}
		return result
	}
	return nil
}

// Helper function to convert interface{} to []WhenClause
func toWhenList(v interface{}) []WhenClause {
	if v == nil {
		return nil
	}
	if list, ok := v.([]WhenClause); ok {
		return list
	}
	// Handle []interface{} containing WhenClause elements
	if list, ok := v.([]interface{}); ok {
		var result []WhenClause
		for _, item := range list {
			if clause, ok := item.(WhenClause); ok {
				result = append(result, clause)
			}
		}
		return result
	}
	return nil
}

var g = &grammar{
	rules: []*rule{
		{
			name: "Input",
			pos:  position{line: 109, col: 1, offset: 2581},
			expr: &actionExpr{
				pos: position{line: 109, col: 10, offset: 2590},
				run: (*parser).callonInput1,
				expr: &seqExpr{
					pos: position{line: 109, col: 10, offset: 2590},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 109, col: 10, offset: 2590},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 109, col: 12, offset: 2592},
							label: "stmt",
							expr: &ruleRefExpr{
								pos:  position{line: 109, col: 17, offset: 2597},
								name: "Statement",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 109, col: 27, offset: 2607},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "Statement",
			pos:  position{line: 114, col: 1, offset: 2714},
			expr: &actionExpr{
				pos: position{line: 114, col: 14, offset: 2727},
				run: (*parser).callonStatement1,
				expr: &seqExpr{
					pos: position{line: 114, col: 14, offset: 2727},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 114, col: 14, offset: 2727},
							label: "label",
							expr: &zeroOrOneExpr{
								pos: position{line: 114, col: 20, offset: 2733},
								expr: &ruleRefExpr{
									pos:  position{line: 114, col: 20, offset: 2733},
									name: "Label",
								},
							},
						},
						&notExpr{
							pos: position{line: 114, col: 27, offset: 2740},
							expr: &ruleRefExpr{
								pos:  position{line: 114, col: 28, offset: 2741},
								name: "ELSEIF",
							},
						},
						&notExpr{
							pos: position{line: 114, col: 35, offset: 2748},
							expr: &ruleRefExpr{
								pos:  position{line: 114, col: 36, offset: 2749},
								name: "ELSE",
							},
						},
						&notExpr{
							pos: position{line: 114, col: 41, offset: 2754},
							expr: &ruleRefExpr{
								pos:  position{line: 114, col: 42, offset: 2755},
								name: "END",
							},
						},
						&notExpr{
							pos: position{line: 114, col: 46, offset: 2759},
							expr: &ruleRefExpr{
								pos:  position{line: 114, col: 47, offset: 2760},
								name: "UNTIL",
							},
						},
						&notExpr{
							pos: position{line: 114, col: 53, offset: 2766},
							expr: &ruleRefExpr{
								pos:  position{line: 114, col: 54, offset: 2767},
								name: "WHEN",
							},
						},
						&labeledExpr{
							pos:   position{line: 114, col: 59, offset: 2772},
							label: "stmt",
							expr: &choiceExpr{
								pos: position{line: 114, col: 65, offset: 2778},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 114, col: 65, offset: 2778},
										name: "CreateProcedureStmt",
									},
									&ruleRefExpr{
										pos:  position{line: 114, col: 87, offset: 2800},
										name: "CreateFunctionStmt",
									},
									&ruleRefExpr{
										pos:  position{line: 114, col: 108, offset: 2821},
										name: "DeclareStmt",
									},
									&ruleRefExpr{
										pos:  position{line: 114, col: 122, offset: 2835},
										name: "IfStmt",
									},
									&ruleRefExpr{
										pos:  position{line: 114, col: 131, offset: 2844},
										name: "WhileStmt",
									},
									&ruleRefExpr{
										pos:  position{line: 114, col: 143, offset: 2856},
										name: "LoopStmt",
									},
									&ruleRefExpr{
										pos:  position{line: 114, col: 154, offset: 2867},
										name: "RepeatStmt",
									},
									&ruleRefExpr{
										pos:  position{line: 114, col: 167, offset: 2880},
										name: "CaseStmt",
									},
									&ruleRefExpr{
										pos:  position{line: 114, col: 178, offset: 2891},
										name: "BeginStmt",
									},
									&ruleRefExpr{
										pos:  position{line: 114, col: 190, offset: 2903},
										name: "LeaveStmt",
									},
									&ruleRefExpr{
										pos:  position{line: 114, col: 202, offset: 2915},
										name: "IterateStmt",
									},
									&ruleRefExpr{
										pos:  position{line: 114, col: 216, offset: 2929},
										name: "ReturnStmt",
									},
									&ruleRefExpr{
										pos:  position{line: 114, col: 229, offset: 2942},
										name: "SetVariableStmt",
									},
									&ruleRefExpr{
										pos:  position{line: 114, col: 247, offset: 2960},
										name: "GenericStmt",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 114, col: 260, offset: 2973},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "Label",
			pos:  position{line: 121, col: 1, offset: 3076},
			expr: &actionExpr{
				pos: position{line: 121, col: 10, offset: 3085},
				run: (*parser).callonLabel1,
				expr: &seqExpr{
					pos: position{line: 121, col: 10, offset: 3085},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 121, col: 10, offset: 3085},
							label: "label",
							expr: &ruleRefExpr{
								pos:  position{line: 121, col: 16, offset: 3091},
								name: "IdentifierName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 121, col: 31, offset: 3106},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 121, col: 33, offset: 3108},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&ruleRefExpr{
							pos:  position{line: 121, col: 37, offset: 3112},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "CREATE",
			pos:  position{line: 126, col: 1, offset: 3174},
			expr: &seqExpr{
				pos: position{line: 126, col: 11, offset: 3184},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 126, col: 11, offset: 3184},
						val:        "create",
						ignoreCase: true,
						want:       "\"CREATE\"i",
					},
					&notExpr{
						pos: position{line: 126, col: 21, offset: 3194},
						expr: &charClassMatcher{
							pos:        position{line: 126, col: 22, offset: 3195},
							val:        "[a-zA-Z0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "PROCEDURE",
			pos:  position{line: 127, col: 1, offset: 3208},
			expr: &seqExpr{
				pos: position{line: 127, col: 14, offset: 3221},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 127, col: 14, offset: 3221},
						val:        "procedure",
						ignoreCase: true,
						want:       "\"PROCEDURE\"i",
					},
					&notExpr{
						pos: position{line: 127, col: 27, offset: 3234},
						expr: &charClassMatcher{
							pos:        position{line: 127, col: 28, offset: 3235},
							val:        "[a-zA-Z0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "FUNCTION",
			pos:  position{line: 128, col: 1, offset: 3248},
			expr: &seqExpr{
				pos: position{line: 128, col: 13, offset: 3260},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 128, col: 13, offset: 3260},
						val:        "function",
						ignoreCase: true,
						want:       "\"FUNCTION\"i",
					},
					&notExpr{
						pos: position{line: 128, col: 25, offset: 3272},
						expr: &charClassMatcher{
							pos:        position{line: 128, col: 26, offset: 3273},
							val:        "[a-zA-Z0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "RETURNS",
			pos:  position{line: 129, col: 1, offset: 3286},
			expr: &seqExpr{
				pos: position{line: 129, col: 12, offset: 3297},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 129, col: 12, offset: 3297},
						val:        "returns",
						ignoreCase: true,
						want:       "\"RETURNS\"i",
					},
					&notExpr{
						pos: position{line: 129, col: 23, offset: 3308},
						expr: &charClassMatcher{
							pos:        position{line: 129, col: 24, offset: 3309},
							val:        "[a-zA-Z0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "DROP",
			pos:  position{line: 130, col: 1, offset: 3322},
			expr: &seqExpr{
				pos: position{line: 130, col: 9, offset: 3330},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 130, col: 9, offset: 3330},
						val:        "drop",
						ignoreCase: true,
						want:       "\"DROP\"i",
					},
					&notExpr{
						pos: position{line: 130, col: 17, offset: 3338},
						expr: &charClassMatcher{
							pos:        position{line: 130, col: 18, offset: 3339},
							val:        "[a-zA-Z0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "IF",
			pos:  position{line: 131, col: 1, offset: 3352},
			expr: &seqExpr{
				pos: position{line: 131, col: 7, offset: 3358},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 131, col: 7, offset: 3358},
						val:        "if",
						ignoreCase: true,
						want:       "\"IF\"i",
					},
					&notExpr{
						pos: position{line: 131, col: 13, offset: 3364},
						expr: &charClassMatcher{
							pos:        position{line: 131, col: 14, offset: 3365},
							val:        "[a-zA-Z0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "THEN",
			pos:  position{line: 132, col: 1, offset: 3378},
			expr: &seqExpr{
				pos: position{line: 132, col: 9, offset: 3386},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 132, col: 9, offset: 3386},
						val:        "then",
						ignoreCase: true,
						want:       "\"THEN\"i",
					},
					&notExpr{
						pos: position{line: 132, col: 17, offset: 3394},
						expr: &charClassMatcher{
							pos:        position{line: 132, col: 18, offset: 3395},
							val:        "[a-zA-Z0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "ELSEIF",
			pos:  position{line: 133, col: 1, offset: 3408},
			expr: &seqExpr{
				pos: position{line: 133, col: 11, offset: 3418},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 133, col: 11, offset: 3418},
						val:        "elseif",
						ignoreCase: true,
						want:       "\"ELSEIF\"i",
					},
					&notExpr{
						pos: position{line: 133, col: 21, offset: 3428},
						expr: &charClassMatcher{
							pos:        position{line: 133, col: 22, offset: 3429},
							val:        "[a-zA-Z0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "ELSE",
			pos:  position{line: 134, col: 1, offset: 3442},
			expr: &seqExpr{
				pos: position{line: 134, col: 9, offset: 3450},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 134, col: 9, offset: 3450},
						val:        "else",
						ignoreCase: true,
						want:       "\"ELSE\"i",
					},
					&notExpr{
						pos: position{line: 134, col: 17, offset: 3458},
						expr: &charClassMatcher{
							pos:        position{line: 134, col: 18, offset: 3459},
							val:        "[a-zA-Z0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "END",
			pos:  position{line: 135, col: 1, offset: 3472},
			expr: &seqExpr{
				pos: position{line: 135, col: 8, offset: 3479},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 135, col: 8, offset: 3479},
						val:        "end",
						ignoreCase: true,
						want:       "\"END\"i",
					},
					&notExpr{
						pos: position{line: 135, col: 15, offset: 3486},
						expr: &charClassMatcher{
							pos:        position{line: 135, col: 16, offset: 3487},
							val:        "[a-zA-Z0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "WHILE",
			pos:  position{line: 136, col: 1, offset: 3500},
			expr: &seqExpr{
				pos: position{line: 136, col: 10, offset: 3509},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 136, col: 10, offset: 3509},
						val:        "while",
						ignoreCase: true,
						want:       "\"WHILE\"i",
					},
					&notExpr{
						pos: position{line: 136, col: 19, offset: 3518},
						expr: &charClassMatcher{
							pos:        position{line: 136, col: 20, offset: 3519},
							val:        "[a-zA-Z0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "DO",
			pos:  position{line: 137, col: 1, offset: 3532},
			expr: &seqExpr{
				pos: position{line: 137, col: 7, offset: 3538},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 137, col: 7, offset: 3538},
						val:        "do",
						ignoreCase: true,
						want:       "\"DO\"i",
					},
					&notExpr{
						pos: position{line: 137, col: 13, offset: 3544},
						expr: &charClassMatcher{
							pos:        position{line: 137, col: 14, offset: 3545},
							val:        "[a-zA-Z0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "LOOP",
			pos:  position{line: 138, col: 1, offset: 3558},
			expr: &seqExpr{
				pos: position{line: 138, col: 9, offset: 3566},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 138, col: 9, offset: 3566},
						val:        "loop",
						ignoreCase: true,
						want:       "\"LOOP\"i",
					},
					&notExpr{
						pos: position{line: 138, col: 17, offset: 3574},
						expr: &charClassMatcher{
							pos:        position{line: 138, col: 18, offset: 3575},
							val:        "[a-zA-Z0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "REPEAT",
			pos:  position{line: 139, col: 1, offset: 3588},
			expr: &seqExpr{
				pos: position{line: 139, col: 11, offset: 3598},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 139, col: 11, offset: 3598},
						val:        "repeat",
						ignoreCase: true,
						want:       "\"REPEAT\"i",
					},
					&notExpr{
						pos: position{line: 139, col: 21, offset: 3608},
						expr: &charClassMatcher{
							pos:        position{line: 139, col: 22, offset: 3609},
							val:        "[a-zA-Z0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "UNTIL",
			pos:  position{line: 140, col: 1, offset: 3622},
			expr: &seqExpr{
				pos: position{line: 140, col: 10, offset: 3631},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 140, col: 10, offset: 3631},
						val:        "until",
						ignoreCase: true,
						want:       "\"UNTIL\"i",
					},
					&notExpr{
						pos: position{line: 140, col: 19, offset: 3640},
						expr: &charClassMatcher{
							pos:        position{line: 140, col: 20, offset: 3641},
							val:        "[a-zA-Z0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "CASE",
			pos:  position{line: 141, col: 1, offset: 3654},
			expr: &seqExpr{
				pos: position{line: 141, col: 9, offset: 3662},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 141, col: 9, offset: 3662},
						val:        "case",
						ignoreCase: true,
						want:       "\"CASE\"i",
					},
					&notExpr{
						pos: position{line: 141, col: 17, offset: 3670},
						expr: &charClassMatcher{
							pos:        position{line: 141, col: 18, offset: 3671},
							val:        "[a-zA-Z0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "WHEN",
			pos:  position{line: 142, col: 1, offset: 3684},
			expr: &seqExpr{
				pos: position{line: 142, col: 9, offset: 3692},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 142, col: 9, offset: 3692},
						val:        "when",
						ignoreCase: true,
						want:       "\"WHEN\"i",
					},
					&notExpr{
						pos: position{line: 142, col: 17, offset: 3700},
						expr: &charClassMatcher{
							pos:        position{line: 142, col: 18, offset: 3701},
							val:        "[a-zA-Z0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "BEGIN",
			pos:  position{line: 143, col: 1, offset: 3714},
			expr: &seqExpr{
				pos: position{line: 143, col: 10, offset: 3723},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 143, col: 10, offset: 3723},
						val:        "begin",
						ignoreCase: true,
						want:       "\"BEGIN\"i",
					},
					&notExpr{
						pos: position{line: 143, col: 19, offset: 3732},
						expr: &charClassMatcher{
							pos:        position{line: 143, col: 20, offset: 3733},
							val:        "[a-zA-Z0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "LEAVE",
			pos:  position{line: 144, col: 1, offset: 3746},
			expr: &seqExpr{
				pos: position{line: 144, col: 10, offset: 3755},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 144, col: 10, offset: 3755},
						val:        "leave",
						ignoreCase: true,
						want:       "\"LEAVE\"i",
					},
					&notExpr{
						pos: position{line: 144, col: 19, offset: 3764},
						expr: &charClassMatcher{
							pos:        position{line: 144, col: 20, offset: 3765},
							val:        "[a-zA-Z0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "ITERATE",
			pos:  position{line: 145, col: 1, offset: 3778},
			expr: &seqExpr{
				pos: position{line: 145, col: 12, offset: 3789},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 145, col: 12, offset: 3789},
						val:        "iterate",
						ignoreCase: true,
						want:       "\"ITERATE\"i",
					},
					&notExpr{
						pos: position{line: 145, col: 23, offset: 3800},
						expr: &charClassMatcher{
							pos:        position{line: 145, col: 24, offset: 3801},
							val:        "[a-zA-Z0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "RETURN",
			pos:  position{line: 146, col: 1, offset: 3814},
			expr: &seqExpr{
				pos: position{line: 146, col: 11, offset: 3824},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 146, col: 11, offset: 3824},
						val:        "return",
						ignoreCase: true,
						want:       "\"RETURN\"i",
					},
					&notExpr{
						pos: position{line: 146, col: 21, offset: 3834},
						expr: &charClassMatcher{
							pos:        position{line: 146, col: 22, offset: 3835},
							val:        "[a-zA-Z0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "DECLARE",
			pos:  position{line: 147, col: 1, offset: 3848},
			expr: &seqExpr{
				pos: position{line: 147, col: 12, offset: 3859},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 147, col: 12, offset: 3859},
						val:        "declare",
						ignoreCase: true,
						want:       "\"DECLARE\"i",
					},
					&notExpr{
						pos: position{line: 147, col: 23, offset: 3870},
						expr: &charClassMatcher{
							pos:        position{line: 147, col: 24, offset: 3871},
							val:        "[a-zA-Z0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "IN",
			pos:  position{line: 148, col: 1, offset: 3884},
			expr: &seqExpr{
				pos: position{line: 148, col: 7, offset: 3890},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 148, col: 7, offset: 3890},
						val:        "in",
						ignoreCase: true,
						want:       "\"IN\"i",
					},
					&notExpr{
						pos: position{line: 148, col: 13, offset: 3896},
						expr: &charClassMatcher{
							pos:        position{line: 148, col: 14, offset: 3897},
							val:        "[a-zA-Z0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "OUT",
			pos:  position{line: 149, col: 1, offset: 3910},
			expr: &seqExpr{
				pos: position{line: 149, col: 8, offset: 3917},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 149, col: 8, offset: 3917},
						val:        "out",
						ignoreCase: true,
						want:       "\"OUT\"i",
					},
					&notExpr{
						pos: position{line: 149, col: 15, offset: 3924},
						expr: &charClassMatcher{
							pos:        position{line: 149, col: 16, offset: 3925},
							val:        "[a-zA-Z0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "INOUT",
			pos:  position{line: 150, col: 1, offset: 3938},
			expr: &seqExpr{
				pos: position{line: 150, col: 10, offset: 3947},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 150, col: 10, offset: 3947},
						val:        "inout",
						ignoreCase: true,
						want:       "\"INOUT\"i",
					},
					&notExpr{
						pos: position{line: 150, col: 19, offset: 3956},
						expr: &charClassMatcher{
							pos:        position{line: 150, col: 20, offset: 3957},
							val:        "[a-zA-Z0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "UNSIGNED",
			pos:  position{line: 151, col: 1, offset: 3970},
			expr: &seqExpr{
				pos: position{line: 151, col: 13, offset: 3982},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 151, col: 13, offset: 3982},
						val:        "unsigned",
						ignoreCase: true,
						want:       "\"UNSIGNED\"i",
					},
					&notExpr{
						pos: position{line: 151, col: 25, offset: 3994},
						expr: &charClassMatcher{
							pos:        position{line: 151, col: 26, offset: 3995},
							val:        "[a-zA-Z0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "SIGNED",
			pos:  position{line: 152, col: 1, offset: 4008},
			expr: &seqExpr{
				pos: position{line: 152, col: 11, offset: 4018},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 152, col: 11, offset: 4018},
						val:        "signed",
						ignoreCase: true,
						want:       "\"SIGNED\"i",
					},
					&notExpr{
						pos: position{line: 152, col: 21, offset: 4028},
						expr: &charClassMatcher{
							pos:        position{line: 152, col: 22, offset: 4029},
							val:        "[a-zA-Z0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "ZEROFILL",
			pos:  position{line: 153, col: 1, offset: 4042},
			expr: &seqExpr{
				pos: position{line: 153, col: 13, offset: 4054},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 153, col: 13, offset: 4054},
						val:        "zerofill",
						ignoreCase: true,
						want:       "\"ZEROFILL\"i",
					},
					&notExpr{
						pos: position{line: 153, col: 25, offset: 4066},
						expr: &charClassMatcher{
							pos:        position{line: 153, col: 26, offset: 4067},
							val:        "[a-zA-Z0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "DETERMINISTIC",
			pos:  position{line: 154, col: 1, offset: 4080},
			expr: &seqExpr{
				pos: position{line: 154, col: 18, offset: 4097},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 154, col: 18, offset: 4097},
						val:        "deterministic",
						ignoreCase: true,
						want:       "\"DETERMINISTIC\"i",
					},
					&notExpr{
						pos: position{line: 154, col: 35, offset: 4114},
						expr: &charClassMatcher{
							pos:        position{line: 154, col: 36, offset: 4115},
							val:        "[a-zA-Z0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "NOT",
			pos:  position{line: 155, col: 1, offset: 4128},
			expr: &seqExpr{
				pos: position{line: 155, col: 8, offset: 4135},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 155, col: 8, offset: 4135},
						val:        "not",
						ignoreCase: true,
						want:       "\"NOT\"i",
					},
					&notExpr{
						pos: position{line: 155, col: 15, offset: 4142},
						expr: &charClassMatcher{
							pos:        position{line: 155, col: 16, offset: 4143},
							val:        "[a-zA-Z0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "READS",
			pos:  position{line: 156, col: 1, offset: 4156},
			expr: &seqExpr{
				pos: position{line: 156, col: 10, offset: 4165},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 156, col: 10, offset: 4165},
						val:        "reads",
						ignoreCase: true,
						want:       "\"READS\"i",
					},
					&notExpr{
						pos: position{line: 156, col: 19, offset: 4174},
						expr: &charClassMatcher{
							pos:        position{line: 156, col: 20, offset: 4175},
							val:        "[a-zA-Z0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "SQL",
			pos:  position{line: 157, col: 1, offset: 4188},
			expr: &seqExpr{
				pos: position{line: 157, col: 8, offset: 4195},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 157, col: 8, offset: 4195},
						val:        "sql",
						ignoreCase: true,
						want:       "\"SQL\"i",
					},
					&notExpr{
						pos: position{line: 157, col: 15, offset: 4202},
						expr: &charClassMatcher{
							pos:        position{line: 157, col: 16, offset: 4203},
							val:        "[a-zA-Z0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "DATA",
			pos:  position{line: 158, col: 1, offset: 4216},
			expr: &seqExpr{
				pos: position{line: 158, col: 9, offset: 4224},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 158, col: 9, offset: 4224},
						val:        "data",
						ignoreCase: true,
						want:       "\"DATA\"i",
					},
					&notExpr{
						pos: position{line: 158, col: 17, offset: 4232},
						expr: &charClassMatcher{
							pos:        position{line: 158, col: 18, offset: 4233},
							val:        "[a-zA-Z0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "MODIFIES",
			pos:  position{line: 159, col: 1, offset: 4246},
			expr: &seqExpr{
				pos: position{line: 159, col: 13, offset: 4258},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 159, col: 13, offset: 4258},
						val:        "modifies",
						ignoreCase: true,
						want:       "\"MODIFIES\"i",
					},
					&notExpr{
						pos: position{line: 159, col: 25, offset: 4270},
						expr: &charClassMatcher{
							pos:        position{line: 159, col: 26, offset: 4271},
							val:        "[a-zA-Z0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "NO",
			pos:  position{line: 160, col: 1, offset: 4284},
			expr: &seqExpr{
				pos: position{line: 160, col: 7, offset: 4290},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 160, col: 7, offset: 4290},
						val:        "no",
						ignoreCase: true,
						want:       "\"NO\"i",
					},
					&notExpr{
						pos: position{line: 160, col: 13, offset: 4296},
						expr: &charClassMatcher{
							pos:        position{line: 160, col: 14, offset: 4297},
							val:        "[a-zA-Z0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "CONTAINS",
			pos:  position{line: 161, col: 1, offset: 4310},
			expr: &seqExpr{
				pos: position{line: 161, col: 13, offset: 4322},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 161, col: 13, offset: 4322},
						val:        "contains",
						ignoreCase: true,
						want:       "\"CONTAINS\"i",
					},
					&notExpr{
						pos: position{line: 161, col: 25, offset: 4334},
						expr: &charClassMatcher{
							pos:        position{line: 161, col: 26, offset: 4335},
							val:        "[a-zA-Z0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "SECURITY",
			pos:  position{line: 162, col: 1, offset: 4348},
			expr: &seqExpr{
				pos: position{line: 162, col: 13, offset: 4360},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 162, col: 13, offset: 4360},
						val:        "security",
						ignoreCase: true,
						want:       "\"SECURITY\"i",
					},
					&notExpr{
						pos: position{line: 162, col: 25, offset: 4372},
						expr: &charClassMatcher{
							pos:        position{line: 162, col: 26, offset: 4373},
							val:        "[a-zA-Z0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "DEFINER",
			pos:  position{line: 163, col: 1, offset: 4386},
			expr: &seqExpr{
				pos: position{line: 163, col: 12, offset: 4397},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 163, col: 12, offset: 4397},
						val:        "definer",
						ignoreCase: true,
						want:       "\"DEFINER\"i",
					},
					&notExpr{
						pos: position{line: 163, col: 23, offset: 4408},
						expr: &charClassMatcher{
							pos:        position{line: 163, col: 24, offset: 4409},
							val:        "[a-zA-Z0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "INVOKER",
			pos:  position{line: 164, col: 1, offset: 4422},
			expr: &seqExpr{
				pos: position{line: 164, col: 12, offset: 4433},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 164, col: 12, offset: 4433},
						val:        "invoker",
						ignoreCase: true,
						want:       "\"INVOKER\"i",
					},
					&notExpr{
						pos: position{line: 164, col: 23, offset: 4444},
						expr: &charClassMatcher{
							pos:        position{line: 164, col: 24, offset: 4445},
							val:        "[a-zA-Z0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "GLOBAL",
			pos:  position{line: 165, col: 1, offset: 4458},
			expr: &seqExpr{
				pos: position{line: 165, col: 11, offset: 4468},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 165, col: 11, offset: 4468},
						val:        "global",
						ignoreCase: true,
						want:       "\"GLOBAL\"i",
					},
					&notExpr{
						pos: position{line: 165, col: 21, offset: 4478},
						expr: &charClassMatcher{
							pos:        position{line: 165, col: 22, offset: 4479},
							val:        "[a-zA-Z0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "SESSION",
			pos:  position{line: 166, col: 1, offset: 4492},
			expr: &seqExpr{
				pos: position{line: 166, col: 12, offset: 4503},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 166, col: 12, offset: 4503},
						val:        "session",
						ignoreCase: true,
						want:       "\"SESSION\"i",
					},
					&notExpr{
						pos: position{line: 166, col: 23, offset: 4514},
						expr: &charClassMatcher{
							pos:        position{line: 166, col: 24, offset: 4515},
							val:        "[a-zA-Z0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "PERSIST",
			pos:  position{line: 167, col: 1, offset: 4528},
			expr: &seqExpr{
				pos: position{line: 167, col: 12, offset: 4539},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 167, col: 12, offset: 4539},
						val:        "persist",
						ignoreCase: true,
						want:       "\"PERSIST\"i",
					},
					&notExpr{
						pos: position{line: 167, col: 23, offset: 4550},
						expr: &charClassMatcher{
							pos:        position{line: 167, col: 24, offset: 4551},
							val:        "[a-zA-Z0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "PERSIST_ONLY",
			pos:  position{line: 168, col: 1, offset: 4564},
			expr: &seqExpr{
				pos: position{line: 168, col: 17, offset: 4580},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 168, col: 17, offset: 4580},
						val:        "persist_only",
						ignoreCase: true,
						want:       "\"PERSIST_ONLY\"i",
					},
					&notExpr{
						pos: position{line: 168, col: 33, offset: 4596},
						expr: &charClassMatcher{
							pos:        position{line: 168, col: 34, offset: 4597},
							val:        "[a-zA-Z0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "SET",
			pos:  position{line: 169, col: 1, offset: 4610},
			expr: &seqExpr{
				pos: position{line: 169, col: 8, offset: 4617},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 169, col: 8, offset: 4617},
						val:        "set",
						ignoreCase: true,
						want:       "\"SET\"i",
					},
					&notExpr{
						pos: position{line: 169, col: 15, offset: 4624},
						expr: &charClassMatcher{
							pos:        position{line: 169, col: 16, offset: 4625},
							val:        "[a-zA-Z0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "CreateProcedureStmt",
			pos:  position{line: 172, col: 1, offset: 4659},
			expr: &actionExpr{
				pos: position{line: 172, col: 24, offset: 4682},
				run: (*parser).callonCreateProcedureStmt1,
				expr: &seqExpr{
					pos: position{line: 172, col: 24, offset: 4682},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 172, col: 24, offset: 4682},
							name: "CREATE",
						},
						&ruleRefExpr{
							pos:  position{line: 172, col: 31, offset: 4689},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 172, col: 33, offset: 4691},
							name: "PROCEDURE",
						},
						&ruleRefExpr{
							pos:  position{line: 172, col: 43, offset: 4701},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 172, col: 45, offset: 4703},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 172, col: 50, offset: 4708},
								name: "IdentifierName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 172, col: 65, offset: 4723},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 172, col: 67, offset: 4725},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 172, col: 71, offset: 4729},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 172, col: 73, offset: 4731},
							label: "params",
							expr: &zeroOrOneExpr{
								pos: position{line: 172, col: 80, offset: 4738},
								expr: &ruleRefExpr{
									pos:  position{line: 172, col: 80, offset: 4738},
									name: "ParameterList",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 172, col: 95, offset: 4753},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 172, col: 97, offset: 4755},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
						&ruleRefExpr{
							pos:  position{line: 172, col: 101, offset: 4759},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 172, col: 103, offset: 4761},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 172, col: 108, offset: 4766},
								name: "Statement",
							},
						},
					},
				},
			},
		},
		{
			name: "CreateFunctionStmt",
			pos:  position{line: 182, col: 1, offset: 5019},
			expr: &actionExpr{
				pos: position{line: 182, col: 23, offset: 5041},
				run: (*parser).callonCreateFunctionStmt1,
				expr: &seqExpr{
					pos: position{line: 182, col: 23, offset: 5041},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 182, col: 23, offset: 5041},
							name: "CREATE",
						},
						&ruleRefExpr{
							pos:  position{line: 182, col: 30, offset: 5048},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 182, col: 32, offset: 5050},
							name: "FUNCTION",
						},
						&ruleRefExpr{
							pos:  position{line: 182, col: 41, offset: 5059},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 182, col: 43, offset: 5061},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 182, col: 48, offset: 5066},
								name: "IdentifierName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 182, col: 63, offset: 5081},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 182, col: 65, offset: 5083},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 182, col: 69, offset: 5087},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 182, col: 71, offset: 5089},
							label: "params",
							expr: &zeroOrOneExpr{
								pos: position{line: 182, col: 78, offset: 5096},
								expr: &ruleRefExpr{
									pos:  position{line: 182, col: 78, offset: 5096},
									name: "ParameterList",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 182, col: 93, offset: 5111},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 182, col: 95, offset: 5113},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
						&ruleRefExpr{
							pos:  position{line: 182, col: 99, offset: 5117},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 182, col: 101, offset: 5119},
							name: "RETURNS",
						},
						&ruleRefExpr{
							pos:  position{line: 182, col: 109, offset: 5127},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 182, col: 111, offset: 5129},
							label: "returnType",
							expr: &ruleRefExpr{
								pos:  position{line: 182, col: 122, offset: 5140},
								name: "TypeName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 182, col: 131, offset: 5149},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 182, col: 133, offset: 5151},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 182, col: 144, offset: 5162},
								expr: &ruleRefExpr{
									pos:  position{line: 182, col: 144, offset: 5162},
									name: "FunctionAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 182, col: 164, offset: 5182},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 182, col: 166, offset: 5184},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 182, col: 171, offset: 5189},
								name: "Statement",
							},
						},
					},
				},
			},
		},
		{
			name: "IfStmt",
			pos:  position{line: 193, col: 1, offset: 5482},
			expr: &actionExpr{
				pos: position{line: 193, col: 11, offset: 5492},
				run: (*parser).callonIfStmt1,
				expr: &seqExpr{
					pos: position{line: 193, col: 11, offset: 5492},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 193, col: 11, offset: 5492},
							name: "IF",
						},
						&ruleRefExpr{
							pos:  position{line: 193, col: 14, offset: 5495},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 193, col: 16, offset: 5497},
							label: "condition",
							expr: &ruleRefExpr{
								pos:  position{line: 193, col: 26, offset: 5507},
								name: "ConsumeUntilTHEN",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 193, col: 43, offset: 5524},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 193, col: 45, offset: 5526},
							name: "THEN",
						},
						&ruleRefExpr{
							pos:  position{line: 193, col: 50, offset: 5531},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 193, col: 52, offset: 5533},
							label: "thenStmts",
							expr: &ruleRefExpr{
								pos:  position{line: 193, col: 62, offset: 5543},
								name: "StatementList",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 193, col: 76, offset: 5557},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 193, col: 78, offset: 5559},
							label: "elseifs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 193, col: 86, offset: 5567},
								expr: &ruleRefExpr{
									pos:  position{line: 193, col: 86, offset: 5567},
									name: "ElseIfClause",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 193, col: 100, offset: 5581},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 193, col: 102, offset: 5583},
							label: "elseClause",
							expr: &zeroOrOneExpr{
								pos: position{line: 193, col: 113, offset: 5594},
								expr: &ruleRefExpr{
									pos:  position{line: 193, col: 113, offset: 5594},
									name: "ElseClause",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 193, col: 125, offset: 5606},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 193, col: 127, offset: 5608},
							name: "END",
						},
						&ruleRefExpr{
							pos:  position{line: 193, col: 131, offset: 5612},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 193, col: 133, offset: 5614},
							name: "IF",
						},
					},
				},
			},
		},
		{
			name: "ElseIfClause",
			pos:  position{line: 204, col: 1, offset: 5907},
			expr: &actionExpr{
				pos: position{line: 204, col: 17, offset: 5923},
				run: (*parser).callonElseIfClause1,
				expr: &seqExpr{
					pos: position{line: 204, col: 17, offset: 5923},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 204, col: 17, offset: 5923},
							name: "ELSEIF",
						},
						&ruleRefExpr{
							pos:  position{line: 204, col: 24, offset: 5930},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 204, col: 26, offset: 5932},
							label: "condition",
							expr: &ruleRefExpr{
								pos:  position{line: 204, col: 36, offset: 5942},
								name: "ConsumeUntilTHEN",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 204, col: 53, offset: 5959},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 204, col: 55, offset: 5961},
							name: "THEN",
						},
						&ruleRefExpr{
							pos:  position{line: 204, col: 60, offset: 5966},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 204, col: 62, offset: 5968},
							label: "stmts",
							expr: &ruleRefExpr{
								pos:  position{line: 204, col: 68, offset: 5974},
								name: "StatementList",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 204, col: 82, offset: 5988},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "ElseClause",
			pos:  position{line: 213, col: 1, offset: 6181},
			expr: &actionExpr{
				pos: position{line: 213, col: 15, offset: 6195},
				run: (*parser).callonElseClause1,
				expr: &seqExpr{
					pos: position{line: 213, col: 15, offset: 6195},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 213, col: 15, offset: 6195},
							name: "ELSE",
						},
						&ruleRefExpr{
							pos:  position{line: 213, col: 20, offset: 6200},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 213, col: 22, offset: 6202},
							label: "stmts",
							expr: &ruleRefExpr{
								pos:  position{line: 213, col: 28, offset: 6208},
								name: "StatementList",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 213, col: 42, offset: 6222},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "WhileStmt",
			pos:  position{line: 218, col: 1, offset: 6287},
			expr: &actionExpr{
				pos: position{line: 218, col: 14, offset: 6300},
				run: (*parser).callonWhileStmt1,
				expr: &seqExpr{
					pos: position{line: 218, col: 14, offset: 6300},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 218, col: 14, offset: 6300},
							name: "WHILE",
						},
						&ruleRefExpr{
							pos:  position{line: 218, col: 20, offset: 6306},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 218, col: 22, offset: 6308},
							label: "condition",
							expr: &ruleRefExpr{
								pos:  position{line: 218, col: 32, offset: 6318},
								name: "ConsumeUntilDO",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 218, col: 47, offset: 6333},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 218, col: 49, offset: 6335},
							name: "DO",
						},
						&ruleRefExpr{
							pos:  position{line: 218, col: 52, offset: 6338},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 218, col: 54, offset: 6340},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 218, col: 59, offset: 6345},
								name: "StatementList",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 218, col: 73, offset: 6359},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 218, col: 75, offset: 6361},
							name: "END",
						},
						&ruleRefExpr{
							pos:  position{line: 218, col: 79, offset: 6365},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 218, col: 81, offset: 6367},
							name: "WHILE",
						},
						&ruleRefExpr{
							pos:  position{line: 218, col: 87, offset: 6373},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 218, col: 89, offset: 6375},
							label: "endLabel",
							expr: &zeroOrOneExpr{
								pos: position{line: 218, col: 98, offset: 6384},
								expr: &ruleRefExpr{
									pos:  position{line: 218, col: 98, offset: 6384},
									name: "IdentifierName",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LoopStmt",
			pos:  position{line: 227, col: 1, offset: 6591},
			expr: &actionExpr{
				pos: position{line: 227, col: 13, offset: 6603},
				run: (*parser).callonLoopStmt1,
				expr: &seqExpr{
					pos: position{line: 227, col: 13, offset: 6603},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 227, col: 13, offset: 6603},
							name: "LOOP",
						},
						&ruleRefExpr{
							pos:  position{line: 227, col: 18, offset: 6608},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 227, col: 20, offset: 6610},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 227, col: 25, offset: 6615},
								name: "StatementList",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 227, col: 39, offset: 6629},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 227, col: 41, offset: 6631},
							name: "END",
						},
						&ruleRefExpr{
							pos:  position{line: 227, col: 45, offset: 6635},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 227, col: 47, offset: 6637},
							name: "LOOP",
						},
						&ruleRefExpr{
							pos:  position{line: 227, col: 52, offset: 6642},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 227, col: 54, offset: 6644},
							label: "endLabel",
							expr: &zeroOrOneExpr{
								pos: position{line: 227, col: 63, offset: 6653},
								expr: &ruleRefExpr{
									pos:  position{line: 227, col: 63, offset: 6653},
									name: "IdentifierName",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RepeatStmt",
			pos:  position{line: 235, col: 1, offset: 6818},
			expr: &actionExpr{
				pos: position{line: 235, col: 15, offset: 6832},
				run: (*parser).callonRepeatStmt1,
				expr: &seqExpr{
					pos: position{line: 235, col: 15, offset: 6832},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 235, col: 15, offset: 6832},
							name: "REPEAT",
						},
						&ruleRefExpr{
							pos:  position{line: 235, col: 22, offset: 6839},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 235, col: 24, offset: 6841},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 235, col: 29, offset: 6846},
								name: "StatementList",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 235, col: 43, offset: 6860},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 235, col: 45, offset: 6862},
							name: "UNTIL",
						},
						&ruleRefExpr{
							pos:  position{line: 235, col: 51, offset: 6868},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 235, col: 53, offset: 6870},
							label: "condition",
							expr: &ruleRefExpr{
								pos:  position{line: 235, col: 63, offset: 6880},
								name: "ConsumeUntilEND",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 235, col: 79, offset: 6896},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 235, col: 81, offset: 6898},
							name: "END",
						},
						&ruleRefExpr{
							pos:  position{line: 235, col: 85, offset: 6902},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 235, col: 87, offset: 6904},
							name: "REPEAT",
						},
						&ruleRefExpr{
							pos:  position{line: 235, col: 94, offset: 6911},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 235, col: 96, offset: 6913},
							label: "endLabel",
							expr: &zeroOrOneExpr{
								pos: position{line: 235, col: 105, offset: 6922},
								expr: &ruleRefExpr{
									pos:  position{line: 235, col: 105, offset: 6922},
									name: "IdentifierName",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CaseStmt",
			pos:  position{line: 244, col: 1, offset: 7130},
			expr: &actionExpr{
				pos: position{line: 244, col: 13, offset: 7142},
				run: (*parser).callonCaseStmt1,
				expr: &seqExpr{
					pos: position{line: 244, col: 13, offset: 7142},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 244, col: 13, offset: 7142},
							name: "CASE",
						},
						&ruleRefExpr{
							pos:  position{line: 244, col: 18, offset: 7147},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 244, col: 20, offset: 7149},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 244, col: 25, offset: 7154},
								name: "ConsumeUntilWHEN",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 244, col: 42, offset: 7171},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 244, col: 44, offset: 7173},
							label: "whens",
							expr: &oneOrMoreExpr{
								pos: position{line: 244, col: 50, offset: 7179},
								expr: &ruleRefExpr{
									pos:  position{line: 244, col: 50, offset: 7179},
									name: "WhenClause",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 244, col: 62, offset: 7191},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 244, col: 64, offset: 7193},
							label: "elseClause",
							expr: &zeroOrOneExpr{
								pos: position{line: 244, col: 75, offset: 7204},
								expr: &ruleRefExpr{
									pos:  position{line: 244, col: 75, offset: 7204},
									name: "ElseClause",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 244, col: 87, offset: 7216},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 244, col: 89, offset: 7218},
							name: "END",
						},
						&ruleRefExpr{
							pos:  position{line: 244, col: 93, offset: 7222},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 244, col: 95, offset: 7224},
							name: "CASE",
						},
					},
				},
			},
		},
		{
			name: "WhenClause",
			pos:  position{line: 254, col: 1, offset: 7459},
			expr: &actionExpr{
				pos: position{line: 254, col: 15, offset: 7473},
				run: (*parser).callonWhenClause1,
				expr: &seqExpr{
					pos: position{line: 254, col: 15, offset: 7473},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 254, col: 15, offset: 7473},
							name: "WHEN",
						},
						&ruleRefExpr{
							pos:  position{line: 254, col: 20, offset: 7478},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 254, col: 22, offset: 7480},
							label: "condition",
							expr: &ruleRefExpr{
								pos:  position{line: 254, col: 32, offset: 7490},
								name: "ConsumeUntilTHEN",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 254, col: 49, offset: 7507},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 254, col: 51, offset: 7509},
							name: "THEN",
						},
						&ruleRefExpr{
							pos:  position{line: 254, col: 56, offset: 7514},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 254, col: 58, offset: 7516},
							label: "stmts",
							expr: &ruleRefExpr{
								pos:  position{line: 254, col: 64, offset: 7522},
								name: "StatementList",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 254, col: 78, offset: 7536},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "BeginStmt",
			pos:  position{line: 263, col: 1, offset: 7733},
			expr: &actionExpr{
				pos: position{line: 263, col: 14, offset: 7746},
				run: (*parser).callonBeginStmt1,
				expr: &seqExpr{
					pos: position{line: 263, col: 14, offset: 7746},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 263, col: 14, offset: 7746},
							name: "BEGIN",
						},
						&ruleRefExpr{
							pos:  position{line: 263, col: 20, offset: 7752},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 263, col: 22, offset: 7754},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 263, col: 27, offset: 7759},
								name: "StatementList",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 263, col: 41, offset: 7773},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 263, col: 43, offset: 7775},
							name: "END",
						},
					},
				},
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 271, col: 1, offset: 7927},
			expr: &choiceExpr{
				pos: position{line: 271, col: 17, offset: 7943},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 271, col: 17, offset: 7943},
						name: "SingleQuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 271, col: 38, offset: 7964},
						name: "DoubleQuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 271, col: 59, offset: 7985},
						name: "BacktickString",
					},
				},
			},
		},
		{
			name: "SingleQuotedString",
			pos:  position{line: 274, col: 1, offset: 8046},
			expr: &actionExpr{
				pos: position{line: 274, col: 23, offset: 8068},
				run: (*parser).callonSingleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 274, col: 23, offset: 8068},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 274, col: 23, offset: 8068},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&labeledExpr{
							pos:   position{line: 274, col: 27, offset: 8072},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 274, col: 35, offset: 8080},
								expr: &ruleRefExpr{
									pos:  position{line: 274, col: 35, offset: 8080},
									name: "SingleQuoteContent",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 274, col: 55, offset: 8100},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteContent",
			pos:  position{line: 284, col: 1, offset: 8329},
			expr: &choiceExpr{
				pos: position{line: 284, col: 23, offset: 8351},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 284, col: 23, offset: 8351},
						run: (*parser).callonSingleQuoteContent2,
						expr: &litMatcher{
							pos:        position{line: 284, col: 23, offset: 8351},
							val:        "''",
							ignoreCase: false,
							want:       "\"''\"",
						},
					},
					&actionExpr{
						pos: position{line: 285, col: 22, offset: 8409},
						run: (*parser).callonSingleQuoteContent4,
						expr: &litMatcher{
							pos:        position{line: 285, col: 22, offset: 8409},
							val:        "\\0",
							ignoreCase: false,
							want:       "\"\\\\0\"",
						},
					},
					&actionExpr{
						pos: position{line: 286, col: 22, offset: 8468},
						run: (*parser).callonSingleQuoteContent6,
						expr: &litMatcher{
							pos:        position{line: 286, col: 22, offset: 8468},
							val:        "\\'",
							ignoreCase: false,
							want:       "\"\\\\'\"",
						},
					},
					&actionExpr{
						pos: position{line: 287, col: 22, offset: 8528},
						run: (*parser).callonSingleQuoteContent8,
						expr: &litMatcher{
							pos:        position{line: 287, col: 22, offset: 8528},
							val:        "\\\"",
							ignoreCase: false,
							want:       "\"\\\\\\\"\"",
						},
					},
					&actionExpr{
						pos: position{line: 288, col: 22, offset: 8589},
						run: (*parser).callonSingleQuoteContent10,
						expr: &litMatcher{
							pos:        position{line: 288, col: 22, offset: 8589},
							val:        "\\b",
							ignoreCase: false,
							want:       "\"\\\\b\"",
						},
					},
					&actionExpr{
						pos: position{line: 289, col: 22, offset: 8648},
						run: (*parser).callonSingleQuoteContent12,
						expr: &litMatcher{
							pos:        position{line: 289, col: 22, offset: 8648},
							val:        "\\n",
							ignoreCase: false,
							want:       "\"\\\\n\"",
						},
					},
					&actionExpr{
						pos: position{line: 290, col: 22, offset: 8707},
						run: (*parser).callonSingleQuoteContent14,
						expr: &litMatcher{
							pos:        position{line: 290, col: 22, offset: 8707},
							val:        "\\r",
							ignoreCase: false,
							want:       "\"\\\\r\"",
						},
					},
					&actionExpr{
						pos: position{line: 291, col: 22, offset: 8766},
						run: (*parser).callonSingleQuoteContent16,
						expr: &litMatcher{
							pos:        position{line: 291, col: 22, offset: 8766},
							val:        "\\t",
							ignoreCase: false,
							want:       "\"\\\\t\"",
						},
					},
					&actionExpr{
						pos: position{line: 292, col: 22, offset: 8825},
						run: (*parser).callonSingleQuoteContent18,
						expr: &litMatcher{
							pos:        position{line: 292, col: 22, offset: 8825},
							val:        "\\Z",
							ignoreCase: false,
							want:       "\"\\\\Z\"",
						},
					},
					&actionExpr{
						pos: position{line: 293, col: 22, offset: 8884},
						run: (*parser).callonSingleQuoteContent20,
						expr: &litMatcher{
							pos:        position{line: 293, col: 22, offset: 8884},
							val:        "\\\\",
							ignoreCase: false,
							want:       "\"\\\\\\\\\"",
						},
					},
					&actionExpr{
						pos: position{line: 294, col: 22, offset: 8945},
						run: (*parser).callonSingleQuoteContent22,
						expr: &litMatcher{
							pos:        position{line: 294, col: 22, offset: 8945},
							val:        "\\%",
							ignoreCase: false,
							want:       "\"\\\\%\"",
						},
					},
					&actionExpr{
						pos: position{line: 295, col: 22, offset: 9004},
						run: (*parser).callonSingleQuoteContent24,
						expr: &litMatcher{
							pos:        position{line: 295, col: 22, offset: 9004},
							val:        "\\_",
							ignoreCase: false,
							want:       "\"\\\\_\"",
						},
					},
					&actionExpr{
						pos: position{line: 296, col: 22, offset: 9063},
						run: (*parser).callonSingleQuoteContent26,
						expr: &seqExpr{
							pos: position{line: 296, col: 22, offset: 9063},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 296, col: 22, offset: 9063},
									val:        "\\",
									ignoreCase: false,
									want:       "\"\\\\\"",
								},
								&anyMatcher{
									line: 296, col: 27, offset: 9068,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 297, col: 22, offset: 9127},
						run: (*parser).callonSingleQuoteContent30,
						expr: &charClassMatcher{
							pos:        position{line: 297, col: 22, offset: 9127},
							val:        "[^'\\\\]",
							chars:      []rune{'\'', '\\'},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedString",
			pos:  position{line: 300, col: 1, offset: 9203},
			expr: &actionExpr{
				pos: position{line: 300, col: 23, offset: 9225},
				run: (*parser).callonDoubleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 300, col: 23, offset: 9225},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 300, col: 23, offset: 9225},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 300, col: 27, offset: 9229},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 300, col: 35, offset: 9237},
								expr: &ruleRefExpr{
									pos:  position{line: 300, col: 35, offset: 9237},
									name: "DoubleQuoteContent",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 300, col: 55, offset: 9257},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteContent",
			pos:  position{line: 310, col: 1, offset: 9484},
			expr: &choiceExpr{
				pos: position{line: 310, col: 23, offset: 9506},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 310, col: 23, offset: 9506},
						run: (*parser).callonDoubleQuoteContent2,
						expr: &litMatcher{
							pos:        position{line: 310, col: 23, offset: 9506},
							val:        "\"\"",
							ignoreCase: false,
							want:       "\"\\\"\\\"\"",
						},
					},
					&actionExpr{
						pos: position{line: 311, col: 22, offset: 9568},
						run: (*parser).callonDoubleQuoteContent4,
						expr: &litMatcher{
							pos:        position{line: 311, col: 22, offset: 9568},
							val:        "\\0",
							ignoreCase: false,
							want:       "\"\\\\0\"",
						},
					},
					&actionExpr{
						pos: position{line: 312, col: 22, offset: 9627},
						run: (*parser).callonDoubleQuoteContent6,
						expr: &litMatcher{
							pos:        position{line: 312, col: 22, offset: 9627},
							val:        "\\'",
							ignoreCase: false,
							want:       "\"\\\\'\"",
						},
					},
					&actionExpr{
						pos: position{line: 313, col: 22, offset: 9687},
						run: (*parser).callonDoubleQuoteContent8,
						expr: &litMatcher{
							pos:        position{line: 313, col: 22, offset: 9687},
							val:        "\\\"",
							ignoreCase: false,
							want:       "\"\\\\\\\"\"",
						},
					},
					&actionExpr{
						pos: position{line: 314, col: 22, offset: 9749},
						run: (*parser).callonDoubleQuoteContent10,
						expr: &litMatcher{
							pos:        position{line: 314, col: 22, offset: 9749},
							val:        "\\b",
							ignoreCase: false,
							want:       "\"\\\\b\"",
						},
					},
					&actionExpr{
						pos: position{line: 315, col: 22, offset: 9808},
						run: (*parser).callonDoubleQuoteContent12,
						expr: &litMatcher{
							pos:        position{line: 315, col: 22, offset: 9808},
							val:        "\\n",
							ignoreCase: false,
							want:       "\"\\\\n\"",
						},
					},
					&actionExpr{
						pos: position{line: 316, col: 22, offset: 9867},
						run: (*parser).callonDoubleQuoteContent14,
						expr: &litMatcher{
							pos:        position{line: 316, col: 22, offset: 9867},
							val:        "\\r",
							ignoreCase: false,
							want:       "\"\\\\r\"",
						},
					},
					&actionExpr{
						pos: position{line: 317, col: 22, offset: 9926},
						run: (*parser).callonDoubleQuoteContent16,
						expr: &litMatcher{
							pos:        position{line: 317, col: 22, offset: 9926},
							val:        "\\t",
							ignoreCase: false,
							want:       "\"\\\\t\"",
						},
					},
					&actionExpr{
						pos: position{line: 318, col: 22, offset: 9985},
						run: (*parser).callonDoubleQuoteContent18,
						expr: &litMatcher{
							pos:        position{line: 318, col: 22, offset: 9985},
							val:        "\\Z",
							ignoreCase: false,
							want:       "\"\\\\Z\"",
						},
					},
					&actionExpr{
						pos: position{line: 319, col: 22, offset: 10044},
						run: (*parser).callonDoubleQuoteContent20,
						expr: &litMatcher{
							pos:        position{line: 319, col: 22, offset: 10044},
							val:        "\\\\",
							ignoreCase: false,
							want:       "\"\\\\\\\\\"",
						},
					},
					&actionExpr{
						pos: position{line: 320, col: 22, offset: 10105},
						run: (*parser).callonDoubleQuoteContent22,
						expr: &litMatcher{
							pos:        position{line: 320, col: 22, offset: 10105},
							val:        "\\%",
							ignoreCase: false,
							want:       "\"\\\\%\"",
						},
					},
					&actionExpr{
						pos: position{line: 321, col: 22, offset: 10164},
						run: (*parser).callonDoubleQuoteContent24,
						expr: &litMatcher{
							pos:        position{line: 321, col: 22, offset: 10164},
							val:        "\\_",
							ignoreCase: false,
							want:       "\"\\\\_\"",
						},
					},
					&actionExpr{
						pos: position{line: 322, col: 22, offset: 10223},
						run: (*parser).callonDoubleQuoteContent26,
						expr: &seqExpr{
							pos: position{line: 322, col: 22, offset: 10223},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 322, col: 22, offset: 10223},
									val:        "\\",
									ignoreCase: false,
									want:       "\"\\\\\"",
								},
								&anyMatcher{
									line: 322, col: 27, offset: 10228,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 323, col: 22, offset: 10287},
						run: (*parser).callonDoubleQuoteContent30,
						expr: &charClassMatcher{
							pos:        position{line: 323, col: 22, offset: 10287},
							val:        "[^\"\\\\]",
							chars:      []rune{'"', '\\'},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
		},
		{
			name: "BacktickString",
			pos:  position{line: 325, col: 1, offset: 10318},
			expr: &actionExpr{
				pos: position{line: 325, col: 19, offset: 10336},
				run: (*parser).callonBacktickString1,
				expr: &seqExpr{
					pos: position{line: 325, col: 19, offset: 10336},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 325, col: 19, offset: 10336},
							val:        "`",
							ignoreCase: false,
							want:       "\"`\"",
						},
						&labeledExpr{
							pos:   position{line: 325, col: 23, offset: 10340},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 325, col: 31, offset: 10348},
								expr: &ruleRefExpr{
									pos:  position{line: 325, col: 31, offset: 10348},
									name: "BacktickContent",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 325, col: 48, offset: 10365},
							val:        "`",
							ignoreCase: false,
							want:       "\"`\"",
						},
					},
				},
			},
		},
		{
			name: "BacktickContent",
			pos:  position{line: 335, col: 1, offset: 10592},
			expr: &choiceExpr{
				pos: position{line: 335, col: 20, offset: 10611},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 335, col: 20, offset: 10611},
						run: (*parser).callonBacktickContent2,
						expr: &litMatcher{
							pos:        position{line: 335, col: 20, offset: 10611},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
					},
					&actionExpr{
						pos: position{line: 335, col: 56, offset: 10647},
						run: (*parser).callonBacktickContent4,
						expr: &charClassMatcher{
							pos:        position{line: 335, col: 56, offset: 10647},
							val:        "[^`]",
							chars:      []rune{'`'},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
		},
		{
			name: "Comment",
			pos:  position{line: 338, col: 1, offset: 10688},
			expr: &choiceExpr{
				pos: position{line: 338, col: 12, offset: 10699},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 338, col: 12, offset: 10699},
						name: "LineComment",
					},
					&ruleRefExpr{
						pos:  position{line: 338, col: 26, offset: 10713},
						name: "BlockComment",
					},
				},
			},
		},
		{
			name: "LineComment",
			pos:  position{line: 340, col: 1, offset: 10727},
			expr: &actionExpr{
				pos: position{line: 340, col: 16, offset: 10742},
				run: (*parser).callonLineComment1,
				expr: &seqExpr{
					pos: position{line: 340, col: 16, offset: 10742},
					exprs: []any{
						&choiceExpr{
							pos: position{line: 340, col: 18, offset: 10744},
							alternatives: []any{
								&seqExpr{
									pos: position{line: 340, col: 18, offset: 10744},
									exprs: []any{
										&litMatcher{
											pos:        position{line: 340, col: 18, offset: 10744},
											val:        "--",
											ignoreCase: false,
											want:       "\"--\"",
										},
										&zeroOrOneExpr{
											pos: position{line: 340, col: 23, offset: 10749},
											expr: &seqExpr{
												pos: position{line: 340, col: 24, offset: 10750},
												exprs: []any{
													&charClassMatcher{
														pos:        position{line: 340, col: 24, offset: 10750},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
													&zeroOrMoreExpr{
														pos: position{line: 340, col: 30, offset: 10756},
														expr: &charClassMatcher{
															pos:        position{line: 340, col: 30, offset: 10756},
															val:        "[^\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
											},
										},
									},
								},
								&seqExpr{
									pos: position{line: 340, col: 43, offset: 10769},
									exprs: []any{
										&litMatcher{
											pos:        position{line: 340, col: 43, offset: 10769},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 340, col: 47, offset: 10773},
											expr: &charClassMatcher{
												pos:        position{line: 340, col: 47, offset: 10773},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 340, col: 59, offset: 10785},
							alternatives: []any{
								&litMatcher{
									pos:        position{line: 340, col: 59, offset: 10785},
									val:        "\r\n",
									ignoreCase: false,
									want:       "\"\\r\\n\"",
								},
								&litMatcher{
									pos:        position{line: 340, col: 68, offset: 10794},
									val:        "\n",
									ignoreCase: false,
									want:       "\"\\n\"",
								},
								&litMatcher{
									pos:        position{line: 340, col: 75, offset: 10801},
									val:        "\r",
									ignoreCase: false,
									want:       "\"\\r\"",
								},
								&ruleRefExpr{
									pos:  position{line: 340, col: 82, offset: 10808},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockComment",
			pos:  position{line: 344, col: 1, offset: 10841},
			expr: &actionExpr{
				pos: position{line: 344, col: 17, offset: 10857},
				run: (*parser).callonBlockComment1,
				expr: &seqExpr{
					pos: position{line: 344, col: 17, offset: 10857},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 344, col: 17, offset: 10857},
							val:        "/*",
							ignoreCase: false,
							want:       "\"/*\"",
						},
						&labeledExpr{
							pos:   position{line: 344, col: 22, offset: 10862},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 344, col: 30, offset: 10870},
								expr: &seqExpr{
									pos: position{line: 344, col: 32, offset: 10872},
									exprs: []any{
										&notExpr{
											pos: position{line: 344, col: 32, offset: 10872},
											expr: &litMatcher{
												pos:        position{line: 344, col: 33, offset: 10873},
												val:        "*/",
												ignoreCase: false,
												want:       "\"*/\"",
											},
										},
										&anyMatcher{
											line: 344, col: 38, offset: 10878,
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 344, col: 43, offset: 10883},
							val:        "*/",
							ignoreCase: false,
							want:       "\"*/\"",
						},
					},
				},
			},
		},
		{
			name: "LeaveStmt",
			pos:  position{line: 349, col: 1, offset: 10935},
			expr: &actionExpr{
				pos: position{line: 349, col: 14, offset: 10948},
				run: (*parser).callonLeaveStmt1,
				expr: &seqExpr{
					pos: position{line: 349, col: 14, offset: 10948},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 349, col: 14, offset: 10948},
							name: "LEAVE",
						},
						&ruleRefExpr{
							pos:  position{line: 349, col: 20, offset: 10954},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 349, col: 22, offset: 10956},
							label: "label",
							expr: &zeroOrOneExpr{
								pos: position{line: 349, col: 28, offset: 10962},
								expr: &ruleRefExpr{
									pos:  position{line: 349, col: 28, offset: 10962},
									name: "IdentifierName",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IterateStmt",
			pos:  position{line: 359, col: 1, offset: 11191},
			expr: &actionExpr{
				pos: position{line: 359, col: 16, offset: 11206},
				run: (*parser).callonIterateStmt1,
				expr: &seqExpr{
					pos: position{line: 359, col: 16, offset: 11206},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 359, col: 16, offset: 11206},
							name: "ITERATE",
						},
						&ruleRefExpr{
							pos:  position{line: 359, col: 24, offset: 11214},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 359, col: 26, offset: 11216},
							label: "label",
							expr: &ruleRefExpr{
								pos:  position{line: 359, col: 32, offset: 11222},
								name: "IdentifierName",
							},
						},
					},
				},
			},
		},
		{
			name: "ReturnStmt",
			pos:  position{line: 369, col: 1, offset: 11451},
			expr: &actionExpr{
				pos: position{line: 369, col: 15, offset: 11465},
				run: (*parser).callonReturnStmt1,
				expr: &seqExpr{
					pos: position{line: 369, col: 15, offset: 11465},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 369, col: 15, offset: 11465},
							name: "RETURN",
						},
						&ruleRefExpr{
							pos:  position{line: 369, col: 22, offset: 11472},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 369, col: 24, offset: 11474},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 369, col: 29, offset: 11479},
								name: "ConsumeUntilSemicolon",
							},
						},
					},
				},
			},
		},
		{
			name: "DeclareStmt",
			pos:  position{line: 376, col: 1, offset: 11607},
			expr: &actionExpr{
				pos: position{line: 376, col: 16, offset: 11622},
				run: (*parser).callonDeclareStmt1,
				expr: &seqExpr{
					pos: position{line: 376, col: 16, offset: 11622},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 376, col: 16, offset: 11622},
							name: "DECLARE",
						},
						&ruleRefExpr{
							pos:  position{line: 376, col: 24, offset: 11630},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 376, col: 26, offset: 11632},
							label: "text",
							expr: &ruleRefExpr{
								pos:  position{line: 376, col: 31, offset: 11637},
								name: "ConsumeUntilSemicolon",
							},
						},
					},
				},
			},
		},
		{
			name: "SetVariableStmt",
			pos:  position{line: 383, col: 1, offset: 11826},
			expr: &actionExpr{
				pos: position{line: 383, col: 20, offset: 11845},
				run: (*parser).callonSetVariableStmt1,
				expr: &seqExpr{
					pos: position{line: 383, col: 20, offset: 11845},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 383, col: 20, offset: 11845},
							name: "SET",
						},
						&ruleRefExpr{
							pos:  position{line: 383, col: 24, offset: 11849},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 383, col: 26, offset: 11851},
							label: "assignments",
							expr: &ruleRefExpr{
								pos:  position{line: 383, col: 38, offset: 11863},
								name: "VariableAssignmentList",
							},
						},
					},
				},
			},
		},
		{
			name: "VariableAssignmentList",
			pos:  position{line: 391, col: 1, offset: 12085},
			expr: &actionExpr{
				pos: position{line: 391, col: 27, offset: 12111},
				run: (*parser).callonVariableAssignmentList1,
				expr: &seqExpr{
					pos: position{line: 391, col: 27, offset: 12111},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 391, col: 27, offset: 12111},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 391, col: 33, offset: 12117},
								name: "VariableAssignmentItem",
							},
						},
						&labeledExpr{
							pos:   position{line: 391, col: 56, offset: 12140},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 391, col: 61, offset: 12145},
								expr: &seqExpr{
									pos: position{line: 391, col: 62, offset: 12146},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 391, col: 62, offset: 12146},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 391, col: 64, offset: 12148},
											val:        ",",
											ignoreCase: false,
											want:       "\",\"",
										},
										&ruleRefExpr{
											pos:  position{line: 391, col: 68, offset: 12152},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 391, col: 70, offset: 12154},
											name: "VariableAssignmentItem",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VariableAssignmentItem",
			pos:  position{line: 400, col: 1, offset: 12452},
			expr: &actionExpr{
				pos: position{line: 400, col: 27, offset: 12478},
				run: (*parser).callonVariableAssignmentItem1,
				expr: &seqExpr{
					pos: position{line: 400, col: 27, offset: 12478},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 400, col: 27, offset: 12478},
							label: "scope",
							expr: &zeroOrOneExpr{
								pos: position{line: 400, col: 33, offset: 12484},
								expr: &ruleRefExpr{
									pos:  position{line: 400, col: 33, offset: 12484},
									name: "ScopeKeyword",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 400, col: 47, offset: 12498},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 400, col: 49, offset: 12500},
							label: "variable",
							expr: &ruleRefExpr{
								pos:  position{line: 400, col: 58, offset: 12509},
								name: "VariableReference",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 400, col: 76, offset: 12527},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 400, col: 78, offset: 12529},
							label: "operator",
							expr: &ruleRefExpr{
								pos:  position{line: 400, col: 87, offset: 12538},
								name: "AssignmentOperator",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 400, col: 106, offset: 12557},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 400, col: 108, offset: 12559},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 400, col: 114, offset: 12565},
								name: "ConsumeUntilCommaOrSemicolon",
							},
						},
					},
				},
			},
		},
		{
			name: "ScopeKeyword",
			pos:  position{line: 410, col: 1, offset: 12855},
			expr: &actionExpr{
				pos: position{line: 410, col: 17, offset: 12871},
				run: (*parser).callonScopeKeyword1,
				expr: &choiceExpr{
					pos: position{line: 410, col: 18, offset: 12872},
					alternatives: []any{
						&ruleRefExpr{
							pos:  position{line: 410, col: 18, offset: 12872},
							name: "GLOBAL",
						},
						&ruleRefExpr{
							pos:  position{line: 410, col: 27, offset: 12881},
							name: "SESSION",
						},
						&ruleRefExpr{
							pos:  position{line: 410, col: 37, offset: 12891},
							name: "PERSIST_ONLY",
						},
						&ruleRefExpr{
							pos:  position{line: 410, col: 52, offset: 12906},
							name: "PERSIST",
						},
					},
				},
			},
		},
		{
			name: "VariableReference",
			pos:  position{line: 415, col: 1, offset: 13028},
			expr: &choiceExpr{
				pos: position{line: 415, col: 22, offset: 13049},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 415, col: 22, offset: 13049},
						run: (*parser).callonVariableReference2,
						expr: &seqExpr{
							pos: position{line: 415, col: 22, offset: 13049},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 415, col: 22, offset: 13049},
									val:        "@@",
									ignoreCase: false,
									want:       "\"@@\"",
								},
								&choiceExpr{
									pos: position{line: 415, col: 28, offset: 13055},
									alternatives: []any{
										&ruleRefExpr{
											pos:  position{line: 415, col: 28, offset: 13055},
											name: "GLOBAL",
										},
										&ruleRefExpr{
											pos:  position{line: 415, col: 37, offset: 13064},
											name: "SESSION",
										},
										&ruleRefExpr{
											pos:  position{line: 415, col: 47, offset: 13074},
											name: "PERSIST",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 415, col: 56, offset: 13083},
									val:        ".",
									ignoreCase: false,
									want:       "\".\"",
								},
								&ruleRefExpr{
									pos:  position{line: 415, col: 60, offset: 13087},
									name: "IdentifierName",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 416, col: 21, offset: 13155},
						run: (*parser).callonVariableReference11,
						expr: &seqExpr{
							pos: position{line: 416, col: 21, offset: 13155},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 416, col: 21, offset: 13155},
									val:        "@@",
									ignoreCase: false,
									want:       "\"@@\"",
								},
								&ruleRefExpr{
									pos:  position{line: 416, col: 26, offset: 13160},
									name: "IdentifierName",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 417, col: 21, offset: 13228},
						run: (*parser).callonVariableReference15,
						expr: &seqExpr{
							pos: position{line: 417, col: 21, offset: 13228},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 417, col: 21, offset: 13228},
									val:        "@",
									ignoreCase: false,
									want:       "\"@\"",
								},
								&ruleRefExpr{
									pos:  position{line: 417, col: 25, offset: 13232},
									name: "IdentifierName",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 418, col: 21, offset: 13300},
						run: (*parser).callonVariableReference19,
						expr: &ruleRefExpr{
							pos:  position{line: 418, col: 21, offset: 13300},
							name: "IdentifierName",
						},
					},
				},
			},
		},
		{
			name: "AssignmentOperator",
			pos:  position{line: 421, col: 1, offset: 13371},
			expr: &choiceExpr{
				pos: position{line: 421, col: 23, offset: 13393},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 421, col: 23, offset: 13393},
						val:        ":=",
						ignoreCase: false,
						want:       "\":=\"",
					},
					&actionExpr{
						pos: position{line: 421, col: 30, offset: 13400},
						run: (*parser).callonAssignmentOperator3,
						expr: &litMatcher{
							pos:        position{line: 421, col: 30, offset: 13400},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
					},
				},
			},
		},
		{
			name: "GenericStmt",
			pos:  position{line: 426, col: 1, offset: 13504},
			expr: &actionExpr{
				pos: position{line: 426, col: 16, offset: 13519},
				run: (*parser).callonGenericStmt1,
				expr: &seqExpr{
					pos: position{line: 426, col: 16, offset: 13519},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 426, col: 16, offset: 13519},
							label: "kind",
							expr: &ruleRefExpr{
								pos:  position{line: 426, col: 21, offset: 13524},
								name: "IdentifierName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 426, col: 36, offset: 13539},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 426, col: 38, offset: 13541},
							label: "text",
							expr: &ruleRefExpr{
								pos:  position{line: 426, col: 43, offset: 13546},
								name: "ConsumeUntilSemicolon",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLContentAny",
			pos:  position{line: 432, col: 1, offset: 13654},
			expr: &choiceExpr{
				pos: position{line: 432, col: 18, offset: 13671},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 432, col: 18, offset: 13671},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 432, col: 33, offset: 13686},
						name: "Comment",
					},
					&ruleRefExpr{
						pos:  position{line: 432, col: 43, offset: 13696},
						name: "Whitespace",
					},
					&seqExpr{
						pos: position{line: 432, col: 56, offset: 13709},
						exprs: []any{
							&litMatcher{
								pos:        position{line: 432, col: 56, offset: 13709},
								val:        "(",
								ignoreCase: false,
								want:       "\"(\"",
							},
							&ruleRefExpr{
								pos:  position{line: 432, col: 60, offset: 13713},
								name: "_",
							},
							&zeroOrMoreExpr{
								pos: position{line: 432, col: 62, offset: 13715},
								expr: &seqExpr{
									pos: position{line: 432, col: 63, offset: 13716},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 432, col: 63, offset: 13716},
											name: "SQLContentAny",
										},
										&ruleRefExpr{
											pos:  position{line: 432, col: 77, offset: 13730},
											name: "_",
										},
									},
								},
							},
							&litMatcher{
								pos:        position{line: 432, col: 81, offset: 13734},
								val:        ")",
								ignoreCase: false,
								want:       "\")\"",
							},
						},
					},
					&seqExpr{
						pos: position{line: 432, col: 87, offset: 13740},
						exprs: []any{
							&notExpr{
								pos: position{line: 432, col: 87, offset: 13740},
								expr: &litMatcher{
									pos:        position{line: 432, col: 88, offset: 13741},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
							},
							&notExpr{
								pos: position{line: 432, col: 92, offset: 13745},
								expr: &litMatcher{
									pos:        position{line: 432, col: 93, offset: 13746},
									val:        ")",
									ignoreCase: false,
									want:       "\")\"",
								},
							},
							&anyMatcher{
								line: 432, col: 97, offset: 13750,
							},
						},
					},
				},
			},
		},
		{
			name: "ConsumeUntilSemicolon",
			pos:  position{line: 434, col: 1, offset: 13753},
			expr: &actionExpr{
				pos: position{line: 434, col: 26, offset: 13778},
				run: (*parser).callonConsumeUntilSemicolon1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 434, col: 26, offset: 13778},
					expr: &choiceExpr{
						pos: position{line: 434, col: 27, offset: 13779},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 434, col: 27, offset: 13779},
								name: "QuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 434, col: 42, offset: 13794},
								name: "Comment",
							},
							&ruleRefExpr{
								pos:  position{line: 434, col: 52, offset: 13804},
								name: "Whitespace",
							},
							&seqExpr{
								pos: position{line: 434, col: 65, offset: 13817},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 434, col: 65, offset: 13817},
										val:        "(",
										ignoreCase: false,
										want:       "\"(\"",
									},
									&ruleRefExpr{
										pos:  position{line: 434, col: 69, offset: 13821},
										name: "_",
									},
									&zeroOrMoreExpr{
										pos: position{line: 434, col: 71, offset: 13823},
										expr: &seqExpr{
											pos: position{line: 434, col: 72, offset: 13824},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 434, col: 72, offset: 13824},
													name: "SQLContentAny",
												},
												&ruleRefExpr{
													pos:  position{line: 434, col: 86, offset: 13838},
													name: "_",
												},
											},
										},
									},
									&litMatcher{
										pos:        position{line: 434, col: 90, offset: 13842},
										val:        ")",
										ignoreCase: false,
										want:       "\")\"",
									},
								},
							},
							&seqExpr{
								pos: position{line: 434, col: 96, offset: 13848},
								exprs: []any{
									&notExpr{
										pos: position{line: 434, col: 96, offset: 13848},
										expr: &litMatcher{
											pos:        position{line: 434, col: 97, offset: 13849},
											val:        ";",
											ignoreCase: false,
											want:       "\";\"",
										},
									},
									&notExpr{
										pos: position{line: 434, col: 101, offset: 13853},
										expr: &litMatcher{
											pos:        position{line: 434, col: 102, offset: 13854},
											val:        "(",
											ignoreCase: false,
											want:       "\"(\"",
										},
									},
									&notExpr{
										pos: position{line: 434, col: 106, offset: 13858},
										expr: &litMatcher{
											pos:        position{line: 434, col: 107, offset: 13859},
											val:        ")",
											ignoreCase: false,
											want:       "\")\"",
										},
									},
									&anyMatcher{
										line: 434, col: 111, offset: 13863,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConsumeUntilEND",
			pos:  position{line: 437, col: 1, offset: 13918},
			expr: &actionExpr{
				pos: position{line: 437, col: 20, offset: 13937},
				run: (*parser).callonConsumeUntilEND1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 437, col: 20, offset: 13937},
					expr: &choiceExpr{
						pos: position{line: 437, col: 21, offset: 13938},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 437, col: 21, offset: 13938},
								name: "QuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 437, col: 36, offset: 13953},
								name: "Comment",
							},
							&ruleRefExpr{
								pos:  position{line: 437, col: 46, offset: 13963},
								name: "Whitespace",
							},
							&seqExpr{
								pos: position{line: 437, col: 59, offset: 13976},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 437, col: 59, offset: 13976},
										val:        "(",
										ignoreCase: false,
										want:       "\"(\"",
									},
									&ruleRefExpr{
										pos:  position{line: 437, col: 63, offset: 13980},
										name: "_",
									},
									&zeroOrMoreExpr{
										pos: position{line: 437, col: 65, offset: 13982},
										expr: &seqExpr{
											pos: position{line: 437, col: 66, offset: 13983},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 437, col: 66, offset: 13983},
													name: "SQLContentAny",
												},
												&ruleRefExpr{
													pos:  position{line: 437, col: 80, offset: 13997},
													name: "_",
												},
											},
										},
									},
									&litMatcher{
										pos:        position{line: 437, col: 84, offset: 14001},
										val:        ")",
										ignoreCase: false,
										want:       "\")\"",
									},
								},
							},
							&seqExpr{
								pos: position{line: 437, col: 90, offset: 14007},
								exprs: []any{
									&notExpr{
										pos: position{line: 437, col: 90, offset: 14007},
										expr: &litMatcher{
											pos:        position{line: 437, col: 91, offset: 14008},
											val:        "END",
											ignoreCase: false,
											want:       "\"END\"",
										},
									},
									&notExpr{
										pos: position{line: 437, col: 97, offset: 14014},
										expr: &litMatcher{
											pos:        position{line: 437, col: 98, offset: 14015},
											val:        "(",
											ignoreCase: false,
											want:       "\"(\"",
										},
									},
									&notExpr{
										pos: position{line: 437, col: 102, offset: 14019},
										expr: &litMatcher{
											pos:        position{line: 437, col: 103, offset: 14020},
											val:        ")",
											ignoreCase: false,
											want:       "\")\"",
										},
									},
									&anyMatcher{
										line: 437, col: 107, offset: 14024,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConsumeUntilTHEN",
			pos:  position{line: 440, col: 1, offset: 14079},
			expr: &actionExpr{
				pos: position{line: 440, col: 21, offset: 14099},
				run: (*parser).callonConsumeUntilTHEN1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 440, col: 21, offset: 14099},
					expr: &choiceExpr{
						pos: position{line: 440, col: 22, offset: 14100},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 440, col: 22, offset: 14100},
								name: "QuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 440, col: 37, offset: 14115},
								name: "Comment",
							},
							&ruleRefExpr{
								pos:  position{line: 440, col: 47, offset: 14125},
								name: "Whitespace",
							},
							&seqExpr{
								pos: position{line: 440, col: 60, offset: 14138},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 440, col: 60, offset: 14138},
										val:        "(",
										ignoreCase: false,
										want:       "\"(\"",
									},
									&ruleRefExpr{
										pos:  position{line: 440, col: 64, offset: 14142},
										name: "_",
									},
									&zeroOrMoreExpr{
										pos: position{line: 440, col: 66, offset: 14144},
										expr: &seqExpr{
											pos: position{line: 440, col: 67, offset: 14145},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 440, col: 67, offset: 14145},
													name: "SQLContentAny",
												},
												&ruleRefExpr{
													pos:  position{line: 440, col: 81, offset: 14159},
													name: "_",
												},
											},
										},
									},
									&litMatcher{
										pos:        position{line: 440, col: 85, offset: 14163},
										val:        ")",
										ignoreCase: false,
										want:       "\")\"",
									},
								},
							},
							&seqExpr{
								pos: position{line: 440, col: 91, offset: 14169},
								exprs: []any{
									&notExpr{
										pos: position{line: 440, col: 91, offset: 14169},
										expr: &litMatcher{
											pos:        position{line: 440, col: 92, offset: 14170},
											val:        "THEN",
											ignoreCase: false,
											want:       "\"THEN\"",
										},
									},
									&notExpr{
										pos: position{line: 440, col: 99, offset: 14177},
										expr: &litMatcher{
											pos:        position{line: 440, col: 100, offset: 14178},
											val:        "(",
											ignoreCase: false,
											want:       "\"(\"",
										},
									},
									&notExpr{
										pos: position{line: 440, col: 104, offset: 14182},
										expr: &litMatcher{
											pos:        position{line: 440, col: 105, offset: 14183},
											val:        ")",
											ignoreCase: false,
											want:       "\")\"",
										},
									},
									&anyMatcher{
										line: 440, col: 109, offset: 14187,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConsumeUntilDO",
			pos:  position{line: 443, col: 1, offset: 14242},
			expr: &actionExpr{
				pos: position{line: 443, col: 19, offset: 14260},
				run: (*parser).callonConsumeUntilDO1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 443, col: 19, offset: 14260},
					expr: &choiceExpr{
						pos: position{line: 443, col: 20, offset: 14261},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 443, col: 20, offset: 14261},
								name: "QuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 443, col: 35, offset: 14276},
								name: "Comment",
							},
							&ruleRefExpr{
								pos:  position{line: 443, col: 45, offset: 14286},
								name: "Whitespace",
							},
							&seqExpr{
								pos: position{line: 443, col: 58, offset: 14299},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 443, col: 58, offset: 14299},
										val:        "(",
										ignoreCase: false,
										want:       "\"(\"",
									},
									&ruleRefExpr{
										pos:  position{line: 443, col: 62, offset: 14303},
										name: "_",
									},
									&zeroOrMoreExpr{
										pos: position{line: 443, col: 64, offset: 14305},
										expr: &seqExpr{
											pos: position{line: 443, col: 65, offset: 14306},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 443, col: 65, offset: 14306},
													name: "SQLContentAny",
												},
												&ruleRefExpr{
													pos:  position{line: 443, col: 79, offset: 14320},
													name: "_",
												},
											},
										},
									},
									&litMatcher{
										pos:        position{line: 443, col: 83, offset: 14324},
										val:        ")",
										ignoreCase: false,
										want:       "\")\"",
									},
								},
							},
							&seqExpr{
								pos: position{line: 443, col: 89, offset: 14330},
								exprs: []any{
									&notExpr{
										pos: position{line: 443, col: 89, offset: 14330},
										expr: &litMatcher{
											pos:        position{line: 443, col: 90, offset: 14331},
											val:        "DO",
											ignoreCase: false,
											want:       "\"DO\"",
										},
									},
									&notExpr{
										pos: position{line: 443, col: 95, offset: 14336},
										expr: &litMatcher{
											pos:        position{line: 443, col: 96, offset: 14337},
											val:        "(",
											ignoreCase: false,
											want:       "\"(\"",
										},
									},
									&notExpr{
										pos: position{line: 443, col: 100, offset: 14341},
										expr: &litMatcher{
											pos:        position{line: 443, col: 101, offset: 14342},
											val:        ")",
											ignoreCase: false,
											want:       "\")\"",
										},
									},
									&anyMatcher{
										line: 443, col: 105, offset: 14346,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConsumeUntilWHEN",
			pos:  position{line: 446, col: 1, offset: 14401},
			expr: &actionExpr{
				pos: position{line: 446, col: 21, offset: 14421},
				run: (*parser).callonConsumeUntilWHEN1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 446, col: 21, offset: 14421},
					expr: &choiceExpr{
						pos: position{line: 446, col: 22, offset: 14422},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 446, col: 22, offset: 14422},
								name: "QuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 446, col: 37, offset: 14437},
								name: "Comment",
							},
							&ruleRefExpr{
								pos:  position{line: 446, col: 47, offset: 14447},
								name: "Whitespace",
							},
							&seqExpr{
								pos: position{line: 446, col: 60, offset: 14460},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 446, col: 60, offset: 14460},
										val:        "(",
										ignoreCase: false,
										want:       "\"(\"",
									},
									&ruleRefExpr{
										pos:  position{line: 446, col: 64, offset: 14464},
										name: "_",
									},
									&zeroOrMoreExpr{
										pos: position{line: 446, col: 66, offset: 14466},
										expr: &seqExpr{
											pos: position{line: 446, col: 67, offset: 14467},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 446, col: 67, offset: 14467},
													name: "SQLContentAny",
												},
												&ruleRefExpr{
													pos:  position{line: 446, col: 81, offset: 14481},
													name: "_",
												},
											},
										},
									},
									&litMatcher{
										pos:        position{line: 446, col: 85, offset: 14485},
										val:        ")",
										ignoreCase: false,
										want:       "\")\"",
									},
								},
							},
							&seqExpr{
								pos: position{line: 446, col: 91, offset: 14491},
								exprs: []any{
									&notExpr{
										pos: position{line: 446, col: 91, offset: 14491},
										expr: &litMatcher{
											pos:        position{line: 446, col: 92, offset: 14492},
											val:        "WHEN",
											ignoreCase: false,
											want:       "\"WHEN\"",
										},
									},
									&notExpr{
										pos: position{line: 446, col: 99, offset: 14499},
										expr: &litMatcher{
											pos:        position{line: 446, col: 100, offset: 14500},
											val:        "(",
											ignoreCase: false,
											want:       "\"(\"",
										},
									},
									&notExpr{
										pos: position{line: 446, col: 104, offset: 14504},
										expr: &litMatcher{
											pos:        position{line: 446, col: 105, offset: 14505},
											val:        ")",
											ignoreCase: false,
											want:       "\")\"",
										},
									},
									&anyMatcher{
										line: 446, col: 109, offset: 14509,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConsumeUntilCommaOrSemicolon",
			pos:  position{line: 449, col: 1, offset: 14564},
			expr: &actionExpr{
				pos: position{line: 449, col: 33, offset: 14596},
				run: (*parser).callonConsumeUntilCommaOrSemicolon1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 449, col: 33, offset: 14596},
					expr: &choiceExpr{
						pos: position{line: 449, col: 34, offset: 14597},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 449, col: 34, offset: 14597},
								name: "QuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 449, col: 49, offset: 14612},
								name: "Comment",
							},
							&ruleRefExpr{
								pos:  position{line: 449, col: 59, offset: 14622},
								name: "Whitespace",
							},
							&seqExpr{
								pos: position{line: 449, col: 72, offset: 14635},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 449, col: 72, offset: 14635},
										val:        "(",
										ignoreCase: false,
										want:       "\"(\"",
									},
									&ruleRefExpr{
										pos:  position{line: 449, col: 76, offset: 14639},
										name: "_",
									},
									&zeroOrMoreExpr{
										pos: position{line: 449, col: 78, offset: 14641},
										expr: &seqExpr{
											pos: position{line: 449, col: 79, offset: 14642},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 449, col: 79, offset: 14642},
													name: "SQLContentAny",
												},
												&ruleRefExpr{
													pos:  position{line: 449, col: 93, offset: 14656},
													name: "_",
												},
											},
										},
									},
									&litMatcher{
										pos:        position{line: 449, col: 97, offset: 14660},
										val:        ")",
										ignoreCase: false,
										want:       "\")\"",
									},
								},
							},
							&seqExpr{
								pos: position{line: 449, col: 103, offset: 14666},
								exprs: []any{
									&notExpr{
										pos: position{line: 449, col: 103, offset: 14666},
										expr: &litMatcher{
											pos:        position{line: 449, col: 104, offset: 14667},
											val:        ",",
											ignoreCase: false,
											want:       "\",\"",
										},
									},
									&notExpr{
										pos: position{line: 449, col: 108, offset: 14671},
										expr: &litMatcher{
											pos:        position{line: 449, col: 109, offset: 14672},
											val:        ";",
											ignoreCase: false,
											want:       "\";\"",
										},
									},
									&notExpr{
										pos: position{line: 449, col: 113, offset: 14676},
										expr: &litMatcher{
											pos:        position{line: 449, col: 114, offset: 14677},
											val:        "(",
											ignoreCase: false,
											want:       "\"(\"",
										},
									},
									&notExpr{
										pos: position{line: 449, col: 118, offset: 14681},
										expr: &litMatcher{
											pos:        position{line: 449, col: 119, offset: 14682},
											val:        ")",
											ignoreCase: false,
											want:       "\")\"",
										},
									},
									&anyMatcher{
										line: 449, col: 123, offset: 14686,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StatementList",
			pos:  position{line: 454, col: 1, offset: 14760},
			expr: &actionExpr{
				pos: position{line: 454, col: 18, offset: 14777},
				run: (*parser).callonStatementList1,
				expr: &labeledExpr{
					pos:   position{line: 454, col: 18, offset: 14777},
					label: "stmts",
					expr: &oneOrMoreExpr{
						pos: position{line: 454, col: 24, offset: 14783},
						expr: &seqExpr{
							pos: position{line: 454, col: 25, offset: 14784},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 454, col: 25, offset: 14784},
									name: "Statement",
								},
								&ruleRefExpr{
									pos:  position{line: 454, col: 35, offset: 14794},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 454, col: 37, offset: 14796},
									val:        ";",
									ignoreCase: false,
									want:       "\";\"",
								},
								&ruleRefExpr{
									pos:  position{line: 454, col: 41, offset: 14800},
									name: "_",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParameterList",
			pos:  position{line: 467, col: 1, offset: 15125},
			expr: &actionExpr{
				pos: position{line: 467, col: 18, offset: 15142},
				run: (*parser).callonParameterList1,
				expr: &seqExpr{
					pos: position{line: 467, col: 18, offset: 15142},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 467, col: 18, offset: 15142},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 467, col: 24, offset: 15148},
								name: "Parameter",
							},
						},
						&labeledExpr{
							pos:   position{line: 467, col: 34, offset: 15158},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 467, col: 39, offset: 15163},
								expr: &seqExpr{
									pos: position{line: 467, col: 40, offset: 15164},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 467, col: 40, offset: 15164},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 467, col: 42, offset: 15166},
											val:        ",",
											ignoreCase: false,
											want:       "\",\"",
										},
										&ruleRefExpr{
											pos:  position{line: 467, col: 46, offset: 15170},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 467, col: 48, offset: 15172},
											name: "Parameter",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Parameter",
			pos:  position{line: 480, col: 1, offset: 15513},
			expr: &actionExpr{
				pos: position{line: 480, col: 14, offset: 15526},
				run: (*parser).callonParameter1,
				expr: &seqExpr{
					pos: position{line: 480, col: 14, offset: 15526},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 480, col: 14, offset: 15526},
							label: "mode",
							expr: &zeroOrOneExpr{
								pos: position{line: 480, col: 19, offset: 15531},
								expr: &ruleRefExpr{
									pos:  position{line: 480, col: 19, offset: 15531},
									name: "ParameterMode",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 480, col: 34, offset: 15546},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 480, col: 36, offset: 15548},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 480, col: 41, offset: 15553},
								name: "IdentifierName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 480, col: 56, offset: 15568},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 480, col: 58, offset: 15570},
							label: "dataType",
							expr: &ruleRefExpr{
								pos:  position{line: 480, col: 67, offset: 15579},
								name: "TypeName",
							},
						},
					},
				},
			},
		},
		{
			name: "ParameterMode",
			pos:  position{line: 489, col: 1, offset: 15738},
			expr: &actionExpr{
				pos: position{line: 489, col: 18, offset: 15755},
				run: (*parser).callonParameterMode1,
				expr: &choiceExpr{
					pos: position{line: 489, col: 19, offset: 15756},
					alternatives: []any{
						&ruleRefExpr{
							pos:  position{line: 489, col: 19, offset: 15756},
							name: "IN",
						},
						&ruleRefExpr{
							pos:  position{line: 489, col: 24, offset: 15761},
							name: "OUT",
						},
						&ruleRefExpr{
							pos:  position{line: 489, col: 30, offset: 15767},
							name: "INOUT",
						},
					},
				},
			},
		},
		{
			name: "VariableList",
			pos:  position{line: 494, col: 1, offset: 15844},
			expr: &actionExpr{
				pos: position{line: 494, col: 17, offset: 15860},
				run: (*parser).callonVariableList1,
				expr: &seqExpr{
					pos: position{line: 494, col: 17, offset: 15860},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 494, col: 17, offset: 15860},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 494, col: 23, offset: 15866},
								name: "IdentifierName",
							},
						},
						&labeledExpr{
							pos:   position{line: 494, col: 38, offset: 15881},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 494, col: 43, offset: 15886},
								expr: &seqExpr{
									pos: position{line: 494, col: 44, offset: 15887},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 494, col: 44, offset: 15887},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 494, col: 46, offset: 15889},
											val:        ",",
											ignoreCase: false,
											want:       "\",\"",
										},
										&ruleRefExpr{
											pos:  position{line: 494, col: 50, offset: 15893},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 494, col: 52, offset: 15895},
											name: "IdentifierName",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeName",
			pos:  position{line: 505, col: 1, offset: 16168},
			expr: &actionExpr{
				pos: position{line: 505, col: 13, offset: 16180},
				run: (*parser).callonTypeName1,
				expr: &seqExpr{
					pos: position{line: 505, col: 13, offset: 16180},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 505, col: 13, offset: 16180},
							label: "baseType",
							expr: &charClassMatcher{
								pos:        position{line: 505, col: 22, offset: 16189},
								val:        "[A-Za-z]",
								ranges:     []rune{'A', 'Z', 'a', 'z'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 505, col: 30, offset: 16197},
							expr: &charClassMatcher{
								pos:        position{line: 505, col: 30, offset: 16197},
								val:        "[A-Za-z0-9_]",
								chars:      []rune{'_'},
								ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 505, col: 44, offset: 16211},
							label: "params",
							expr: &zeroOrOneExpr{
								pos: position{line: 505, col: 51, offset: 16218},
								expr: &seqExpr{
									pos: position{line: 505, col: 52, offset: 16219},
									exprs: []any{
										&litMatcher{
											pos:        position{line: 505, col: 52, offset: 16219},
											val:        "(",
											ignoreCase: false,
											want:       "\"(\"",
										},
										&oneOrMoreExpr{
											pos: position{line: 505, col: 56, offset: 16223},
											expr: &charClassMatcher{
												pos:        position{line: 505, col: 56, offset: 16223},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 505, col: 63, offset: 16230},
											expr: &seqExpr{
												pos: position{line: 505, col: 64, offset: 16231},
												exprs: []any{
													&litMatcher{
														pos:        position{line: 505, col: 64, offset: 16231},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
													&oneOrMoreExpr{
														pos: position{line: 505, col: 68, offset: 16235},
														expr: &charClassMatcher{
															pos:        position{line: 505, col: 68, offset: 16235},
															val:        "[0-9]",
															ranges:     []rune{'0', '9'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 505, col: 77, offset: 16244},
											val:        ")",
											ignoreCase: false,
											want:       "\")\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 505, col: 83, offset: 16250},
							label: "modifiers",
							expr: &zeroOrMoreExpr{
								pos: position{line: 505, col: 93, offset: 16260},
								expr: &seqExpr{
									pos: position{line: 505, col: 94, offset: 16261},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 505, col: 94, offset: 16261},
											name: "_",
										},
										&choiceExpr{
											pos: position{line: 505, col: 97, offset: 16264},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 505, col: 97, offset: 16264},
													name: "UNSIGNED",
												},
												&ruleRefExpr{
													pos:  position{line: 505, col: 108, offset: 16275},
													name: "SIGNED",
												},
												&ruleRefExpr{
													pos:  position{line: 505, col: 117, offset: 16284},
													name: "ZEROFILL",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IdentifierName",
			pos:  position{line: 510, col: 1, offset: 16346},
			expr: &actionExpr{
				pos: position{line: 510, col: 19, offset: 16364},
				run: (*parser).callonIdentifierName1,
				expr: &seqExpr{
					pos: position{line: 510, col: 19, offset: 16364},
					exprs: []any{
						&charClassMatcher{
							pos:        position{line: 510, col: 19, offset: 16364},
							val:        "[A-Za-z_]",
							chars:      []rune{'_'},
							ranges:     []rune{'A', 'Z', 'a', 'z'},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 510, col: 28, offset: 16373},
							expr: &charClassMatcher{
								pos:        position{line: 510, col: 28, offset: 16373},
								val:        "[A-Za-z0-9_]",
								chars:      []rune{'_'},
								ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "FunctionAttributes",
			pos:  position{line: 515, col: 1, offset: 16468},
			expr: &actionExpr{
				pos: position{line: 515, col: 23, offset: 16490},
				run: (*parser).callonFunctionAttributes1,
				expr: &labeledExpr{
					pos:   position{line: 515, col: 23, offset: 16490},
					label: "attribute",
					expr: &oneOrMoreExpr{
						pos: position{line: 515, col: 33, offset: 16500},
						expr: &seqExpr{
							pos: position{line: 515, col: 34, offset: 16501},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 515, col: 34, offset: 16501},
									name: "FunctionAttribute",
								},
								&ruleRefExpr{
									pos:  position{line: 515, col: 52, offset: 16519},
									name: "_",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FunctionAttribute",
			pos:  position{line: 519, col: 1, offset: 16554},
			expr: &choiceExpr{
				pos: position{line: 519, col: 22, offset: 16575},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 519, col: 22, offset: 16575},
						name: "DETERMINISTIC",
					},
					&seqExpr{
						pos: position{line: 519, col: 38, offset: 16591},
						exprs: []any{
							&ruleRefExpr{
								pos:  position{line: 519, col: 38, offset: 16591},
								name: "NOT",
							},
							&ruleRefExpr{
								pos:  position{line: 519, col: 42, offset: 16595},
								name: "_",
							},
							&ruleRefExpr{
								pos:  position{line: 519, col: 44, offset: 16597},
								name: "DETERMINISTIC",
							},
						},
					},
					&seqExpr{
						pos: position{line: 519, col: 60, offset: 16613},
						exprs: []any{
							&ruleRefExpr{
								pos:  position{line: 519, col: 60, offset: 16613},
								name: "READS",
							},
							&ruleRefExpr{
								pos:  position{line: 519, col: 66, offset: 16619},
								name: "_",
							},
							&ruleRefExpr{
								pos:  position{line: 519, col: 68, offset: 16621},
								name: "SQL",
							},
							&ruleRefExpr{
								pos:  position{line: 519, col: 72, offset: 16625},
								name: "_",
							},
							&ruleRefExpr{
								pos:  position{line: 519, col: 74, offset: 16627},
								name: "DATA",
							},
						},
					},
					&seqExpr{
						pos: position{line: 519, col: 81, offset: 16634},
						exprs: []any{
							&ruleRefExpr{
								pos:  position{line: 519, col: 81, offset: 16634},
								name: "MODIFIES",
							},
							&ruleRefExpr{
								pos:  position{line: 519, col: 90, offset: 16643},
								name: "_",
							},
							&ruleRefExpr{
								pos:  position{line: 519, col: 92, offset: 16645},
								name: "SQL",
							},
							&ruleRefExpr{
								pos:  position{line: 519, col: 96, offset: 16649},
								name: "_",
							},
							&ruleRefExpr{
								pos:  position{line: 519, col: 98, offset: 16651},
								name: "DATA",
							},
						},
					},
					&seqExpr{
						pos: position{line: 519, col: 105, offset: 16658},
						exprs: []any{
							&ruleRefExpr{
								pos:  position{line: 519, col: 105, offset: 16658},
								name: "NO",
							},
							&ruleRefExpr{
								pos:  position{line: 519, col: 108, offset: 16661},
								name: "_",
							},
							&ruleRefExpr{
								pos:  position{line: 519, col: 110, offset: 16663},
								name: "SQL",
							},
						},
					},
					&seqExpr{
						pos: position{line: 519, col: 116, offset: 16669},
						exprs: []any{
							&ruleRefExpr{
								pos:  position{line: 519, col: 116, offset: 16669},
								name: "CONTAINS",
							},
							&ruleRefExpr{
								pos:  position{line: 519, col: 125, offset: 16678},
								name: "_",
							},
							&ruleRefExpr{
								pos:  position{line: 519, col: 127, offset: 16680},
								name: "SQL",
							},
						},
					},
					&actionExpr{
						pos: position{line: 519, col: 133, offset: 16686},
						run: (*parser).callonFunctionAttribute27,
						expr: &seqExpr{
							pos: position{line: 519, col: 133, offset: 16686},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 519, col: 133, offset: 16686},
									name: "SQL",
								},
								&ruleRefExpr{
									pos:  position{line: 519, col: 137, offset: 16690},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 519, col: 139, offset: 16692},
									name: "SECURITY",
								},
								&ruleRefExpr{
									pos:  position{line: 519, col: 148, offset: 16701},
									name: "_",
								},
								&choiceExpr{
									pos: position{line: 519, col: 151, offset: 16704},
									alternatives: []any{
										&ruleRefExpr{
											pos:  position{line: 519, col: 151, offset: 16704},
											name: "DEFINER",
										},
										&ruleRefExpr{
											pos:  position{line: 519, col: 161, offset: 16714},
											name: "INVOKER",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Whitespace",
			pos:  position{line: 523, col: 1, offset: 16776},
			expr: &oneOrMoreExpr{
				pos: position{line: 523, col: 15, offset: 16790},
				expr: &charClassMatcher{
					pos:        position{line: 523, col: 15, offset: 16790},
					val:        "[ \\t\\r\\n]",
					chars:      []rune{' ', '\t', '\r', '\n'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "_",
			pos:  position{line: 526, col: 1, offset: 16827},
			expr: &zeroOrMoreExpr{
				pos: position{line: 526, col: 6, offset: 16832},
				expr: &choiceExpr{
					pos: position{line: 526, col: 7, offset: 16833},
					alternatives: []any{
						&ruleRefExpr{
							pos:  position{line: 526, col: 7, offset: 16833},
							name: "Comment",
						},
						&ruleRefExpr{
							pos:  position{line: 526, col: 17, offset: 16843},
							name: "Whitespace",
						},
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 529, col: 1, offset: 16872},
			expr: &notExpr{
				pos: position{line: 529, col: 8, offset: 16879},
				expr: &anyMatcher{
					line: 529, col: 9, offset: 16880,
				},
			},
		},
	},
}

func (c *current) onInput1(stmt any) (any, error) {
	return stmt, nil
}

func (p *parser) callonInput1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInput1(stack["stmt"])
}

func (c *current) onStatement1(label, stmt any) (any, error) {
	if label != nil {
		stmt.(StatementAST).SetLabel(label.(string))
	}
	return stmt, nil
}

func (p *parser) callonStatement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatement1(stack["label"], stack["stmt"])
}

func (c *current) onLabel1(label any) (any, error) {
	return label, nil
}

func (p *parser) callonLabel1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabel1(stack["label"])
}

func (c *current) onCreateProcedureStmt1(name, params, body any) (any, error) {
	return &CreateProcedureStmt{
		BaseStatement: makeBaseStatement(c),
		Name:          toString(name),
		Parameters:    toParameterList(params),
		Body:          toStatementList(body),
	}, nil
}

func (p *parser) callonCreateProcedureStmt1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCreateProcedureStmt1(stack["name"], stack["params"], stack["body"])
}

func (c *current) onCreateFunctionStmt1(name, params, returnType, attributes, body any) (any, error) {
	return &CreateFunctionStmt{
		BaseStatement: makeBaseStatement(c),
		Name:          toString(name),
		Parameters:    toParameterList(params),
		ReturnType:    toString(returnType),
		Body:          toStatementList(body),
	}, nil
}

func (p *parser) callonCreateFunctionStmt1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCreateFunctionStmt1(stack["name"], stack["params"], stack["returnType"], stack["attributes"], stack["body"])
}

func (c *current) onIfStmt1(condition, thenStmts, elseifs, elseClause any) (any, error) {
	return &IfStmt{
		BaseStatement: makeBaseStatement(c),
		Condition:     condition.(string),
		Then:          toStatementList(thenStmts),
		ElseIfs:       toElseIfList(elseifs),
		Else:          toStatementList(elseClause),
	}, nil
}

func (p *parser) callonIfStmt1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfStmt1(stack["condition"], stack["thenStmts"], stack["elseifs"], stack["elseClause"])
}

func (c *current) onElseIfClause1(condition, stmts any) (any, error) {
	return ElseIfClause{
		BaseStatement: makeBaseStatement(c),
		Condition:     condition.(string),
		Then:          toStatementList(stmts),
	}, nil
}

func (p *parser) callonElseIfClause1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfClause1(stack["condition"], stack["stmts"])
}

func (c *current) onElseClause1(stmts any) (any, error) {
	return toStatementList(stmts), nil
}

func (p *parser) callonElseClause1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseClause1(stack["stmts"])
}

func (c *current) onWhileStmt1(condition, body, endLabel any) (any, error) {
	return &WhileStmt{
		BaseStatement: makeBaseStatement(c),
		Condition:     condition.(string),
		Body:          toStatementList(body),
	}, nil
}

func (p *parser) callonWhileStmt1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhileStmt1(stack["condition"], stack["body"], stack["endLabel"])
}

func (c *current) onLoopStmt1(body, endLabel any) (any, error) {
	return &LoopStmt{
		BaseStatement: makeBaseStatement(c),
		Body:          toStatementList(body),
	}, nil
}

func (p *parser) callonLoopStmt1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLoopStmt1(stack["body"], stack["endLabel"])
}

func (c *current) onRepeatStmt1(body, condition, endLabel any) (any, error) {
	return &RepeatStmt{
		BaseStatement: makeBaseStatement(c),
		Body:          toStatementList(body),
		Condition:     condition.(string),
	}, nil
}

func (p *parser) callonRepeatStmt1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRepeatStmt1(stack["body"], stack["condition"], stack["endLabel"])
}

func (c *current) onCaseStmt1(expr, whens, elseClause any) (any, error) {
	return &CaseStmt{
		BaseStatement: makeBaseStatement(c),
		Expression:    expr.(string),
		WhenClauses:   toWhenList(whens),
		Else:          toStatementList(elseClause),
	}, nil
}

func (p *parser) callonCaseStmt1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCaseStmt1(stack["expr"], stack["whens"], stack["elseClause"])
}

func (c *current) onWhenClause1(condition, stmts any) (any, error) {
	return WhenClause{
		BaseStatement: makeBaseStatement(c),
		Condition:     condition.(string),
		Then:          toStatementList(stmts),
	}, nil
}

func (p *parser) callonWhenClause1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhenClause1(stack["condition"], stack["stmts"])
}

func (c *current) onBeginStmt1(body any) (any, error) {
	return &BeginStmt{
		BaseStatement: makeBaseStatement(c),
		Body:          toStatementList(body),
	}, nil
}

func (p *parser) callonBeginStmt1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBeginStmt1(stack["body"])
}

func (c *current) onSingleQuotedString1(content any) (any, error) {
	var result []byte
	result = append(result, '\'')
	for _, part := range content.([]interface{}) {
		result = append(result, part.([]byte)...)
	}
	result = append(result, '\'')
	return result, nil
}

func (p *parser) callonSingleQuotedString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedString1(stack["content"])
}

func (c *current) onSingleQuoteContent2() (any, error) {
	return []byte("''"), nil
}

func (p *parser) callonSingleQuoteContent2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteContent2()
}

func (c *current) onSingleQuoteContent4() (any, error) {
	return []byte("\\0"), nil
}

func (p *parser) callonSingleQuoteContent4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteContent4()
}

func (c *current) onSingleQuoteContent6() (any, error) {
	return []byte("\\'"), nil
}

func (p *parser) callonSingleQuoteContent6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteContent6()
}

func (c *current) onSingleQuoteContent8() (any, error) {
	return []byte("\\\""), nil
}

func (p *parser) callonSingleQuoteContent8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteContent8()
}

func (c *current) onSingleQuoteContent10() (any, error) {
	return []byte("\\b"), nil
}

func (p *parser) callonSingleQuoteContent10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteContent10()
}

func (c *current) onSingleQuoteContent12() (any, error) {
	return []byte("\\n"), nil
}

func (p *parser) callonSingleQuoteContent12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteContent12()
}

func (c *current) onSingleQuoteContent14() (any, error) {
	return []byte("\\r"), nil
}

func (p *parser) callonSingleQuoteContent14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteContent14()
}

func (c *current) onSingleQuoteContent16() (any, error) {
	return []byte("\\t"), nil
}

func (p *parser) callonSingleQuoteContent16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteContent16()
}

func (c *current) onSingleQuoteContent18() (any, error) {
	return []byte("\\Z"), nil
}

func (p *parser) callonSingleQuoteContent18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteContent18()
}

func (c *current) onSingleQuoteContent20() (any, error) {
	return []byte("\\\\"), nil
}

func (p *parser) callonSingleQuoteContent20() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteContent20()
}

func (c *current) onSingleQuoteContent22() (any, error) {
	return []byte("\\%"), nil
}

func (p *parser) callonSingleQuoteContent22() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteContent22()
}

func (c *current) onSingleQuoteContent24() (any, error) {
	return []byte("\\_"), nil
}

func (p *parser) callonSingleQuoteContent24() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteContent24()
}

func (c *current) onSingleQuoteContent26() (any, error) {
	return []byte{c.text[1]}, nil
}

func (p *parser) callonSingleQuoteContent26() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteContent26()
}

func (c *current) onSingleQuoteContent30() (any, error) {
	return c.text, nil
}

func (p *parser) callonSingleQuoteContent30() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteContent30()
}

func (c *current) onDoubleQuotedString1(content any) (any, error) {
	var result []byte
	result = append(result, '"')
	for _, part := range content.([]interface{}) {
		result = append(result, part.([]byte)...)
	}
	result = append(result, '"')
	return result, nil
}

func (p *parser) callonDoubleQuotedString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedString1(stack["content"])
}

func (c *current) onDoubleQuoteContent2() (any, error) {
	return []byte("\"\""), nil
}

func (p *parser) callonDoubleQuoteContent2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteContent2()
}

func (c *current) onDoubleQuoteContent4() (any, error) {
	return []byte("\\0"), nil
}

func (p *parser) callonDoubleQuoteContent4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteContent4()
}

func (c *current) onDoubleQuoteContent6() (any, error) {
	return []byte("\\'"), nil
}

func (p *parser) callonDoubleQuoteContent6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteContent6()
}

func (c *current) onDoubleQuoteContent8() (any, error) {
	return []byte("\\\""), nil
}

func (p *parser) callonDoubleQuoteContent8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteContent8()
}

func (c *current) onDoubleQuoteContent10() (any, error) {
	return []byte("\\b"), nil
}

func (p *parser) callonDoubleQuoteContent10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteContent10()
}

func (c *current) onDoubleQuoteContent12() (any, error) {
	return []byte("\\n"), nil
}

func (p *parser) callonDoubleQuoteContent12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteContent12()
}

func (c *current) onDoubleQuoteContent14() (any, error) {
	return []byte("\\r"), nil
}

func (p *parser) callonDoubleQuoteContent14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteContent14()
}

func (c *current) onDoubleQuoteContent16() (any, error) {
	return []byte("\\t"), nil
}

func (p *parser) callonDoubleQuoteContent16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteContent16()
}

func (c *current) onDoubleQuoteContent18() (any, error) {
	return []byte("\\Z"), nil
}

func (p *parser) callonDoubleQuoteContent18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteContent18()
}

func (c *current) onDoubleQuoteContent20() (any, error) {
	return []byte("\\\\"), nil
}

func (p *parser) callonDoubleQuoteContent20() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteContent20()
}

func (c *current) onDoubleQuoteContent22() (any, error) {
	return []byte("\\%"), nil
}

func (p *parser) callonDoubleQuoteContent22() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteContent22()
}

func (c *current) onDoubleQuoteContent24() (any, error) {
	return []byte("\\_"), nil
}

func (p *parser) callonDoubleQuoteContent24() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteContent24()
}

func (c *current) onDoubleQuoteContent26() (any, error) {
	return []byte{c.text[1]}, nil
}

func (p *parser) callonDoubleQuoteContent26() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteContent26()
}

func (c *current) onDoubleQuoteContent30() (any, error) {
	return c.text, nil
}

func (p *parser) callonDoubleQuoteContent30() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteContent30()
}

func (c *current) onBacktickString1(content any) (any, error) {
	var result []byte
	result = append(result, '`')
	for _, part := range content.([]interface{}) {
		result = append(result, part.([]byte)...)
	}
	result = append(result, '`')
	return result, nil
}

func (p *parser) callonBacktickString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBacktickString1(stack["content"])
}

func (c *current) onBacktickContent2() (any, error) {
	return []byte("``"), nil
}

func (p *parser) callonBacktickContent2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBacktickContent2()
}

func (c *current) onBacktickContent4() (any, error) {
	return c.text, nil
}

func (p *parser) callonBacktickContent4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBacktickContent4()
}

func (c *current) onLineComment1() (any, error) {
	return c.text, nil
}

func (p *parser) callonLineComment1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineComment1()
}

func (c *current) onBlockComment1(content any) (any, error) {
	return c.text, nil
}

func (p *parser) callonBlockComment1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockComment1(stack["content"])
}

func (c *current) onLeaveStmt1(label any) (any, error) {
	stmt := &LeaveStmt{
		BaseStatement: makeBaseStatement(c),
	}
	// Override the Label field with the referenced label
	stmt.Label = toString(label)
	return stmt, nil
}

func (p *parser) callonLeaveStmt1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLeaveStmt1(stack["label"])
}

func (c *current) onIterateStmt1(label any) (any, error) {
	stmt := &IterateStmt{
		BaseStatement: makeBaseStatement(c),
	}
	// Override the Label field with the referenced label
	stmt.Label = toString(label)
	return stmt, nil
}

func (p *parser) callonIterateStmt1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIterateStmt1(stack["label"])
}

func (c *current) onReturnStmt1(expr any) (any, error) {
	return &ReturnStmt{
		BaseStatement: makeBaseStatement(c),
	}, nil
}

func (p *parser) callonReturnStmt1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReturnStmt1(stack["expr"])
}

func (c *current) onDeclareStmt1(text any) (any, error) {
	return &DeclareStmt{
		BaseStatement: makeBaseStatement(c),
	}, nil
}

func (p *parser) callonDeclareStmt1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeclareStmt1(stack["text"])
}

func (c *current) onSetVariableStmt1(assignments any) (any, error) {
	return &SetVariableStmt{
		BaseStatement: makeBaseStatement(c),
		Assignments:   assignments.([]VariableAssignment),
	}, nil
}

func (p *parser) callonSetVariableStmt1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSetVariableStmt1(stack["assignments"])
}

func (c *current) onVariableAssignmentList1(first, rest any) (any, error) {
	assignments := []VariableAssignment{first.(VariableAssignment)}
	for _, item := range rest.([]interface{}) {
		assignments = append(assignments, item.([]interface{})[3].(VariableAssignment))
	}
	return assignments, nil
}

func (p *parser) callonVariableAssignmentList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariableAssignmentList1(stack["first"], stack["rest"])
}

func (c *current) onVariableAssignmentItem1(scope, variable, operator, value any) (any, error) {
	return VariableAssignment{
		ScopeKeyword: toString(scope),
		VariableRef:  toString(variable),
		Operator:     toString(operator),
		Value:        toString(value),
	}, nil
}

func (p *parser) callonVariableAssignmentItem1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariableAssignmentItem1(stack["scope"], stack["variable"], stack["operator"], stack["value"])
}

func (c *current) onScopeKeyword1() (any, error) {
	return strings.ToUpper(string(c.text)), nil
}

func (p *parser) callonScopeKeyword1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScopeKeyword1()
}

func (c *current) onVariableReference2() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonVariableReference2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariableReference2()
}

func (c *current) onVariableReference11() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonVariableReference11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariableReference11()
}

func (c *current) onVariableReference15() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonVariableReference15() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariableReference15()
}

func (c *current) onVariableReference19() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonVariableReference19() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariableReference19()
}

func (c *current) onAssignmentOperator3() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonAssignmentOperator3() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignmentOperator3()
}

func (c *current) onGenericStmt1(kind, text any) (any, error) {
	return &GenericStmt{
		BaseStatement: makeBaseStatement(c),
	}, nil
}

func (p *parser) callonGenericStmt1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericStmt1(stack["kind"], stack["text"])
}

func (c *current) onConsumeUntilSemicolon1() (any, error) {
	return strings.TrimSpace(string(c.text)), nil
}

func (p *parser) callonConsumeUntilSemicolon1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConsumeUntilSemicolon1()
}

func (c *current) onConsumeUntilEND1() (any, error) {
	return strings.TrimSpace(string(c.text)), nil
}

func (p *parser) callonConsumeUntilEND1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConsumeUntilEND1()
}

func (c *current) onConsumeUntilTHEN1() (any, error) {
	return strings.TrimSpace(string(c.text)), nil
}

func (p *parser) callonConsumeUntilTHEN1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConsumeUntilTHEN1()
}

func (c *current) onConsumeUntilDO1() (any, error) {
	return strings.TrimSpace(string(c.text)), nil
}

func (p *parser) callonConsumeUntilDO1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConsumeUntilDO1()
}

func (c *current) onConsumeUntilWHEN1() (any, error) {
	return strings.TrimSpace(string(c.text)), nil
}

func (p *parser) callonConsumeUntilWHEN1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConsumeUntilWHEN1()
}

func (c *current) onConsumeUntilCommaOrSemicolon1() (any, error) {
	return strings.TrimSpace(string(c.text)), nil
}

func (p *parser) callonConsumeUntilCommaOrSemicolon1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConsumeUntilCommaOrSemicolon1()
}

func (c *current) onStatementList1(stmts any) (any, error) {
	var result []StatementAST
	for _, item := range stmts.([]interface{}) {
		if arr, ok := item.([]interface{}); ok && len(arr) > 0 {
			if stmt, ok := arr[0].(StatementAST); ok {
				result = append(result, stmt)
			}
		}
	}
	return result, nil
}

func (p *parser) callonStatementList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatementList1(stack["stmts"])
}

func (c *current) onParameterList1(first, rest any) (any, error) {
	params := []Parameter{first.(Parameter)}
	for _, item := range rest.([]interface{}) {
		if arr, ok := item.([]interface{}); ok && len(arr) > 3 {
			if param, ok := arr[3].(Parameter); ok {
				params = append(params, param)
			}
		}
	}
	return params, nil
}

func (p *parser) callonParameterList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParameterList1(stack["first"], stack["rest"])
}

func (c *current) onParameter1(mode, name, dataType any) (any, error) {
	return Parameter{
		Mode: toString(mode),
		Name: toString(name),
		Type: toString(dataType),
	}, nil
}

func (p *parser) callonParameter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParameter1(stack["mode"], stack["name"], stack["dataType"])
}

func (c *current) onParameterMode1() (any, error) {
	return strings.ToUpper(string(c.text)), nil
}

func (p *parser) callonParameterMode1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParameterMode1()
}

func (c *current) onVariableList1(first, rest any) (any, error) {
	vars := []string{toString(first)}
	for _, item := range rest.([]interface{}) {
		if arr, ok := item.([]interface{}); ok && len(arr) > 3 {
			vars = append(vars, toString(arr[3]))
		}
	}
	return vars, nil
}

func (p *parser) callonVariableList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariableList1(stack["first"], stack["rest"])
}

func (c *current) onTypeName1(baseType, params, modifiers any) (any, error) {
	return string(c.text), nil
}

func (p *parser) callonTypeName1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeName1(stack["baseType"], stack["params"], stack["modifiers"])
}

func (c *current) onIdentifierName1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName1()
}

func (c *current) onFunctionAttributes1(attribute any) (any, error) {
	return attribute, nil
}

func (p *parser) callonFunctionAttributes1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunctionAttributes1(stack["attribute"])
}

func (c *current) onFunctionAttribute27() (any, error) {
	return strings.ToUpper(string(c.text)), nil
}

func (p *parser) callonFunctionAttribute27() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunctionAttribute27()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expressions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//	input := "input"
//	stats := Stats{}
//	_, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//	if err != nil {
//	    log.Panicln(err)
//	}
//	b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//	if err != nil {
//	    log.Panicln(err)
//	}
//	fmt.Println(string(b))
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i any, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (any, error) {
	b, err := io.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (any, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]any

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        any
}

type choiceExpr struct {
	pos          position
	alternatives []any
}

type actionExpr struct {
	pos  position
	expr any
	run  func(*parser) (any, error)
}

type recoveryExpr struct {
	pos          position
	expr         any
	recoverExpr  any
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []any
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  any
}

type expr struct {
	pos  position
	expr any
}

type (
	andExpr        expr
	notExpr        expr
	zeroOrOneExpr  expr
	zeroOrMoreExpr expr
	oneOrMoreExpr  expr
)

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   any
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[any]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]any
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]any
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]any)
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr any) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]any, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) printIndent(mark string, s string) string {
	return p.print(strings.Repeat(" ", p.depth)+mark, s)
}

func (p *parser) in(s string) string {
	res := p.printIndent(">", s)
	p.depth++
	return res
}

func (p *parser) out(s string) string {
	p.depth--
	return p.printIndent("<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() any
}

var statePool = &sync.Pool{
	New: func() any { return make(storeDict) },
}

func (sd storeDict) Discard() {
	for k := range sd {
		delete(sd, k)
	}
	statePool.Put(sd)
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := statePool.Get().(storeDict)
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state.Discard()
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node any) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node any, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[any]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[any]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val any, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRuleWrap(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRuleMemoize(rule *rule) (any, bool) {
	res, ok := p.getMemoized(rule)
	if ok {
		p.restore(res.end)
		return res.v, res.b
	}

	startMark := p.pt
	val, ok := p.parseRule(rule)
	p.setMemoized(startMark, rule, resultTuple{val, ok, p.pt})

	return val, ok
}

func (p *parser) parseRuleWrap(rule *rule) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}
	var (
		val       any
		ok        bool
		startMark = p.pt
	)

	if p.memoize {
		val, ok = p.parseRuleMemoize(rule)
	} else {
		val, ok = p.parseRule(rule)
	}

	if ok && p.debug {
		p.printIndent("MATCH", string(p.sliceFrom(startMark)))
	}
	return val, ok
}

func (p *parser) parseRule(rule *rule) (any, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExprWrap(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExprWrap(expr any) (any, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	val, ok := p.parseExpr(expr)

	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr any) (any, bool) {
	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val any
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExprWrap(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.printIndent("MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExprWrap(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExprWrap(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExprWrap(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExprWrap(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExprWrap(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRuleWrap(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]any, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExprWrap(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExprWrap(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExprWrap(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
