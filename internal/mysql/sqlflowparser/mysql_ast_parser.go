// Code generated by pigeon; DO NOT EDIT.

package sqlflowparser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"sync"
	"unicode"
	"unicode/utf8"
)

// Helper function to create Position from pigeon position
func makePosition(pos position) Position {
	return Position{
		Line:   pos.line,
		Column: pos.col,
		Offset: pos.offset,
	}
}

// Helper function to create BaseStatement from pigeon context
func makeBaseStatement(c *current) BaseStatement {
	return BaseStatement{
		Pos:   makePosition(c.pos),
		Label: "",             // Will be set by Statement rule if label exists
		Text:  string(c.text), // Current matched text
	}
}

// Helper function to convert interface{} to []StatementAST
func toStatementList(v interface{}) []StatementAST {
	if v == nil {
		return nil
	}
	if list, ok := v.([]StatementAST); ok {
		return list
	}
	if stmt, ok := v.(StatementAST); ok {
		return []StatementAST{stmt}
	}
	return nil
}

// Helper function to convert interface{} to string
func toString(v interface{}) string {
	if v == nil {
		return ""
	}
	if s, ok := v.(string); ok {
		return s
	}
	if b, ok := v.([]byte); ok {
		return string(b)
	}
	return ""
}

// Helper function to convert interface{} to []Parameter
func toParameterList(v interface{}) []Parameter {
	if v == nil {
		return nil
	}
	if list, ok := v.([]Parameter); ok {
		return list
	}
	return nil
}

// Helper function to convert interface{} to []ElseIfClause
func toElseIfList(v interface{}) []ElseIfClause {
	if v == nil {
		return nil
	}
	if list, ok := v.([]ElseIfClause); ok {
		return list
	}
	// Handle []interface{} containing ElseIfClause elements
	if list, ok := v.([]interface{}); ok {
		var result []ElseIfClause
		for _, item := range list {
			if clause, ok := item.(ElseIfClause); ok {
				result = append(result, clause)
			}
		}
		return result
	}
	return nil
}

// Helper function to convert interface{} to []WhenClause
func toWhenList(v interface{}) []WhenClause {
	if v == nil {
		return nil
	}
	if list, ok := v.([]WhenClause); ok {
		return list
	}
	// Handle []interface{} containing WhenClause elements
	if list, ok := v.([]interface{}); ok {
		var result []WhenClause
		for _, item := range list {
			if clause, ok := item.(WhenClause); ok {
				result = append(result, clause)
			}
		}
		return result
	}
	return nil
}

var g = &grammar{
	rules: []*rule{
		{
			name: "Input",
			pos:  position{line: 109, col: 1, offset: 2581},
			expr: &actionExpr{
				pos: position{line: 109, col: 10, offset: 2590},
				run: (*parser).callonInput1,
				expr: &seqExpr{
					pos: position{line: 109, col: 10, offset: 2590},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 109, col: 10, offset: 2590},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 109, col: 12, offset: 2592},
							label: "stmt",
							expr: &ruleRefExpr{
								pos:  position{line: 109, col: 17, offset: 2597},
								name: "Statement",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 109, col: 27, offset: 2607},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "Statement",
			pos:  position{line: 114, col: 1, offset: 2714},
			expr: &actionExpr{
				pos: position{line: 114, col: 14, offset: 2727},
				run: (*parser).callonStatement1,
				expr: &seqExpr{
					pos: position{line: 114, col: 14, offset: 2727},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 114, col: 14, offset: 2727},
							label: "label",
							expr: &zeroOrOneExpr{
								pos: position{line: 114, col: 20, offset: 2733},
								expr: &ruleRefExpr{
									pos:  position{line: 114, col: 20, offset: 2733},
									name: "Label",
								},
							},
						},
						&notExpr{
							pos: position{line: 114, col: 27, offset: 2740},
							expr: &ruleRefExpr{
								pos:  position{line: 114, col: 28, offset: 2741},
								name: "ELSEIF",
							},
						},
						&notExpr{
							pos: position{line: 114, col: 35, offset: 2748},
							expr: &ruleRefExpr{
								pos:  position{line: 114, col: 36, offset: 2749},
								name: "ELSE",
							},
						},
						&notExpr{
							pos: position{line: 114, col: 41, offset: 2754},
							expr: &ruleRefExpr{
								pos:  position{line: 114, col: 42, offset: 2755},
								name: "END",
							},
						},
						&notExpr{
							pos: position{line: 114, col: 46, offset: 2759},
							expr: &ruleRefExpr{
								pos:  position{line: 114, col: 47, offset: 2760},
								name: "UNTIL",
							},
						},
						&notExpr{
							pos: position{line: 114, col: 53, offset: 2766},
							expr: &ruleRefExpr{
								pos:  position{line: 114, col: 54, offset: 2767},
								name: "WHEN",
							},
						},
						&labeledExpr{
							pos:   position{line: 114, col: 59, offset: 2772},
							label: "stmt",
							expr: &choiceExpr{
								pos: position{line: 114, col: 65, offset: 2778},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 114, col: 65, offset: 2778},
										name: "CreateProcedureStmt",
									},
									&ruleRefExpr{
										pos:  position{line: 114, col: 87, offset: 2800},
										name: "CreateFunctionStmt",
									},
									&ruleRefExpr{
										pos:  position{line: 114, col: 108, offset: 2821},
										name: "DeclareStmt",
									},
									&ruleRefExpr{
										pos:  position{line: 114, col: 122, offset: 2835},
										name: "IfStmt",
									},
									&ruleRefExpr{
										pos:  position{line: 114, col: 131, offset: 2844},
										name: "WhileStmt",
									},
									&ruleRefExpr{
										pos:  position{line: 114, col: 143, offset: 2856},
										name: "LoopStmt",
									},
									&ruleRefExpr{
										pos:  position{line: 114, col: 154, offset: 2867},
										name: "RepeatStmt",
									},
									&ruleRefExpr{
										pos:  position{line: 114, col: 167, offset: 2880},
										name: "CaseStmt",
									},
									&ruleRefExpr{
										pos:  position{line: 114, col: 178, offset: 2891},
										name: "BeginStmt",
									},
									&ruleRefExpr{
										pos:  position{line: 114, col: 190, offset: 2903},
										name: "LeaveStmt",
									},
									&ruleRefExpr{
										pos:  position{line: 114, col: 202, offset: 2915},
										name: "IterateStmt",
									},
									&ruleRefExpr{
										pos:  position{line: 114, col: 216, offset: 2929},
										name: "ReturnStmt",
									},
									&ruleRefExpr{
										pos:  position{line: 114, col: 229, offset: 2942},
										name: "GenericStmt",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 114, col: 242, offset: 2955},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "Label",
			pos:  position{line: 121, col: 1, offset: 3058},
			expr: &actionExpr{
				pos: position{line: 121, col: 10, offset: 3067},
				run: (*parser).callonLabel1,
				expr: &seqExpr{
					pos: position{line: 121, col: 10, offset: 3067},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 121, col: 10, offset: 3067},
							label: "label",
							expr: &ruleRefExpr{
								pos:  position{line: 121, col: 16, offset: 3073},
								name: "IdentifierName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 121, col: 31, offset: 3088},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 121, col: 33, offset: 3090},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&ruleRefExpr{
							pos:  position{line: 121, col: 37, offset: 3094},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "CREATE",
			pos:  position{line: 126, col: 1, offset: 3156},
			expr: &seqExpr{
				pos: position{line: 126, col: 11, offset: 3166},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 126, col: 11, offset: 3166},
						val:        "create",
						ignoreCase: true,
						want:       "\"CREATE\"i",
					},
					&notExpr{
						pos: position{line: 126, col: 21, offset: 3176},
						expr: &charClassMatcher{
							pos:        position{line: 126, col: 22, offset: 3177},
							val:        "[a-zA-Z0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "PROCEDURE",
			pos:  position{line: 127, col: 1, offset: 3190},
			expr: &seqExpr{
				pos: position{line: 127, col: 14, offset: 3203},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 127, col: 14, offset: 3203},
						val:        "procedure",
						ignoreCase: true,
						want:       "\"PROCEDURE\"i",
					},
					&notExpr{
						pos: position{line: 127, col: 27, offset: 3216},
						expr: &charClassMatcher{
							pos:        position{line: 127, col: 28, offset: 3217},
							val:        "[a-zA-Z0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "FUNCTION",
			pos:  position{line: 128, col: 1, offset: 3230},
			expr: &seqExpr{
				pos: position{line: 128, col: 13, offset: 3242},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 128, col: 13, offset: 3242},
						val:        "function",
						ignoreCase: true,
						want:       "\"FUNCTION\"i",
					},
					&notExpr{
						pos: position{line: 128, col: 25, offset: 3254},
						expr: &charClassMatcher{
							pos:        position{line: 128, col: 26, offset: 3255},
							val:        "[a-zA-Z0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "RETURNS",
			pos:  position{line: 129, col: 1, offset: 3268},
			expr: &seqExpr{
				pos: position{line: 129, col: 12, offset: 3279},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 129, col: 12, offset: 3279},
						val:        "returns",
						ignoreCase: true,
						want:       "\"RETURNS\"i",
					},
					&notExpr{
						pos: position{line: 129, col: 23, offset: 3290},
						expr: &charClassMatcher{
							pos:        position{line: 129, col: 24, offset: 3291},
							val:        "[a-zA-Z0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "DROP",
			pos:  position{line: 130, col: 1, offset: 3304},
			expr: &seqExpr{
				pos: position{line: 130, col: 9, offset: 3312},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 130, col: 9, offset: 3312},
						val:        "drop",
						ignoreCase: true,
						want:       "\"DROP\"i",
					},
					&notExpr{
						pos: position{line: 130, col: 17, offset: 3320},
						expr: &charClassMatcher{
							pos:        position{line: 130, col: 18, offset: 3321},
							val:        "[a-zA-Z0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "IF",
			pos:  position{line: 131, col: 1, offset: 3334},
			expr: &seqExpr{
				pos: position{line: 131, col: 7, offset: 3340},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 131, col: 7, offset: 3340},
						val:        "if",
						ignoreCase: true,
						want:       "\"IF\"i",
					},
					&notExpr{
						pos: position{line: 131, col: 13, offset: 3346},
						expr: &charClassMatcher{
							pos:        position{line: 131, col: 14, offset: 3347},
							val:        "[a-zA-Z0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "THEN",
			pos:  position{line: 132, col: 1, offset: 3360},
			expr: &seqExpr{
				pos: position{line: 132, col: 9, offset: 3368},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 132, col: 9, offset: 3368},
						val:        "then",
						ignoreCase: true,
						want:       "\"THEN\"i",
					},
					&notExpr{
						pos: position{line: 132, col: 17, offset: 3376},
						expr: &charClassMatcher{
							pos:        position{line: 132, col: 18, offset: 3377},
							val:        "[a-zA-Z0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "ELSEIF",
			pos:  position{line: 133, col: 1, offset: 3390},
			expr: &seqExpr{
				pos: position{line: 133, col: 11, offset: 3400},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 133, col: 11, offset: 3400},
						val:        "elseif",
						ignoreCase: true,
						want:       "\"ELSEIF\"i",
					},
					&notExpr{
						pos: position{line: 133, col: 21, offset: 3410},
						expr: &charClassMatcher{
							pos:        position{line: 133, col: 22, offset: 3411},
							val:        "[a-zA-Z0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "ELSE",
			pos:  position{line: 134, col: 1, offset: 3424},
			expr: &seqExpr{
				pos: position{line: 134, col: 9, offset: 3432},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 134, col: 9, offset: 3432},
						val:        "else",
						ignoreCase: true,
						want:       "\"ELSE\"i",
					},
					&notExpr{
						pos: position{line: 134, col: 17, offset: 3440},
						expr: &charClassMatcher{
							pos:        position{line: 134, col: 18, offset: 3441},
							val:        "[a-zA-Z0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "END",
			pos:  position{line: 135, col: 1, offset: 3454},
			expr: &seqExpr{
				pos: position{line: 135, col: 8, offset: 3461},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 135, col: 8, offset: 3461},
						val:        "end",
						ignoreCase: true,
						want:       "\"END\"i",
					},
					&notExpr{
						pos: position{line: 135, col: 15, offset: 3468},
						expr: &charClassMatcher{
							pos:        position{line: 135, col: 16, offset: 3469},
							val:        "[a-zA-Z0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "WHILE",
			pos:  position{line: 136, col: 1, offset: 3482},
			expr: &seqExpr{
				pos: position{line: 136, col: 10, offset: 3491},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 136, col: 10, offset: 3491},
						val:        "while",
						ignoreCase: true,
						want:       "\"WHILE\"i",
					},
					&notExpr{
						pos: position{line: 136, col: 19, offset: 3500},
						expr: &charClassMatcher{
							pos:        position{line: 136, col: 20, offset: 3501},
							val:        "[a-zA-Z0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "DO",
			pos:  position{line: 137, col: 1, offset: 3514},
			expr: &seqExpr{
				pos: position{line: 137, col: 7, offset: 3520},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 137, col: 7, offset: 3520},
						val:        "do",
						ignoreCase: true,
						want:       "\"DO\"i",
					},
					&notExpr{
						pos: position{line: 137, col: 13, offset: 3526},
						expr: &charClassMatcher{
							pos:        position{line: 137, col: 14, offset: 3527},
							val:        "[a-zA-Z0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "LOOP",
			pos:  position{line: 138, col: 1, offset: 3540},
			expr: &seqExpr{
				pos: position{line: 138, col: 9, offset: 3548},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 138, col: 9, offset: 3548},
						val:        "loop",
						ignoreCase: true,
						want:       "\"LOOP\"i",
					},
					&notExpr{
						pos: position{line: 138, col: 17, offset: 3556},
						expr: &charClassMatcher{
							pos:        position{line: 138, col: 18, offset: 3557},
							val:        "[a-zA-Z0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "REPEAT",
			pos:  position{line: 139, col: 1, offset: 3570},
			expr: &seqExpr{
				pos: position{line: 139, col: 11, offset: 3580},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 139, col: 11, offset: 3580},
						val:        "repeat",
						ignoreCase: true,
						want:       "\"REPEAT\"i",
					},
					&notExpr{
						pos: position{line: 139, col: 21, offset: 3590},
						expr: &charClassMatcher{
							pos:        position{line: 139, col: 22, offset: 3591},
							val:        "[a-zA-Z0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "UNTIL",
			pos:  position{line: 140, col: 1, offset: 3604},
			expr: &seqExpr{
				pos: position{line: 140, col: 10, offset: 3613},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 140, col: 10, offset: 3613},
						val:        "until",
						ignoreCase: true,
						want:       "\"UNTIL\"i",
					},
					&notExpr{
						pos: position{line: 140, col: 19, offset: 3622},
						expr: &charClassMatcher{
							pos:        position{line: 140, col: 20, offset: 3623},
							val:        "[a-zA-Z0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "CASE",
			pos:  position{line: 141, col: 1, offset: 3636},
			expr: &seqExpr{
				pos: position{line: 141, col: 9, offset: 3644},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 141, col: 9, offset: 3644},
						val:        "case",
						ignoreCase: true,
						want:       "\"CASE\"i",
					},
					&notExpr{
						pos: position{line: 141, col: 17, offset: 3652},
						expr: &charClassMatcher{
							pos:        position{line: 141, col: 18, offset: 3653},
							val:        "[a-zA-Z0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "WHEN",
			pos:  position{line: 142, col: 1, offset: 3666},
			expr: &seqExpr{
				pos: position{line: 142, col: 9, offset: 3674},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 142, col: 9, offset: 3674},
						val:        "when",
						ignoreCase: true,
						want:       "\"WHEN\"i",
					},
					&notExpr{
						pos: position{line: 142, col: 17, offset: 3682},
						expr: &charClassMatcher{
							pos:        position{line: 142, col: 18, offset: 3683},
							val:        "[a-zA-Z0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "BEGIN",
			pos:  position{line: 143, col: 1, offset: 3696},
			expr: &seqExpr{
				pos: position{line: 143, col: 10, offset: 3705},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 143, col: 10, offset: 3705},
						val:        "begin",
						ignoreCase: true,
						want:       "\"BEGIN\"i",
					},
					&notExpr{
						pos: position{line: 143, col: 19, offset: 3714},
						expr: &charClassMatcher{
							pos:        position{line: 143, col: 20, offset: 3715},
							val:        "[a-zA-Z0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "LEAVE",
			pos:  position{line: 144, col: 1, offset: 3728},
			expr: &seqExpr{
				pos: position{line: 144, col: 10, offset: 3737},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 144, col: 10, offset: 3737},
						val:        "leave",
						ignoreCase: true,
						want:       "\"LEAVE\"i",
					},
					&notExpr{
						pos: position{line: 144, col: 19, offset: 3746},
						expr: &charClassMatcher{
							pos:        position{line: 144, col: 20, offset: 3747},
							val:        "[a-zA-Z0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "ITERATE",
			pos:  position{line: 145, col: 1, offset: 3760},
			expr: &seqExpr{
				pos: position{line: 145, col: 12, offset: 3771},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 145, col: 12, offset: 3771},
						val:        "iterate",
						ignoreCase: true,
						want:       "\"ITERATE\"i",
					},
					&notExpr{
						pos: position{line: 145, col: 23, offset: 3782},
						expr: &charClassMatcher{
							pos:        position{line: 145, col: 24, offset: 3783},
							val:        "[a-zA-Z0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "RETURN",
			pos:  position{line: 146, col: 1, offset: 3796},
			expr: &seqExpr{
				pos: position{line: 146, col: 11, offset: 3806},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 146, col: 11, offset: 3806},
						val:        "return",
						ignoreCase: true,
						want:       "\"RETURN\"i",
					},
					&notExpr{
						pos: position{line: 146, col: 21, offset: 3816},
						expr: &charClassMatcher{
							pos:        position{line: 146, col: 22, offset: 3817},
							val:        "[a-zA-Z0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "DECLARE",
			pos:  position{line: 147, col: 1, offset: 3830},
			expr: &seqExpr{
				pos: position{line: 147, col: 12, offset: 3841},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 147, col: 12, offset: 3841},
						val:        "declare",
						ignoreCase: true,
						want:       "\"DECLARE\"i",
					},
					&notExpr{
						pos: position{line: 147, col: 23, offset: 3852},
						expr: &charClassMatcher{
							pos:        position{line: 147, col: 24, offset: 3853},
							val:        "[a-zA-Z0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "IN",
			pos:  position{line: 148, col: 1, offset: 3866},
			expr: &seqExpr{
				pos: position{line: 148, col: 7, offset: 3872},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 148, col: 7, offset: 3872},
						val:        "in",
						ignoreCase: true,
						want:       "\"IN\"i",
					},
					&notExpr{
						pos: position{line: 148, col: 13, offset: 3878},
						expr: &charClassMatcher{
							pos:        position{line: 148, col: 14, offset: 3879},
							val:        "[a-zA-Z0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "OUT",
			pos:  position{line: 149, col: 1, offset: 3892},
			expr: &seqExpr{
				pos: position{line: 149, col: 8, offset: 3899},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 149, col: 8, offset: 3899},
						val:        "out",
						ignoreCase: true,
						want:       "\"OUT\"i",
					},
					&notExpr{
						pos: position{line: 149, col: 15, offset: 3906},
						expr: &charClassMatcher{
							pos:        position{line: 149, col: 16, offset: 3907},
							val:        "[a-zA-Z0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "INOUT",
			pos:  position{line: 150, col: 1, offset: 3920},
			expr: &seqExpr{
				pos: position{line: 150, col: 10, offset: 3929},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 150, col: 10, offset: 3929},
						val:        "inout",
						ignoreCase: true,
						want:       "\"INOUT\"i",
					},
					&notExpr{
						pos: position{line: 150, col: 19, offset: 3938},
						expr: &charClassMatcher{
							pos:        position{line: 150, col: 20, offset: 3939},
							val:        "[a-zA-Z0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "UNSIGNED",
			pos:  position{line: 151, col: 1, offset: 3952},
			expr: &seqExpr{
				pos: position{line: 151, col: 13, offset: 3964},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 151, col: 13, offset: 3964},
						val:        "unsigned",
						ignoreCase: true,
						want:       "\"UNSIGNED\"i",
					},
					&notExpr{
						pos: position{line: 151, col: 25, offset: 3976},
						expr: &charClassMatcher{
							pos:        position{line: 151, col: 26, offset: 3977},
							val:        "[a-zA-Z0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "SIGNED",
			pos:  position{line: 152, col: 1, offset: 3990},
			expr: &seqExpr{
				pos: position{line: 152, col: 11, offset: 4000},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 152, col: 11, offset: 4000},
						val:        "signed",
						ignoreCase: true,
						want:       "\"SIGNED\"i",
					},
					&notExpr{
						pos: position{line: 152, col: 21, offset: 4010},
						expr: &charClassMatcher{
							pos:        position{line: 152, col: 22, offset: 4011},
							val:        "[a-zA-Z0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "ZEROFILL",
			pos:  position{line: 153, col: 1, offset: 4024},
			expr: &seqExpr{
				pos: position{line: 153, col: 13, offset: 4036},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 153, col: 13, offset: 4036},
						val:        "zerofill",
						ignoreCase: true,
						want:       "\"ZEROFILL\"i",
					},
					&notExpr{
						pos: position{line: 153, col: 25, offset: 4048},
						expr: &charClassMatcher{
							pos:        position{line: 153, col: 26, offset: 4049},
							val:        "[a-zA-Z0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "DETERMINISTIC",
			pos:  position{line: 154, col: 1, offset: 4062},
			expr: &seqExpr{
				pos: position{line: 154, col: 18, offset: 4079},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 154, col: 18, offset: 4079},
						val:        "deterministic",
						ignoreCase: true,
						want:       "\"DETERMINISTIC\"i",
					},
					&notExpr{
						pos: position{line: 154, col: 35, offset: 4096},
						expr: &charClassMatcher{
							pos:        position{line: 154, col: 36, offset: 4097},
							val:        "[a-zA-Z0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "NOT",
			pos:  position{line: 155, col: 1, offset: 4110},
			expr: &seqExpr{
				pos: position{line: 155, col: 8, offset: 4117},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 155, col: 8, offset: 4117},
						val:        "not",
						ignoreCase: true,
						want:       "\"NOT\"i",
					},
					&notExpr{
						pos: position{line: 155, col: 15, offset: 4124},
						expr: &charClassMatcher{
							pos:        position{line: 155, col: 16, offset: 4125},
							val:        "[a-zA-Z0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "READS",
			pos:  position{line: 156, col: 1, offset: 4138},
			expr: &seqExpr{
				pos: position{line: 156, col: 10, offset: 4147},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 156, col: 10, offset: 4147},
						val:        "reads",
						ignoreCase: true,
						want:       "\"READS\"i",
					},
					&notExpr{
						pos: position{line: 156, col: 19, offset: 4156},
						expr: &charClassMatcher{
							pos:        position{line: 156, col: 20, offset: 4157},
							val:        "[a-zA-Z0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "SQL",
			pos:  position{line: 157, col: 1, offset: 4170},
			expr: &seqExpr{
				pos: position{line: 157, col: 8, offset: 4177},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 157, col: 8, offset: 4177},
						val:        "sql",
						ignoreCase: true,
						want:       "\"SQL\"i",
					},
					&notExpr{
						pos: position{line: 157, col: 15, offset: 4184},
						expr: &charClassMatcher{
							pos:        position{line: 157, col: 16, offset: 4185},
							val:        "[a-zA-Z0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "DATA",
			pos:  position{line: 158, col: 1, offset: 4198},
			expr: &seqExpr{
				pos: position{line: 158, col: 9, offset: 4206},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 158, col: 9, offset: 4206},
						val:        "data",
						ignoreCase: true,
						want:       "\"DATA\"i",
					},
					&notExpr{
						pos: position{line: 158, col: 17, offset: 4214},
						expr: &charClassMatcher{
							pos:        position{line: 158, col: 18, offset: 4215},
							val:        "[a-zA-Z0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "MODIFIES",
			pos:  position{line: 159, col: 1, offset: 4228},
			expr: &seqExpr{
				pos: position{line: 159, col: 13, offset: 4240},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 159, col: 13, offset: 4240},
						val:        "modifies",
						ignoreCase: true,
						want:       "\"MODIFIES\"i",
					},
					&notExpr{
						pos: position{line: 159, col: 25, offset: 4252},
						expr: &charClassMatcher{
							pos:        position{line: 159, col: 26, offset: 4253},
							val:        "[a-zA-Z0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "NO",
			pos:  position{line: 160, col: 1, offset: 4266},
			expr: &seqExpr{
				pos: position{line: 160, col: 7, offset: 4272},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 160, col: 7, offset: 4272},
						val:        "no",
						ignoreCase: true,
						want:       "\"NO\"i",
					},
					&notExpr{
						pos: position{line: 160, col: 13, offset: 4278},
						expr: &charClassMatcher{
							pos:        position{line: 160, col: 14, offset: 4279},
							val:        "[a-zA-Z0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "CONTAINS",
			pos:  position{line: 161, col: 1, offset: 4292},
			expr: &seqExpr{
				pos: position{line: 161, col: 13, offset: 4304},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 161, col: 13, offset: 4304},
						val:        "contains",
						ignoreCase: true,
						want:       "\"CONTAINS\"i",
					},
					&notExpr{
						pos: position{line: 161, col: 25, offset: 4316},
						expr: &charClassMatcher{
							pos:        position{line: 161, col: 26, offset: 4317},
							val:        "[a-zA-Z0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "SECURITY",
			pos:  position{line: 162, col: 1, offset: 4330},
			expr: &seqExpr{
				pos: position{line: 162, col: 13, offset: 4342},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 162, col: 13, offset: 4342},
						val:        "security",
						ignoreCase: true,
						want:       "\"SECURITY\"i",
					},
					&notExpr{
						pos: position{line: 162, col: 25, offset: 4354},
						expr: &charClassMatcher{
							pos:        position{line: 162, col: 26, offset: 4355},
							val:        "[a-zA-Z0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "DEFINER",
			pos:  position{line: 163, col: 1, offset: 4368},
			expr: &seqExpr{
				pos: position{line: 163, col: 12, offset: 4379},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 163, col: 12, offset: 4379},
						val:        "definer",
						ignoreCase: true,
						want:       "\"DEFINER\"i",
					},
					&notExpr{
						pos: position{line: 163, col: 23, offset: 4390},
						expr: &charClassMatcher{
							pos:        position{line: 163, col: 24, offset: 4391},
							val:        "[a-zA-Z0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "INVOKER",
			pos:  position{line: 164, col: 1, offset: 4404},
			expr: &seqExpr{
				pos: position{line: 164, col: 12, offset: 4415},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 164, col: 12, offset: 4415},
						val:        "invoker",
						ignoreCase: true,
						want:       "\"INVOKER\"i",
					},
					&notExpr{
						pos: position{line: 164, col: 23, offset: 4426},
						expr: &charClassMatcher{
							pos:        position{line: 164, col: 24, offset: 4427},
							val:        "[a-zA-Z0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "CreateProcedureStmt",
			pos:  position{line: 167, col: 1, offset: 4461},
			expr: &actionExpr{
				pos: position{line: 167, col: 24, offset: 4484},
				run: (*parser).callonCreateProcedureStmt1,
				expr: &seqExpr{
					pos: position{line: 167, col: 24, offset: 4484},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 167, col: 24, offset: 4484},
							name: "CREATE",
						},
						&ruleRefExpr{
							pos:  position{line: 167, col: 31, offset: 4491},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 167, col: 33, offset: 4493},
							name: "PROCEDURE",
						},
						&ruleRefExpr{
							pos:  position{line: 167, col: 43, offset: 4503},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 167, col: 45, offset: 4505},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 167, col: 50, offset: 4510},
								name: "IdentifierName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 167, col: 65, offset: 4525},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 167, col: 67, offset: 4527},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 167, col: 71, offset: 4531},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 167, col: 73, offset: 4533},
							label: "params",
							expr: &zeroOrOneExpr{
								pos: position{line: 167, col: 80, offset: 4540},
								expr: &ruleRefExpr{
									pos:  position{line: 167, col: 80, offset: 4540},
									name: "ParameterList",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 167, col: 95, offset: 4555},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 167, col: 97, offset: 4557},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
						&ruleRefExpr{
							pos:  position{line: 167, col: 101, offset: 4561},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 167, col: 103, offset: 4563},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 167, col: 108, offset: 4568},
								name: "Statement",
							},
						},
					},
				},
			},
		},
		{
			name: "CreateFunctionStmt",
			pos:  position{line: 177, col: 1, offset: 4821},
			expr: &actionExpr{
				pos: position{line: 177, col: 23, offset: 4843},
				run: (*parser).callonCreateFunctionStmt1,
				expr: &seqExpr{
					pos: position{line: 177, col: 23, offset: 4843},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 177, col: 23, offset: 4843},
							name: "CREATE",
						},
						&ruleRefExpr{
							pos:  position{line: 177, col: 30, offset: 4850},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 177, col: 32, offset: 4852},
							name: "FUNCTION",
						},
						&ruleRefExpr{
							pos:  position{line: 177, col: 41, offset: 4861},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 177, col: 43, offset: 4863},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 177, col: 48, offset: 4868},
								name: "IdentifierName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 177, col: 63, offset: 4883},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 177, col: 65, offset: 4885},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 177, col: 69, offset: 4889},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 177, col: 71, offset: 4891},
							label: "params",
							expr: &zeroOrOneExpr{
								pos: position{line: 177, col: 78, offset: 4898},
								expr: &ruleRefExpr{
									pos:  position{line: 177, col: 78, offset: 4898},
									name: "ParameterList",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 177, col: 93, offset: 4913},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 177, col: 95, offset: 4915},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
						&ruleRefExpr{
							pos:  position{line: 177, col: 99, offset: 4919},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 177, col: 101, offset: 4921},
							name: "RETURNS",
						},
						&ruleRefExpr{
							pos:  position{line: 177, col: 109, offset: 4929},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 177, col: 111, offset: 4931},
							label: "returnType",
							expr: &ruleRefExpr{
								pos:  position{line: 177, col: 122, offset: 4942},
								name: "TypeName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 177, col: 131, offset: 4951},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 177, col: 133, offset: 4953},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 177, col: 144, offset: 4964},
								expr: &ruleRefExpr{
									pos:  position{line: 177, col: 144, offset: 4964},
									name: "FunctionAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 177, col: 164, offset: 4984},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 177, col: 166, offset: 4986},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 177, col: 171, offset: 4991},
								name: "Statement",
							},
						},
					},
				},
			},
		},
		{
			name: "IfStmt",
			pos:  position{line: 188, col: 1, offset: 5284},
			expr: &actionExpr{
				pos: position{line: 188, col: 11, offset: 5294},
				run: (*parser).callonIfStmt1,
				expr: &seqExpr{
					pos: position{line: 188, col: 11, offset: 5294},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 188, col: 11, offset: 5294},
							name: "IF",
						},
						&ruleRefExpr{
							pos:  position{line: 188, col: 14, offset: 5297},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 188, col: 16, offset: 5299},
							label: "condition",
							expr: &ruleRefExpr{
								pos:  position{line: 188, col: 26, offset: 5309},
								name: "ConsumeUntilTHEN",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 188, col: 43, offset: 5326},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 188, col: 45, offset: 5328},
							name: "THEN",
						},
						&ruleRefExpr{
							pos:  position{line: 188, col: 50, offset: 5333},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 188, col: 52, offset: 5335},
							label: "thenStmts",
							expr: &ruleRefExpr{
								pos:  position{line: 188, col: 62, offset: 5345},
								name: "StatementList",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 188, col: 76, offset: 5359},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 188, col: 78, offset: 5361},
							label: "elseifs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 188, col: 86, offset: 5369},
								expr: &ruleRefExpr{
									pos:  position{line: 188, col: 86, offset: 5369},
									name: "ElseIfClause",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 188, col: 100, offset: 5383},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 188, col: 102, offset: 5385},
							label: "elseClause",
							expr: &zeroOrOneExpr{
								pos: position{line: 188, col: 113, offset: 5396},
								expr: &ruleRefExpr{
									pos:  position{line: 188, col: 113, offset: 5396},
									name: "ElseClause",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 188, col: 125, offset: 5408},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 188, col: 127, offset: 5410},
							name: "END",
						},
						&ruleRefExpr{
							pos:  position{line: 188, col: 131, offset: 5414},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 188, col: 133, offset: 5416},
							name: "IF",
						},
					},
				},
			},
		},
		{
			name: "ElseIfClause",
			pos:  position{line: 199, col: 1, offset: 5709},
			expr: &actionExpr{
				pos: position{line: 199, col: 17, offset: 5725},
				run: (*parser).callonElseIfClause1,
				expr: &seqExpr{
					pos: position{line: 199, col: 17, offset: 5725},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 199, col: 17, offset: 5725},
							name: "ELSEIF",
						},
						&ruleRefExpr{
							pos:  position{line: 199, col: 24, offset: 5732},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 199, col: 26, offset: 5734},
							label: "condition",
							expr: &ruleRefExpr{
								pos:  position{line: 199, col: 36, offset: 5744},
								name: "ConsumeUntilTHEN",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 199, col: 53, offset: 5761},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 199, col: 55, offset: 5763},
							name: "THEN",
						},
						&ruleRefExpr{
							pos:  position{line: 199, col: 60, offset: 5768},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 199, col: 62, offset: 5770},
							label: "stmts",
							expr: &ruleRefExpr{
								pos:  position{line: 199, col: 68, offset: 5776},
								name: "StatementList",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 199, col: 82, offset: 5790},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "ElseClause",
			pos:  position{line: 208, col: 1, offset: 5983},
			expr: &actionExpr{
				pos: position{line: 208, col: 15, offset: 5997},
				run: (*parser).callonElseClause1,
				expr: &seqExpr{
					pos: position{line: 208, col: 15, offset: 5997},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 208, col: 15, offset: 5997},
							name: "ELSE",
						},
						&ruleRefExpr{
							pos:  position{line: 208, col: 20, offset: 6002},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 208, col: 22, offset: 6004},
							label: "stmts",
							expr: &ruleRefExpr{
								pos:  position{line: 208, col: 28, offset: 6010},
								name: "StatementList",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 208, col: 42, offset: 6024},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "WhileStmt",
			pos:  position{line: 213, col: 1, offset: 6089},
			expr: &actionExpr{
				pos: position{line: 213, col: 14, offset: 6102},
				run: (*parser).callonWhileStmt1,
				expr: &seqExpr{
					pos: position{line: 213, col: 14, offset: 6102},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 213, col: 14, offset: 6102},
							name: "WHILE",
						},
						&ruleRefExpr{
							pos:  position{line: 213, col: 20, offset: 6108},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 213, col: 22, offset: 6110},
							label: "condition",
							expr: &ruleRefExpr{
								pos:  position{line: 213, col: 32, offset: 6120},
								name: "ConsumeUntilDO",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 213, col: 47, offset: 6135},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 213, col: 49, offset: 6137},
							name: "DO",
						},
						&ruleRefExpr{
							pos:  position{line: 213, col: 52, offset: 6140},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 213, col: 54, offset: 6142},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 213, col: 59, offset: 6147},
								name: "StatementList",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 213, col: 73, offset: 6161},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 213, col: 75, offset: 6163},
							name: "END",
						},
						&ruleRefExpr{
							pos:  position{line: 213, col: 79, offset: 6167},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 213, col: 81, offset: 6169},
							name: "WHILE",
						},
					},
				},
			},
		},
		{
			name: "LoopStmt",
			pos:  position{line: 222, col: 1, offset: 6366},
			expr: &actionExpr{
				pos: position{line: 222, col: 13, offset: 6378},
				run: (*parser).callonLoopStmt1,
				expr: &seqExpr{
					pos: position{line: 222, col: 13, offset: 6378},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 222, col: 13, offset: 6378},
							name: "LOOP",
						},
						&ruleRefExpr{
							pos:  position{line: 222, col: 18, offset: 6383},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 222, col: 20, offset: 6385},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 222, col: 25, offset: 6390},
								name: "StatementList",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 222, col: 39, offset: 6404},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 222, col: 41, offset: 6406},
							name: "END",
						},
						&ruleRefExpr{
							pos:  position{line: 222, col: 45, offset: 6410},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 222, col: 47, offset: 6412},
							name: "LOOP",
						},
					},
				},
			},
		},
		{
			name: "RepeatStmt",
			pos:  position{line: 230, col: 1, offset: 6566},
			expr: &actionExpr{
				pos: position{line: 230, col: 15, offset: 6580},
				run: (*parser).callonRepeatStmt1,
				expr: &seqExpr{
					pos: position{line: 230, col: 15, offset: 6580},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 230, col: 15, offset: 6580},
							name: "REPEAT",
						},
						&ruleRefExpr{
							pos:  position{line: 230, col: 22, offset: 6587},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 230, col: 24, offset: 6589},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 230, col: 29, offset: 6594},
								name: "StatementList",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 230, col: 43, offset: 6608},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 230, col: 45, offset: 6610},
							name: "UNTIL",
						},
						&ruleRefExpr{
							pos:  position{line: 230, col: 51, offset: 6616},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 230, col: 53, offset: 6618},
							label: "condition",
							expr: &ruleRefExpr{
								pos:  position{line: 230, col: 63, offset: 6628},
								name: "ConsumeUntilEND",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 230, col: 79, offset: 6644},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 230, col: 81, offset: 6646},
							name: "END",
						},
						&ruleRefExpr{
							pos:  position{line: 230, col: 85, offset: 6650},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 230, col: 87, offset: 6652},
							name: "REPEAT",
						},
					},
				},
			},
		},
		{
			name: "CaseStmt",
			pos:  position{line: 239, col: 1, offset: 6851},
			expr: &actionExpr{
				pos: position{line: 239, col: 13, offset: 6863},
				run: (*parser).callonCaseStmt1,
				expr: &seqExpr{
					pos: position{line: 239, col: 13, offset: 6863},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 239, col: 13, offset: 6863},
							name: "CASE",
						},
						&ruleRefExpr{
							pos:  position{line: 239, col: 18, offset: 6868},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 239, col: 20, offset: 6870},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 239, col: 25, offset: 6875},
								name: "ConsumeUntilWHEN",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 239, col: 42, offset: 6892},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 239, col: 44, offset: 6894},
							label: "whens",
							expr: &oneOrMoreExpr{
								pos: position{line: 239, col: 50, offset: 6900},
								expr: &ruleRefExpr{
									pos:  position{line: 239, col: 50, offset: 6900},
									name: "WhenClause",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 239, col: 62, offset: 6912},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 239, col: 64, offset: 6914},
							label: "elseClause",
							expr: &zeroOrOneExpr{
								pos: position{line: 239, col: 75, offset: 6925},
								expr: &ruleRefExpr{
									pos:  position{line: 239, col: 75, offset: 6925},
									name: "ElseClause",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 239, col: 87, offset: 6937},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 239, col: 89, offset: 6939},
							name: "END",
						},
						&ruleRefExpr{
							pos:  position{line: 239, col: 93, offset: 6943},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 239, col: 95, offset: 6945},
							name: "CASE",
						},
					},
				},
			},
		},
		{
			name: "WhenClause",
			pos:  position{line: 249, col: 1, offset: 7180},
			expr: &actionExpr{
				pos: position{line: 249, col: 15, offset: 7194},
				run: (*parser).callonWhenClause1,
				expr: &seqExpr{
					pos: position{line: 249, col: 15, offset: 7194},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 249, col: 15, offset: 7194},
							name: "WHEN",
						},
						&ruleRefExpr{
							pos:  position{line: 249, col: 20, offset: 7199},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 249, col: 22, offset: 7201},
							label: "condition",
							expr: &ruleRefExpr{
								pos:  position{line: 249, col: 32, offset: 7211},
								name: "ConsumeUntilTHEN",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 249, col: 49, offset: 7228},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 249, col: 51, offset: 7230},
							name: "THEN",
						},
						&ruleRefExpr{
							pos:  position{line: 249, col: 56, offset: 7235},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 249, col: 58, offset: 7237},
							label: "stmts",
							expr: &ruleRefExpr{
								pos:  position{line: 249, col: 64, offset: 7243},
								name: "StatementList",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 249, col: 78, offset: 7257},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "BeginStmt",
			pos:  position{line: 258, col: 1, offset: 7454},
			expr: &actionExpr{
				pos: position{line: 258, col: 14, offset: 7467},
				run: (*parser).callonBeginStmt1,
				expr: &seqExpr{
					pos: position{line: 258, col: 14, offset: 7467},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 258, col: 14, offset: 7467},
							name: "BEGIN",
						},
						&ruleRefExpr{
							pos:  position{line: 258, col: 20, offset: 7473},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 258, col: 22, offset: 7475},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 258, col: 27, offset: 7480},
								name: "StatementList",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 258, col: 41, offset: 7494},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 258, col: 43, offset: 7496},
							name: "END",
						},
					},
				},
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 266, col: 1, offset: 7648},
			expr: &choiceExpr{
				pos: position{line: 266, col: 17, offset: 7664},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 266, col: 17, offset: 7664},
						name: "SingleQuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 266, col: 38, offset: 7685},
						name: "DoubleQuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 266, col: 59, offset: 7706},
						name: "BacktickString",
					},
				},
			},
		},
		{
			name: "SingleQuotedString",
			pos:  position{line: 269, col: 1, offset: 7767},
			expr: &actionExpr{
				pos: position{line: 269, col: 23, offset: 7789},
				run: (*parser).callonSingleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 269, col: 23, offset: 7789},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 269, col: 23, offset: 7789},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&labeledExpr{
							pos:   position{line: 269, col: 27, offset: 7793},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 269, col: 35, offset: 7801},
								expr: &ruleRefExpr{
									pos:  position{line: 269, col: 35, offset: 7801},
									name: "SingleQuoteContent",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 269, col: 55, offset: 7821},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteContent",
			pos:  position{line: 279, col: 1, offset: 8050},
			expr: &choiceExpr{
				pos: position{line: 279, col: 23, offset: 8072},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 279, col: 23, offset: 8072},
						run: (*parser).callonSingleQuoteContent2,
						expr: &litMatcher{
							pos:        position{line: 279, col: 23, offset: 8072},
							val:        "''",
							ignoreCase: false,
							want:       "\"''\"",
						},
					},
					&actionExpr{
						pos: position{line: 280, col: 22, offset: 8130},
						run: (*parser).callonSingleQuoteContent4,
						expr: &litMatcher{
							pos:        position{line: 280, col: 22, offset: 8130},
							val:        "\\'",
							ignoreCase: false,
							want:       "\"\\\\'\"",
						},
					},
					&actionExpr{
						pos: position{line: 281, col: 22, offset: 8190},
						run: (*parser).callonSingleQuoteContent6,
						expr: &litMatcher{
							pos:        position{line: 281, col: 22, offset: 8190},
							val:        "\\n",
							ignoreCase: false,
							want:       "\"\\\\n\"",
						},
					},
					&actionExpr{
						pos: position{line: 282, col: 22, offset: 8249},
						run: (*parser).callonSingleQuoteContent8,
						expr: &litMatcher{
							pos:        position{line: 282, col: 22, offset: 8249},
							val:        "\\\\",
							ignoreCase: false,
							want:       "\"\\\\\\\\\"",
						},
					},
					&actionExpr{
						pos: position{line: 283, col: 22, offset: 8310},
						run: (*parser).callonSingleQuoteContent10,
						expr: &charClassMatcher{
							pos:        position{line: 283, col: 22, offset: 8310},
							val:        "[^'\\\\]",
							chars:      []rune{'\'', '\\'},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedString",
			pos:  position{line: 286, col: 1, offset: 8386},
			expr: &actionExpr{
				pos: position{line: 286, col: 23, offset: 8408},
				run: (*parser).callonDoubleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 286, col: 23, offset: 8408},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 286, col: 23, offset: 8408},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 286, col: 27, offset: 8412},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 286, col: 35, offset: 8420},
								expr: &ruleRefExpr{
									pos:  position{line: 286, col: 35, offset: 8420},
									name: "DoubleQuoteContent",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 286, col: 55, offset: 8440},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteContent",
			pos:  position{line: 296, col: 1, offset: 8667},
			expr: &choiceExpr{
				pos: position{line: 296, col: 23, offset: 8689},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 296, col: 23, offset: 8689},
						run: (*parser).callonDoubleQuoteContent2,
						expr: &litMatcher{
							pos:        position{line: 296, col: 23, offset: 8689},
							val:        "\"\"",
							ignoreCase: false,
							want:       "\"\\\"\\\"\"",
						},
					},
					&actionExpr{
						pos: position{line: 297, col: 22, offset: 8751},
						run: (*parser).callonDoubleQuoteContent4,
						expr: &litMatcher{
							pos:        position{line: 297, col: 22, offset: 8751},
							val:        "\\\"",
							ignoreCase: false,
							want:       "\"\\\\\\\"\"",
						},
					},
					&actionExpr{
						pos: position{line: 298, col: 22, offset: 8813},
						run: (*parser).callonDoubleQuoteContent6,
						expr: &litMatcher{
							pos:        position{line: 298, col: 22, offset: 8813},
							val:        "\\n",
							ignoreCase: false,
							want:       "\"\\\\n\"",
						},
					},
					&actionExpr{
						pos: position{line: 299, col: 22, offset: 8872},
						run: (*parser).callonDoubleQuoteContent8,
						expr: &litMatcher{
							pos:        position{line: 299, col: 22, offset: 8872},
							val:        "\\\\",
							ignoreCase: false,
							want:       "\"\\\\\\\\\"",
						},
					},
					&actionExpr{
						pos: position{line: 300, col: 22, offset: 8933},
						run: (*parser).callonDoubleQuoteContent10,
						expr: &charClassMatcher{
							pos:        position{line: 300, col: 22, offset: 8933},
							val:        "[^\"\\\\]",
							chars:      []rune{'"', '\\'},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
		},
		{
			name: "BacktickString",
			pos:  position{line: 302, col: 1, offset: 8964},
			expr: &actionExpr{
				pos: position{line: 302, col: 19, offset: 8982},
				run: (*parser).callonBacktickString1,
				expr: &seqExpr{
					pos: position{line: 302, col: 19, offset: 8982},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 302, col: 19, offset: 8982},
							val:        "`",
							ignoreCase: false,
							want:       "\"`\"",
						},
						&labeledExpr{
							pos:   position{line: 302, col: 23, offset: 8986},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 302, col: 31, offset: 8994},
								expr: &ruleRefExpr{
									pos:  position{line: 302, col: 31, offset: 8994},
									name: "BacktickContent",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 302, col: 48, offset: 9011},
							val:        "`",
							ignoreCase: false,
							want:       "\"`\"",
						},
					},
				},
			},
		},
		{
			name: "BacktickContent",
			pos:  position{line: 312, col: 1, offset: 9238},
			expr: &choiceExpr{
				pos: position{line: 312, col: 20, offset: 9257},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 312, col: 20, offset: 9257},
						run: (*parser).callonBacktickContent2,
						expr: &litMatcher{
							pos:        position{line: 312, col: 20, offset: 9257},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
					},
					&actionExpr{
						pos: position{line: 312, col: 56, offset: 9293},
						run: (*parser).callonBacktickContent4,
						expr: &charClassMatcher{
							pos:        position{line: 312, col: 56, offset: 9293},
							val:        "[^`]",
							chars:      []rune{'`'},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
		},
		{
			name: "Comment",
			pos:  position{line: 315, col: 1, offset: 9334},
			expr: &choiceExpr{
				pos: position{line: 315, col: 12, offset: 9345},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 315, col: 12, offset: 9345},
						name: "LineComment",
					},
					&ruleRefExpr{
						pos:  position{line: 315, col: 26, offset: 9359},
						name: "BlockComment",
					},
				},
			},
		},
		{
			name: "LineComment",
			pos:  position{line: 317, col: 1, offset: 9373},
			expr: &actionExpr{
				pos: position{line: 317, col: 16, offset: 9388},
				run: (*parser).callonLineComment1,
				expr: &seqExpr{
					pos: position{line: 317, col: 16, offset: 9388},
					exprs: []any{
						&choiceExpr{
							pos: position{line: 317, col: 18, offset: 9390},
							alternatives: []any{
								&seqExpr{
									pos: position{line: 317, col: 18, offset: 9390},
									exprs: []any{
										&litMatcher{
											pos:        position{line: 317, col: 18, offset: 9390},
											val:        "--",
											ignoreCase: false,
											want:       "\"--\"",
										},
										&zeroOrOneExpr{
											pos: position{line: 317, col: 23, offset: 9395},
											expr: &seqExpr{
												pos: position{line: 317, col: 24, offset: 9396},
												exprs: []any{
													&charClassMatcher{
														pos:        position{line: 317, col: 24, offset: 9396},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
													&zeroOrMoreExpr{
														pos: position{line: 317, col: 30, offset: 9402},
														expr: &charClassMatcher{
															pos:        position{line: 317, col: 30, offset: 9402},
															val:        "[^\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
											},
										},
									},
								},
								&seqExpr{
									pos: position{line: 317, col: 43, offset: 9415},
									exprs: []any{
										&litMatcher{
											pos:        position{line: 317, col: 43, offset: 9415},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 317, col: 47, offset: 9419},
											expr: &charClassMatcher{
												pos:        position{line: 317, col: 47, offset: 9419},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 317, col: 59, offset: 9431},
							alternatives: []any{
								&litMatcher{
									pos:        position{line: 317, col: 59, offset: 9431},
									val:        "\r\n",
									ignoreCase: false,
									want:       "\"\\r\\n\"",
								},
								&litMatcher{
									pos:        position{line: 317, col: 68, offset: 9440},
									val:        "\n",
									ignoreCase: false,
									want:       "\"\\n\"",
								},
								&litMatcher{
									pos:        position{line: 317, col: 75, offset: 9447},
									val:        "\r",
									ignoreCase: false,
									want:       "\"\\r\"",
								},
								&ruleRefExpr{
									pos:  position{line: 317, col: 82, offset: 9454},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockComment",
			pos:  position{line: 321, col: 1, offset: 9487},
			expr: &actionExpr{
				pos: position{line: 321, col: 17, offset: 9503},
				run: (*parser).callonBlockComment1,
				expr: &seqExpr{
					pos: position{line: 321, col: 17, offset: 9503},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 321, col: 17, offset: 9503},
							val:        "/*",
							ignoreCase: false,
							want:       "\"/*\"",
						},
						&labeledExpr{
							pos:   position{line: 321, col: 22, offset: 9508},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 321, col: 30, offset: 9516},
								expr: &seqExpr{
									pos: position{line: 321, col: 32, offset: 9518},
									exprs: []any{
										&notExpr{
											pos: position{line: 321, col: 32, offset: 9518},
											expr: &litMatcher{
												pos:        position{line: 321, col: 33, offset: 9519},
												val:        "*/",
												ignoreCase: false,
												want:       "\"*/\"",
											},
										},
										&anyMatcher{
											line: 321, col: 38, offset: 9524,
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 321, col: 43, offset: 9529},
							val:        "*/",
							ignoreCase: false,
							want:       "\"*/\"",
						},
					},
				},
			},
		},
		{
			name: "LeaveStmt",
			pos:  position{line: 326, col: 1, offset: 9581},
			expr: &actionExpr{
				pos: position{line: 326, col: 14, offset: 9594},
				run: (*parser).callonLeaveStmt1,
				expr: &seqExpr{
					pos: position{line: 326, col: 14, offset: 9594},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 326, col: 14, offset: 9594},
							name: "LEAVE",
						},
						&ruleRefExpr{
							pos:  position{line: 326, col: 20, offset: 9600},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 326, col: 22, offset: 9602},
							label: "label",
							expr: &zeroOrOneExpr{
								pos: position{line: 326, col: 28, offset: 9608},
								expr: &ruleRefExpr{
									pos:  position{line: 326, col: 28, offset: 9608},
									name: "IdentifierName",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IterateStmt",
			pos:  position{line: 336, col: 1, offset: 9837},
			expr: &actionExpr{
				pos: position{line: 336, col: 16, offset: 9852},
				run: (*parser).callonIterateStmt1,
				expr: &seqExpr{
					pos: position{line: 336, col: 16, offset: 9852},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 336, col: 16, offset: 9852},
							name: "ITERATE",
						},
						&ruleRefExpr{
							pos:  position{line: 336, col: 24, offset: 9860},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 336, col: 26, offset: 9862},
							label: "label",
							expr: &ruleRefExpr{
								pos:  position{line: 336, col: 32, offset: 9868},
								name: "IdentifierName",
							},
						},
					},
				},
			},
		},
		{
			name: "ReturnStmt",
			pos:  position{line: 346, col: 1, offset: 10097},
			expr: &actionExpr{
				pos: position{line: 346, col: 15, offset: 10111},
				run: (*parser).callonReturnStmt1,
				expr: &seqExpr{
					pos: position{line: 346, col: 15, offset: 10111},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 346, col: 15, offset: 10111},
							name: "RETURN",
						},
						&ruleRefExpr{
							pos:  position{line: 346, col: 22, offset: 10118},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 346, col: 24, offset: 10120},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 346, col: 29, offset: 10125},
								name: "ConsumeUntilSemicolon",
							},
						},
					},
				},
			},
		},
		{
			name: "DeclareStmt",
			pos:  position{line: 353, col: 1, offset: 10253},
			expr: &actionExpr{
				pos: position{line: 353, col: 16, offset: 10268},
				run: (*parser).callonDeclareStmt1,
				expr: &seqExpr{
					pos: position{line: 353, col: 16, offset: 10268},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 353, col: 16, offset: 10268},
							name: "DECLARE",
						},
						&ruleRefExpr{
							pos:  position{line: 353, col: 24, offset: 10276},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 353, col: 26, offset: 10278},
							label: "text",
							expr: &ruleRefExpr{
								pos:  position{line: 353, col: 31, offset: 10283},
								name: "ConsumeUntilSemicolon",
							},
						},
					},
				},
			},
		},
		{
			name: "GenericStmt",
			pos:  position{line: 360, col: 1, offset: 10455},
			expr: &actionExpr{
				pos: position{line: 360, col: 16, offset: 10470},
				run: (*parser).callonGenericStmt1,
				expr: &seqExpr{
					pos: position{line: 360, col: 16, offset: 10470},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 360, col: 16, offset: 10470},
							label: "kind",
							expr: &ruleRefExpr{
								pos:  position{line: 360, col: 21, offset: 10475},
								name: "IdentifierName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 360, col: 36, offset: 10490},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 360, col: 38, offset: 10492},
							label: "text",
							expr: &ruleRefExpr{
								pos:  position{line: 360, col: 43, offset: 10497},
								name: "ConsumeUntilSemicolon",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLContentAny",
			pos:  position{line: 366, col: 1, offset: 10605},
			expr: &choiceExpr{
				pos: position{line: 366, col: 18, offset: 10622},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 366, col: 18, offset: 10622},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 366, col: 33, offset: 10637},
						name: "Comment",
					},
					&ruleRefExpr{
						pos:  position{line: 366, col: 43, offset: 10647},
						name: "Whitespace",
					},
					&seqExpr{
						pos: position{line: 366, col: 56, offset: 10660},
						exprs: []any{
							&litMatcher{
								pos:        position{line: 366, col: 56, offset: 10660},
								val:        "(",
								ignoreCase: false,
								want:       "\"(\"",
							},
							&ruleRefExpr{
								pos:  position{line: 366, col: 60, offset: 10664},
								name: "_",
							},
							&zeroOrMoreExpr{
								pos: position{line: 366, col: 62, offset: 10666},
								expr: &seqExpr{
									pos: position{line: 366, col: 63, offset: 10667},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 366, col: 63, offset: 10667},
											name: "SQLContentAny",
										},
										&ruleRefExpr{
											pos:  position{line: 366, col: 77, offset: 10681},
											name: "_",
										},
									},
								},
							},
							&litMatcher{
								pos:        position{line: 366, col: 81, offset: 10685},
								val:        ")",
								ignoreCase: false,
								want:       "\")\"",
							},
						},
					},
					&seqExpr{
						pos: position{line: 366, col: 87, offset: 10691},
						exprs: []any{
							&notExpr{
								pos: position{line: 366, col: 87, offset: 10691},
								expr: &litMatcher{
									pos:        position{line: 366, col: 88, offset: 10692},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
							},
							&notExpr{
								pos: position{line: 366, col: 92, offset: 10696},
								expr: &litMatcher{
									pos:        position{line: 366, col: 93, offset: 10697},
									val:        ")",
									ignoreCase: false,
									want:       "\")\"",
								},
							},
							&anyMatcher{
								line: 366, col: 97, offset: 10701,
							},
						},
					},
				},
			},
		},
		{
			name: "ConsumeUntilSemicolon",
			pos:  position{line: 368, col: 1, offset: 10704},
			expr: &actionExpr{
				pos: position{line: 368, col: 26, offset: 10729},
				run: (*parser).callonConsumeUntilSemicolon1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 368, col: 26, offset: 10729},
					expr: &choiceExpr{
						pos: position{line: 368, col: 27, offset: 10730},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 368, col: 27, offset: 10730},
								name: "QuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 368, col: 42, offset: 10745},
								name: "Comment",
							},
							&ruleRefExpr{
								pos:  position{line: 368, col: 52, offset: 10755},
								name: "Whitespace",
							},
							&seqExpr{
								pos: position{line: 368, col: 65, offset: 10768},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 368, col: 65, offset: 10768},
										val:        "(",
										ignoreCase: false,
										want:       "\"(\"",
									},
									&ruleRefExpr{
										pos:  position{line: 368, col: 69, offset: 10772},
										name: "_",
									},
									&zeroOrMoreExpr{
										pos: position{line: 368, col: 71, offset: 10774},
										expr: &seqExpr{
											pos: position{line: 368, col: 72, offset: 10775},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 368, col: 72, offset: 10775},
													name: "SQLContentAny",
												},
												&ruleRefExpr{
													pos:  position{line: 368, col: 86, offset: 10789},
													name: "_",
												},
											},
										},
									},
									&litMatcher{
										pos:        position{line: 368, col: 90, offset: 10793},
										val:        ")",
										ignoreCase: false,
										want:       "\")\"",
									},
								},
							},
							&seqExpr{
								pos: position{line: 368, col: 96, offset: 10799},
								exprs: []any{
									&notExpr{
										pos: position{line: 368, col: 96, offset: 10799},
										expr: &litMatcher{
											pos:        position{line: 368, col: 97, offset: 10800},
											val:        ";",
											ignoreCase: false,
											want:       "\";\"",
										},
									},
									&notExpr{
										pos: position{line: 368, col: 101, offset: 10804},
										expr: &litMatcher{
											pos:        position{line: 368, col: 102, offset: 10805},
											val:        "(",
											ignoreCase: false,
											want:       "\"(\"",
										},
									},
									&notExpr{
										pos: position{line: 368, col: 106, offset: 10809},
										expr: &litMatcher{
											pos:        position{line: 368, col: 107, offset: 10810},
											val:        ")",
											ignoreCase: false,
											want:       "\")\"",
										},
									},
									&anyMatcher{
										line: 368, col: 111, offset: 10814,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConsumeUntilEND",
			pos:  position{line: 371, col: 1, offset: 10869},
			expr: &actionExpr{
				pos: position{line: 371, col: 20, offset: 10888},
				run: (*parser).callonConsumeUntilEND1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 371, col: 20, offset: 10888},
					expr: &choiceExpr{
						pos: position{line: 371, col: 21, offset: 10889},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 371, col: 21, offset: 10889},
								name: "QuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 371, col: 36, offset: 10904},
								name: "Comment",
							},
							&ruleRefExpr{
								pos:  position{line: 371, col: 46, offset: 10914},
								name: "Whitespace",
							},
							&seqExpr{
								pos: position{line: 371, col: 59, offset: 10927},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 371, col: 59, offset: 10927},
										val:        "(",
										ignoreCase: false,
										want:       "\"(\"",
									},
									&ruleRefExpr{
										pos:  position{line: 371, col: 63, offset: 10931},
										name: "_",
									},
									&zeroOrMoreExpr{
										pos: position{line: 371, col: 65, offset: 10933},
										expr: &seqExpr{
											pos: position{line: 371, col: 66, offset: 10934},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 371, col: 66, offset: 10934},
													name: "SQLContentAny",
												},
												&ruleRefExpr{
													pos:  position{line: 371, col: 80, offset: 10948},
													name: "_",
												},
											},
										},
									},
									&litMatcher{
										pos:        position{line: 371, col: 84, offset: 10952},
										val:        ")",
										ignoreCase: false,
										want:       "\")\"",
									},
								},
							},
							&seqExpr{
								pos: position{line: 371, col: 90, offset: 10958},
								exprs: []any{
									&notExpr{
										pos: position{line: 371, col: 90, offset: 10958},
										expr: &litMatcher{
											pos:        position{line: 371, col: 91, offset: 10959},
											val:        "END",
											ignoreCase: false,
											want:       "\"END\"",
										},
									},
									&notExpr{
										pos: position{line: 371, col: 97, offset: 10965},
										expr: &litMatcher{
											pos:        position{line: 371, col: 98, offset: 10966},
											val:        "(",
											ignoreCase: false,
											want:       "\"(\"",
										},
									},
									&notExpr{
										pos: position{line: 371, col: 102, offset: 10970},
										expr: &litMatcher{
											pos:        position{line: 371, col: 103, offset: 10971},
											val:        ")",
											ignoreCase: false,
											want:       "\")\"",
										},
									},
									&anyMatcher{
										line: 371, col: 107, offset: 10975,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConsumeUntilTHEN",
			pos:  position{line: 374, col: 1, offset: 11030},
			expr: &actionExpr{
				pos: position{line: 374, col: 21, offset: 11050},
				run: (*parser).callonConsumeUntilTHEN1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 374, col: 21, offset: 11050},
					expr: &choiceExpr{
						pos: position{line: 374, col: 22, offset: 11051},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 374, col: 22, offset: 11051},
								name: "QuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 374, col: 37, offset: 11066},
								name: "Comment",
							},
							&ruleRefExpr{
								pos:  position{line: 374, col: 47, offset: 11076},
								name: "Whitespace",
							},
							&seqExpr{
								pos: position{line: 374, col: 60, offset: 11089},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 374, col: 60, offset: 11089},
										val:        "(",
										ignoreCase: false,
										want:       "\"(\"",
									},
									&ruleRefExpr{
										pos:  position{line: 374, col: 64, offset: 11093},
										name: "_",
									},
									&zeroOrMoreExpr{
										pos: position{line: 374, col: 66, offset: 11095},
										expr: &seqExpr{
											pos: position{line: 374, col: 67, offset: 11096},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 374, col: 67, offset: 11096},
													name: "SQLContentAny",
												},
												&ruleRefExpr{
													pos:  position{line: 374, col: 81, offset: 11110},
													name: "_",
												},
											},
										},
									},
									&litMatcher{
										pos:        position{line: 374, col: 85, offset: 11114},
										val:        ")",
										ignoreCase: false,
										want:       "\")\"",
									},
								},
							},
							&seqExpr{
								pos: position{line: 374, col: 91, offset: 11120},
								exprs: []any{
									&notExpr{
										pos: position{line: 374, col: 91, offset: 11120},
										expr: &litMatcher{
											pos:        position{line: 374, col: 92, offset: 11121},
											val:        "THEN",
											ignoreCase: false,
											want:       "\"THEN\"",
										},
									},
									&notExpr{
										pos: position{line: 374, col: 99, offset: 11128},
										expr: &litMatcher{
											pos:        position{line: 374, col: 100, offset: 11129},
											val:        "(",
											ignoreCase: false,
											want:       "\"(\"",
										},
									},
									&notExpr{
										pos: position{line: 374, col: 104, offset: 11133},
										expr: &litMatcher{
											pos:        position{line: 374, col: 105, offset: 11134},
											val:        ")",
											ignoreCase: false,
											want:       "\")\"",
										},
									},
									&anyMatcher{
										line: 374, col: 109, offset: 11138,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConsumeUntilDO",
			pos:  position{line: 377, col: 1, offset: 11193},
			expr: &actionExpr{
				pos: position{line: 377, col: 19, offset: 11211},
				run: (*parser).callonConsumeUntilDO1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 377, col: 19, offset: 11211},
					expr: &choiceExpr{
						pos: position{line: 377, col: 20, offset: 11212},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 377, col: 20, offset: 11212},
								name: "QuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 377, col: 35, offset: 11227},
								name: "Comment",
							},
							&ruleRefExpr{
								pos:  position{line: 377, col: 45, offset: 11237},
								name: "Whitespace",
							},
							&seqExpr{
								pos: position{line: 377, col: 58, offset: 11250},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 377, col: 58, offset: 11250},
										val:        "(",
										ignoreCase: false,
										want:       "\"(\"",
									},
									&ruleRefExpr{
										pos:  position{line: 377, col: 62, offset: 11254},
										name: "_",
									},
									&zeroOrMoreExpr{
										pos: position{line: 377, col: 64, offset: 11256},
										expr: &seqExpr{
											pos: position{line: 377, col: 65, offset: 11257},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 377, col: 65, offset: 11257},
													name: "SQLContentAny",
												},
												&ruleRefExpr{
													pos:  position{line: 377, col: 79, offset: 11271},
													name: "_",
												},
											},
										},
									},
									&litMatcher{
										pos:        position{line: 377, col: 83, offset: 11275},
										val:        ")",
										ignoreCase: false,
										want:       "\")\"",
									},
								},
							},
							&seqExpr{
								pos: position{line: 377, col: 89, offset: 11281},
								exprs: []any{
									&notExpr{
										pos: position{line: 377, col: 89, offset: 11281},
										expr: &litMatcher{
											pos:        position{line: 377, col: 90, offset: 11282},
											val:        "DO",
											ignoreCase: false,
											want:       "\"DO\"",
										},
									},
									&notExpr{
										pos: position{line: 377, col: 95, offset: 11287},
										expr: &litMatcher{
											pos:        position{line: 377, col: 96, offset: 11288},
											val:        "(",
											ignoreCase: false,
											want:       "\"(\"",
										},
									},
									&notExpr{
										pos: position{line: 377, col: 100, offset: 11292},
										expr: &litMatcher{
											pos:        position{line: 377, col: 101, offset: 11293},
											val:        ")",
											ignoreCase: false,
											want:       "\")\"",
										},
									},
									&anyMatcher{
										line: 377, col: 105, offset: 11297,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConsumeUntilWHEN",
			pos:  position{line: 380, col: 1, offset: 11352},
			expr: &actionExpr{
				pos: position{line: 380, col: 21, offset: 11372},
				run: (*parser).callonConsumeUntilWHEN1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 380, col: 21, offset: 11372},
					expr: &choiceExpr{
						pos: position{line: 380, col: 22, offset: 11373},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 380, col: 22, offset: 11373},
								name: "QuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 380, col: 37, offset: 11388},
								name: "Comment",
							},
							&ruleRefExpr{
								pos:  position{line: 380, col: 47, offset: 11398},
								name: "Whitespace",
							},
							&seqExpr{
								pos: position{line: 380, col: 60, offset: 11411},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 380, col: 60, offset: 11411},
										val:        "(",
										ignoreCase: false,
										want:       "\"(\"",
									},
									&ruleRefExpr{
										pos:  position{line: 380, col: 64, offset: 11415},
										name: "_",
									},
									&zeroOrMoreExpr{
										pos: position{line: 380, col: 66, offset: 11417},
										expr: &seqExpr{
											pos: position{line: 380, col: 67, offset: 11418},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 380, col: 67, offset: 11418},
													name: "SQLContentAny",
												},
												&ruleRefExpr{
													pos:  position{line: 380, col: 81, offset: 11432},
													name: "_",
												},
											},
										},
									},
									&litMatcher{
										pos:        position{line: 380, col: 85, offset: 11436},
										val:        ")",
										ignoreCase: false,
										want:       "\")\"",
									},
								},
							},
							&seqExpr{
								pos: position{line: 380, col: 91, offset: 11442},
								exprs: []any{
									&notExpr{
										pos: position{line: 380, col: 91, offset: 11442},
										expr: &litMatcher{
											pos:        position{line: 380, col: 92, offset: 11443},
											val:        "WHEN",
											ignoreCase: false,
											want:       "\"WHEN\"",
										},
									},
									&notExpr{
										pos: position{line: 380, col: 99, offset: 11450},
										expr: &litMatcher{
											pos:        position{line: 380, col: 100, offset: 11451},
											val:        "(",
											ignoreCase: false,
											want:       "\"(\"",
										},
									},
									&notExpr{
										pos: position{line: 380, col: 104, offset: 11455},
										expr: &litMatcher{
											pos:        position{line: 380, col: 105, offset: 11456},
											val:        ")",
											ignoreCase: false,
											want:       "\")\"",
										},
									},
									&anyMatcher{
										line: 380, col: 109, offset: 11460,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StatementList",
			pos:  position{line: 385, col: 1, offset: 11534},
			expr: &actionExpr{
				pos: position{line: 385, col: 18, offset: 11551},
				run: (*parser).callonStatementList1,
				expr: &labeledExpr{
					pos:   position{line: 385, col: 18, offset: 11551},
					label: "stmts",
					expr: &oneOrMoreExpr{
						pos: position{line: 385, col: 24, offset: 11557},
						expr: &seqExpr{
							pos: position{line: 385, col: 25, offset: 11558},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 385, col: 25, offset: 11558},
									name: "Statement",
								},
								&ruleRefExpr{
									pos:  position{line: 385, col: 35, offset: 11568},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 385, col: 37, offset: 11570},
									val:        ";",
									ignoreCase: false,
									want:       "\";\"",
								},
								&ruleRefExpr{
									pos:  position{line: 385, col: 41, offset: 11574},
									name: "_",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParameterList",
			pos:  position{line: 398, col: 1, offset: 11899},
			expr: &actionExpr{
				pos: position{line: 398, col: 18, offset: 11916},
				run: (*parser).callonParameterList1,
				expr: &seqExpr{
					pos: position{line: 398, col: 18, offset: 11916},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 398, col: 18, offset: 11916},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 398, col: 24, offset: 11922},
								name: "Parameter",
							},
						},
						&labeledExpr{
							pos:   position{line: 398, col: 34, offset: 11932},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 398, col: 39, offset: 11937},
								expr: &seqExpr{
									pos: position{line: 398, col: 40, offset: 11938},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 398, col: 40, offset: 11938},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 398, col: 42, offset: 11940},
											val:        ",",
											ignoreCase: false,
											want:       "\",\"",
										},
										&ruleRefExpr{
											pos:  position{line: 398, col: 46, offset: 11944},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 398, col: 48, offset: 11946},
											name: "Parameter",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Parameter",
			pos:  position{line: 411, col: 1, offset: 12287},
			expr: &actionExpr{
				pos: position{line: 411, col: 14, offset: 12300},
				run: (*parser).callonParameter1,
				expr: &seqExpr{
					pos: position{line: 411, col: 14, offset: 12300},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 411, col: 14, offset: 12300},
							label: "mode",
							expr: &zeroOrOneExpr{
								pos: position{line: 411, col: 19, offset: 12305},
								expr: &ruleRefExpr{
									pos:  position{line: 411, col: 19, offset: 12305},
									name: "ParameterMode",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 411, col: 34, offset: 12320},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 411, col: 36, offset: 12322},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 411, col: 41, offset: 12327},
								name: "IdentifierName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 411, col: 56, offset: 12342},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 411, col: 58, offset: 12344},
							label: "dataType",
							expr: &ruleRefExpr{
								pos:  position{line: 411, col: 67, offset: 12353},
								name: "TypeName",
							},
						},
					},
				},
			},
		},
		{
			name: "ParameterMode",
			pos:  position{line: 420, col: 1, offset: 12512},
			expr: &actionExpr{
				pos: position{line: 420, col: 18, offset: 12529},
				run: (*parser).callonParameterMode1,
				expr: &choiceExpr{
					pos: position{line: 420, col: 19, offset: 12530},
					alternatives: []any{
						&ruleRefExpr{
							pos:  position{line: 420, col: 19, offset: 12530},
							name: "IN",
						},
						&ruleRefExpr{
							pos:  position{line: 420, col: 24, offset: 12535},
							name: "OUT",
						},
						&ruleRefExpr{
							pos:  position{line: 420, col: 30, offset: 12541},
							name: "INOUT",
						},
					},
				},
			},
		},
		{
			name: "VariableList",
			pos:  position{line: 425, col: 1, offset: 12618},
			expr: &actionExpr{
				pos: position{line: 425, col: 17, offset: 12634},
				run: (*parser).callonVariableList1,
				expr: &seqExpr{
					pos: position{line: 425, col: 17, offset: 12634},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 425, col: 17, offset: 12634},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 425, col: 23, offset: 12640},
								name: "IdentifierName",
							},
						},
						&labeledExpr{
							pos:   position{line: 425, col: 38, offset: 12655},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 425, col: 43, offset: 12660},
								expr: &seqExpr{
									pos: position{line: 425, col: 44, offset: 12661},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 425, col: 44, offset: 12661},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 425, col: 46, offset: 12663},
											val:        ",",
											ignoreCase: false,
											want:       "\",\"",
										},
										&ruleRefExpr{
											pos:  position{line: 425, col: 50, offset: 12667},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 425, col: 52, offset: 12669},
											name: "IdentifierName",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeName",
			pos:  position{line: 436, col: 1, offset: 12942},
			expr: &actionExpr{
				pos: position{line: 436, col: 13, offset: 12954},
				run: (*parser).callonTypeName1,
				expr: &seqExpr{
					pos: position{line: 436, col: 13, offset: 12954},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 436, col: 13, offset: 12954},
							label: "baseType",
							expr: &charClassMatcher{
								pos:        position{line: 436, col: 22, offset: 12963},
								val:        "[A-Za-z]",
								ranges:     []rune{'A', 'Z', 'a', 'z'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 436, col: 30, offset: 12971},
							expr: &charClassMatcher{
								pos:        position{line: 436, col: 30, offset: 12971},
								val:        "[A-Za-z0-9_]",
								chars:      []rune{'_'},
								ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 436, col: 44, offset: 12985},
							label: "params",
							expr: &zeroOrOneExpr{
								pos: position{line: 436, col: 51, offset: 12992},
								expr: &seqExpr{
									pos: position{line: 436, col: 52, offset: 12993},
									exprs: []any{
										&litMatcher{
											pos:        position{line: 436, col: 52, offset: 12993},
											val:        "(",
											ignoreCase: false,
											want:       "\"(\"",
										},
										&oneOrMoreExpr{
											pos: position{line: 436, col: 56, offset: 12997},
											expr: &charClassMatcher{
												pos:        position{line: 436, col: 56, offset: 12997},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 436, col: 63, offset: 13004},
											expr: &seqExpr{
												pos: position{line: 436, col: 64, offset: 13005},
												exprs: []any{
													&litMatcher{
														pos:        position{line: 436, col: 64, offset: 13005},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
													&oneOrMoreExpr{
														pos: position{line: 436, col: 68, offset: 13009},
														expr: &charClassMatcher{
															pos:        position{line: 436, col: 68, offset: 13009},
															val:        "[0-9]",
															ranges:     []rune{'0', '9'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 436, col: 77, offset: 13018},
											val:        ")",
											ignoreCase: false,
											want:       "\")\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 436, col: 83, offset: 13024},
							label: "modifiers",
							expr: &zeroOrMoreExpr{
								pos: position{line: 436, col: 93, offset: 13034},
								expr: &seqExpr{
									pos: position{line: 436, col: 94, offset: 13035},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 436, col: 94, offset: 13035},
											name: "_",
										},
										&choiceExpr{
											pos: position{line: 436, col: 97, offset: 13038},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 436, col: 97, offset: 13038},
													name: "UNSIGNED",
												},
												&ruleRefExpr{
													pos:  position{line: 436, col: 108, offset: 13049},
													name: "SIGNED",
												},
												&ruleRefExpr{
													pos:  position{line: 436, col: 117, offset: 13058},
													name: "ZEROFILL",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IdentifierName",
			pos:  position{line: 441, col: 1, offset: 13120},
			expr: &actionExpr{
				pos: position{line: 441, col: 19, offset: 13138},
				run: (*parser).callonIdentifierName1,
				expr: &seqExpr{
					pos: position{line: 441, col: 19, offset: 13138},
					exprs: []any{
						&charClassMatcher{
							pos:        position{line: 441, col: 19, offset: 13138},
							val:        "[A-Za-z_]",
							chars:      []rune{'_'},
							ranges:     []rune{'A', 'Z', 'a', 'z'},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 441, col: 28, offset: 13147},
							expr: &charClassMatcher{
								pos:        position{line: 441, col: 28, offset: 13147},
								val:        "[A-Za-z0-9_]",
								chars:      []rune{'_'},
								ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "FunctionAttributes",
			pos:  position{line: 446, col: 1, offset: 13242},
			expr: &actionExpr{
				pos: position{line: 446, col: 23, offset: 13264},
				run: (*parser).callonFunctionAttributes1,
				expr: &labeledExpr{
					pos:   position{line: 446, col: 23, offset: 13264},
					label: "attribute",
					expr: &oneOrMoreExpr{
						pos: position{line: 446, col: 33, offset: 13274},
						expr: &seqExpr{
							pos: position{line: 446, col: 34, offset: 13275},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 446, col: 34, offset: 13275},
									name: "FunctionAttribute",
								},
								&ruleRefExpr{
									pos:  position{line: 446, col: 52, offset: 13293},
									name: "_",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FunctionAttribute",
			pos:  position{line: 450, col: 1, offset: 13328},
			expr: &choiceExpr{
				pos: position{line: 450, col: 22, offset: 13349},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 450, col: 22, offset: 13349},
						name: "DETERMINISTIC",
					},
					&seqExpr{
						pos: position{line: 450, col: 38, offset: 13365},
						exprs: []any{
							&ruleRefExpr{
								pos:  position{line: 450, col: 38, offset: 13365},
								name: "NOT",
							},
							&ruleRefExpr{
								pos:  position{line: 450, col: 42, offset: 13369},
								name: "_",
							},
							&ruleRefExpr{
								pos:  position{line: 450, col: 44, offset: 13371},
								name: "DETERMINISTIC",
							},
						},
					},
					&seqExpr{
						pos: position{line: 450, col: 60, offset: 13387},
						exprs: []any{
							&ruleRefExpr{
								pos:  position{line: 450, col: 60, offset: 13387},
								name: "READS",
							},
							&ruleRefExpr{
								pos:  position{line: 450, col: 66, offset: 13393},
								name: "_",
							},
							&ruleRefExpr{
								pos:  position{line: 450, col: 68, offset: 13395},
								name: "SQL",
							},
							&ruleRefExpr{
								pos:  position{line: 450, col: 72, offset: 13399},
								name: "_",
							},
							&ruleRefExpr{
								pos:  position{line: 450, col: 74, offset: 13401},
								name: "DATA",
							},
						},
					},
					&seqExpr{
						pos: position{line: 450, col: 81, offset: 13408},
						exprs: []any{
							&ruleRefExpr{
								pos:  position{line: 450, col: 81, offset: 13408},
								name: "MODIFIES",
							},
							&ruleRefExpr{
								pos:  position{line: 450, col: 90, offset: 13417},
								name: "_",
							},
							&ruleRefExpr{
								pos:  position{line: 450, col: 92, offset: 13419},
								name: "SQL",
							},
							&ruleRefExpr{
								pos:  position{line: 450, col: 96, offset: 13423},
								name: "_",
							},
							&ruleRefExpr{
								pos:  position{line: 450, col: 98, offset: 13425},
								name: "DATA",
							},
						},
					},
					&seqExpr{
						pos: position{line: 450, col: 105, offset: 13432},
						exprs: []any{
							&ruleRefExpr{
								pos:  position{line: 450, col: 105, offset: 13432},
								name: "NO",
							},
							&ruleRefExpr{
								pos:  position{line: 450, col: 108, offset: 13435},
								name: "_",
							},
							&ruleRefExpr{
								pos:  position{line: 450, col: 110, offset: 13437},
								name: "SQL",
							},
						},
					},
					&seqExpr{
						pos: position{line: 450, col: 116, offset: 13443},
						exprs: []any{
							&ruleRefExpr{
								pos:  position{line: 450, col: 116, offset: 13443},
								name: "CONTAINS",
							},
							&ruleRefExpr{
								pos:  position{line: 450, col: 125, offset: 13452},
								name: "_",
							},
							&ruleRefExpr{
								pos:  position{line: 450, col: 127, offset: 13454},
								name: "SQL",
							},
						},
					},
					&actionExpr{
						pos: position{line: 450, col: 133, offset: 13460},
						run: (*parser).callonFunctionAttribute27,
						expr: &seqExpr{
							pos: position{line: 450, col: 133, offset: 13460},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 450, col: 133, offset: 13460},
									name: "SQL",
								},
								&ruleRefExpr{
									pos:  position{line: 450, col: 137, offset: 13464},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 450, col: 139, offset: 13466},
									name: "SECURITY",
								},
								&ruleRefExpr{
									pos:  position{line: 450, col: 148, offset: 13475},
									name: "_",
								},
								&choiceExpr{
									pos: position{line: 450, col: 151, offset: 13478},
									alternatives: []any{
										&ruleRefExpr{
											pos:  position{line: 450, col: 151, offset: 13478},
											name: "DEFINER",
										},
										&ruleRefExpr{
											pos:  position{line: 450, col: 161, offset: 13488},
											name: "INVOKER",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Whitespace",
			pos:  position{line: 454, col: 1, offset: 13550},
			expr: &oneOrMoreExpr{
				pos: position{line: 454, col: 15, offset: 13564},
				expr: &charClassMatcher{
					pos:        position{line: 454, col: 15, offset: 13564},
					val:        "[ \\t\\r\\n]",
					chars:      []rune{' ', '\t', '\r', '\n'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "_",
			pos:  position{line: 457, col: 1, offset: 13601},
			expr: &zeroOrMoreExpr{
				pos: position{line: 457, col: 6, offset: 13606},
				expr: &choiceExpr{
					pos: position{line: 457, col: 7, offset: 13607},
					alternatives: []any{
						&ruleRefExpr{
							pos:  position{line: 457, col: 7, offset: 13607},
							name: "Comment",
						},
						&ruleRefExpr{
							pos:  position{line: 457, col: 17, offset: 13617},
							name: "Whitespace",
						},
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 460, col: 1, offset: 13646},
			expr: &notExpr{
				pos: position{line: 460, col: 8, offset: 13653},
				expr: &anyMatcher{
					line: 460, col: 9, offset: 13654,
				},
			},
		},
	},
}

func (c *current) onInput1(stmt any) (any, error) {
	return stmt, nil
}

func (p *parser) callonInput1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInput1(stack["stmt"])
}

func (c *current) onStatement1(label, stmt any) (any, error) {
	if label != nil {
		stmt.(StatementAST).SetLabel(label.(string))
	}
	return stmt, nil
}

func (p *parser) callonStatement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatement1(stack["label"], stack["stmt"])
}

func (c *current) onLabel1(label any) (any, error) {
	return label, nil
}

func (p *parser) callonLabel1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabel1(stack["label"])
}

func (c *current) onCreateProcedureStmt1(name, params, body any) (any, error) {
	return &CreateProcedureStmt{
		BaseStatement: makeBaseStatement(c),
		Name:          toString(name),
		Parameters:    toParameterList(params),
		Body:          toStatementList(body),
	}, nil
}

func (p *parser) callonCreateProcedureStmt1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCreateProcedureStmt1(stack["name"], stack["params"], stack["body"])
}

func (c *current) onCreateFunctionStmt1(name, params, returnType, attributes, body any) (any, error) {
	return &CreateFunctionStmt{
		BaseStatement: makeBaseStatement(c),
		Name:          toString(name),
		Parameters:    toParameterList(params),
		ReturnType:    toString(returnType),
		Body:          toStatementList(body),
	}, nil
}

func (p *parser) callonCreateFunctionStmt1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCreateFunctionStmt1(stack["name"], stack["params"], stack["returnType"], stack["attributes"], stack["body"])
}

func (c *current) onIfStmt1(condition, thenStmts, elseifs, elseClause any) (any, error) {
	return &IfStmt{
		BaseStatement: makeBaseStatement(c),
		Condition:     condition.(string),
		Then:          toStatementList(thenStmts),
		ElseIfs:       toElseIfList(elseifs),
		Else:          toStatementList(elseClause),
	}, nil
}

func (p *parser) callonIfStmt1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIfStmt1(stack["condition"], stack["thenStmts"], stack["elseifs"], stack["elseClause"])
}

func (c *current) onElseIfClause1(condition, stmts any) (any, error) {
	return ElseIfClause{
		BaseStatement: makeBaseStatement(c),
		Condition:     condition.(string),
		Then:          toStatementList(stmts),
	}, nil
}

func (p *parser) callonElseIfClause1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseIfClause1(stack["condition"], stack["stmts"])
}

func (c *current) onElseClause1(stmts any) (any, error) {
	return toStatementList(stmts), nil
}

func (p *parser) callonElseClause1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseClause1(stack["stmts"])
}

func (c *current) onWhileStmt1(condition, body any) (any, error) {
	return &WhileStmt{
		BaseStatement: makeBaseStatement(c),
		Condition:     condition.(string),
		Body:          toStatementList(body),
	}, nil
}

func (p *parser) callonWhileStmt1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhileStmt1(stack["condition"], stack["body"])
}

func (c *current) onLoopStmt1(body any) (any, error) {
	return &LoopStmt{
		BaseStatement: makeBaseStatement(c),
		Body:          toStatementList(body),
	}, nil
}

func (p *parser) callonLoopStmt1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLoopStmt1(stack["body"])
}

func (c *current) onRepeatStmt1(body, condition any) (any, error) {
	return &RepeatStmt{
		BaseStatement: makeBaseStatement(c),
		Body:          toStatementList(body),
		Condition:     condition.(string),
	}, nil
}

func (p *parser) callonRepeatStmt1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRepeatStmt1(stack["body"], stack["condition"])
}

func (c *current) onCaseStmt1(expr, whens, elseClause any) (any, error) {
	return &CaseStmt{
		BaseStatement: makeBaseStatement(c),
		Expression:    expr.(string),
		WhenClauses:   toWhenList(whens),
		Else:          toStatementList(elseClause),
	}, nil
}

func (p *parser) callonCaseStmt1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCaseStmt1(stack["expr"], stack["whens"], stack["elseClause"])
}

func (c *current) onWhenClause1(condition, stmts any) (any, error) {
	return WhenClause{
		BaseStatement: makeBaseStatement(c),
		Condition:     condition.(string),
		Then:          toStatementList(stmts),
	}, nil
}

func (p *parser) callonWhenClause1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhenClause1(stack["condition"], stack["stmts"])
}

func (c *current) onBeginStmt1(body any) (any, error) {
	return &BeginStmt{
		BaseStatement: makeBaseStatement(c),
		Body:          toStatementList(body),
	}, nil
}

func (p *parser) callonBeginStmt1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBeginStmt1(stack["body"])
}

func (c *current) onSingleQuotedString1(content any) (any, error) {
	var result []byte
	result = append(result, '\'')
	for _, part := range content.([]interface{}) {
		result = append(result, part.([]byte)...)
	}
	result = append(result, '\'')
	return result, nil
}

func (p *parser) callonSingleQuotedString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedString1(stack["content"])
}

func (c *current) onSingleQuoteContent2() (any, error) {
	return []byte("''"), nil
}

func (p *parser) callonSingleQuoteContent2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteContent2()
}

func (c *current) onSingleQuoteContent4() (any, error) {
	return []byte("\\'"), nil
}

func (p *parser) callonSingleQuoteContent4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteContent4()
}

func (c *current) onSingleQuoteContent6() (any, error) {
	return []byte("\\n"), nil
}

func (p *parser) callonSingleQuoteContent6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteContent6()
}

func (c *current) onSingleQuoteContent8() (any, error) {
	return []byte("\\\\"), nil
}

func (p *parser) callonSingleQuoteContent8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteContent8()
}

func (c *current) onSingleQuoteContent10() (any, error) {
	return c.text, nil
}

func (p *parser) callonSingleQuoteContent10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteContent10()
}

func (c *current) onDoubleQuotedString1(content any) (any, error) {
	var result []byte
	result = append(result, '"')
	for _, part := range content.([]interface{}) {
		result = append(result, part.([]byte)...)
	}
	result = append(result, '"')
	return result, nil
}

func (p *parser) callonDoubleQuotedString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedString1(stack["content"])
}

func (c *current) onDoubleQuoteContent2() (any, error) {
	return []byte("\"\""), nil
}

func (p *parser) callonDoubleQuoteContent2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteContent2()
}

func (c *current) onDoubleQuoteContent4() (any, error) {
	return []byte("\\\""), nil
}

func (p *parser) callonDoubleQuoteContent4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteContent4()
}

func (c *current) onDoubleQuoteContent6() (any, error) {
	return []byte("\\n"), nil
}

func (p *parser) callonDoubleQuoteContent6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteContent6()
}

func (c *current) onDoubleQuoteContent8() (any, error) {
	return []byte("\\\\"), nil
}

func (p *parser) callonDoubleQuoteContent8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteContent8()
}

func (c *current) onDoubleQuoteContent10() (any, error) {
	return c.text, nil
}

func (p *parser) callonDoubleQuoteContent10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteContent10()
}

func (c *current) onBacktickString1(content any) (any, error) {
	var result []byte
	result = append(result, '`')
	for _, part := range content.([]interface{}) {
		result = append(result, part.([]byte)...)
	}
	result = append(result, '`')
	return result, nil
}

func (p *parser) callonBacktickString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBacktickString1(stack["content"])
}

func (c *current) onBacktickContent2() (any, error) {
	return []byte("``"), nil
}

func (p *parser) callonBacktickContent2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBacktickContent2()
}

func (c *current) onBacktickContent4() (any, error) {
	return c.text, nil
}

func (p *parser) callonBacktickContent4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBacktickContent4()
}

func (c *current) onLineComment1() (any, error) {
	return c.text, nil
}

func (p *parser) callonLineComment1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineComment1()
}

func (c *current) onBlockComment1(content any) (any, error) {
	return c.text, nil
}

func (p *parser) callonBlockComment1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockComment1(stack["content"])
}

func (c *current) onLeaveStmt1(label any) (any, error) {
	stmt := &LeaveStmt{
		BaseStatement: makeBaseStatement(c),
	}
	// Override the Label field with the referenced label
	stmt.Label = toString(label)
	return stmt, nil
}

func (p *parser) callonLeaveStmt1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLeaveStmt1(stack["label"])
}

func (c *current) onIterateStmt1(label any) (any, error) {
	stmt := &IterateStmt{
		BaseStatement: makeBaseStatement(c),
	}
	// Override the Label field with the referenced label
	stmt.Label = toString(label)
	return stmt, nil
}

func (p *parser) callonIterateStmt1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIterateStmt1(stack["label"])
}

func (c *current) onReturnStmt1(expr any) (any, error) {
	return &ReturnStmt{
		BaseStatement: makeBaseStatement(c),
	}, nil
}

func (p *parser) callonReturnStmt1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReturnStmt1(stack["expr"])
}

func (c *current) onDeclareStmt1(text any) (any, error) {
	return &DeclareStmt{
		BaseStatement: makeBaseStatement(c),
	}, nil
}

func (p *parser) callonDeclareStmt1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeclareStmt1(stack["text"])
}

func (c *current) onGenericStmt1(kind, text any) (any, error) {
	return &GenericStmt{
		BaseStatement: makeBaseStatement(c),
	}, nil
}

func (p *parser) callonGenericStmt1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericStmt1(stack["kind"], stack["text"])
}

func (c *current) onConsumeUntilSemicolon1() (any, error) {
	return strings.TrimSpace(string(c.text)), nil
}

func (p *parser) callonConsumeUntilSemicolon1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConsumeUntilSemicolon1()
}

func (c *current) onConsumeUntilEND1() (any, error) {
	return strings.TrimSpace(string(c.text)), nil
}

func (p *parser) callonConsumeUntilEND1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConsumeUntilEND1()
}

func (c *current) onConsumeUntilTHEN1() (any, error) {
	return strings.TrimSpace(string(c.text)), nil
}

func (p *parser) callonConsumeUntilTHEN1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConsumeUntilTHEN1()
}

func (c *current) onConsumeUntilDO1() (any, error) {
	return strings.TrimSpace(string(c.text)), nil
}

func (p *parser) callonConsumeUntilDO1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConsumeUntilDO1()
}

func (c *current) onConsumeUntilWHEN1() (any, error) {
	return strings.TrimSpace(string(c.text)), nil
}

func (p *parser) callonConsumeUntilWHEN1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConsumeUntilWHEN1()
}

func (c *current) onStatementList1(stmts any) (any, error) {
	var result []StatementAST
	for _, item := range stmts.([]interface{}) {
		if arr, ok := item.([]interface{}); ok && len(arr) > 0 {
			if stmt, ok := arr[0].(StatementAST); ok {
				result = append(result, stmt)
			}
		}
	}
	return result, nil
}

func (p *parser) callonStatementList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStatementList1(stack["stmts"])
}

func (c *current) onParameterList1(first, rest any) (any, error) {
	params := []Parameter{first.(Parameter)}
	for _, item := range rest.([]interface{}) {
		if arr, ok := item.([]interface{}); ok && len(arr) > 3 {
			if param, ok := arr[3].(Parameter); ok {
				params = append(params, param)
			}
		}
	}
	return params, nil
}

func (p *parser) callonParameterList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParameterList1(stack["first"], stack["rest"])
}

func (c *current) onParameter1(mode, name, dataType any) (any, error) {
	return Parameter{
		Mode: toString(mode),
		Name: toString(name),
		Type: toString(dataType),
	}, nil
}

func (p *parser) callonParameter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParameter1(stack["mode"], stack["name"], stack["dataType"])
}

func (c *current) onParameterMode1() (any, error) {
	return strings.ToUpper(string(c.text)), nil
}

func (p *parser) callonParameterMode1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParameterMode1()
}

func (c *current) onVariableList1(first, rest any) (any, error) {
	vars := []string{toString(first)}
	for _, item := range rest.([]interface{}) {
		if arr, ok := item.([]interface{}); ok && len(arr) > 3 {
			vars = append(vars, toString(arr[3]))
		}
	}
	return vars, nil
}

func (p *parser) callonVariableList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariableList1(stack["first"], stack["rest"])
}

func (c *current) onTypeName1(baseType, params, modifiers any) (any, error) {
	return string(c.text), nil
}

func (p *parser) callonTypeName1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeName1(stack["baseType"], stack["params"], stack["modifiers"])
}

func (c *current) onIdentifierName1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName1()
}

func (c *current) onFunctionAttributes1(attribute any) (any, error) {
	return attribute, nil
}

func (p *parser) callonFunctionAttributes1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunctionAttributes1(stack["attribute"])
}

func (c *current) onFunctionAttribute27() (any, error) {
	return strings.ToUpper(string(c.text)), nil
}

func (p *parser) callonFunctionAttribute27() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunctionAttribute27()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expressions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//	input := "input"
//	stats := Stats{}
//	_, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//	if err != nil {
//	    log.Panicln(err)
//	}
//	b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//	if err != nil {
//	    log.Panicln(err)
//	}
//	fmt.Println(string(b))
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i any, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (any, error) {
	b, err := io.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (any, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]any

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        any
}

type choiceExpr struct {
	pos          position
	alternatives []any
}

type actionExpr struct {
	pos  position
	expr any
	run  func(*parser) (any, error)
}

type recoveryExpr struct {
	pos          position
	expr         any
	recoverExpr  any
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []any
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  any
}

type expr struct {
	pos  position
	expr any
}

type (
	andExpr        expr
	notExpr        expr
	zeroOrOneExpr  expr
	zeroOrMoreExpr expr
	oneOrMoreExpr  expr
)

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   any
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[any]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]any
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]any
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]any)
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr any) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]any, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) printIndent(mark string, s string) string {
	return p.print(strings.Repeat(" ", p.depth)+mark, s)
}

func (p *parser) in(s string) string {
	res := p.printIndent(">", s)
	p.depth++
	return res
}

func (p *parser) out(s string) string {
	p.depth--
	return p.printIndent("<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() any
}

var statePool = &sync.Pool{
	New: func() any { return make(storeDict) },
}

func (sd storeDict) Discard() {
	for k := range sd {
		delete(sd, k)
	}
	statePool.Put(sd)
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := statePool.Get().(storeDict)
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state.Discard()
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node any) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node any, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[any]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[any]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val any, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRuleWrap(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRuleMemoize(rule *rule) (any, bool) {
	res, ok := p.getMemoized(rule)
	if ok {
		p.restore(res.end)
		return res.v, res.b
	}

	startMark := p.pt
	val, ok := p.parseRule(rule)
	p.setMemoized(startMark, rule, resultTuple{val, ok, p.pt})

	return val, ok
}

func (p *parser) parseRuleWrap(rule *rule) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}
	var (
		val       any
		ok        bool
		startMark = p.pt
	)

	if p.memoize {
		val, ok = p.parseRuleMemoize(rule)
	} else {
		val, ok = p.parseRule(rule)
	}

	if ok && p.debug {
		p.printIndent("MATCH", string(p.sliceFrom(startMark)))
	}
	return val, ok
}

func (p *parser) parseRule(rule *rule) (any, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExprWrap(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExprWrap(expr any) (any, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	val, ok := p.parseExpr(expr)

	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr any) (any, bool) {
	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val any
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExprWrap(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.printIndent("MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExprWrap(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExprWrap(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExprWrap(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExprWrap(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExprWrap(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRuleWrap(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]any, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExprWrap(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExprWrap(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExprWrap(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
