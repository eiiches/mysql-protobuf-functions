package main

import (
	"fmt"
	"log"
	"path/filepath"
	"strings"

	"google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/types/known/anypb"
	"google.golang.org/protobuf/types/known/durationpb"
	"google.golang.org/protobuf/types/known/emptypb"
	"google.golang.org/protobuf/types/known/fieldmaskpb"
	"google.golang.org/protobuf/types/known/structpb"
	"google.golang.org/protobuf/types/known/timestamppb"
	"google.golang.org/protobuf/types/known/wrapperspb"

	"github.com/eiiches/mysql-protobuf-functions/internal/descriptorsetjson"
	"github.com/eiiches/mysql-protobuf-functions/internal/protoreflectutils"
	"google.golang.org/protobuf/types/descriptorpb"
)

func main() {
	fileDescriptors := []protoreflect.FileDescriptor{
		descriptorpb.File_google_protobuf_descriptor_proto,
		structpb.File_google_protobuf_struct_proto,
		fieldmaskpb.File_google_protobuf_field_mask_proto,
		wrapperspb.File_google_protobuf_wrappers_proto,
		timestamppb.File_google_protobuf_timestamp_proto,
		durationpb.File_google_protobuf_duration_proto,
		anypb.File_google_protobuf_any_proto,
		emptypb.File_google_protobuf_empty_proto,
	}

	fmt.Printf("-- Generated by cmd/generate-descriptorsets; DO NOT EDIT\n")
	fmt.Println()
	fmt.Printf("-- The following FileDescriptorSets (in JSON format) are auto-generated from files\n")
	fmt.Printf("-- in https://github.com/google/protobuf, and the following license terms apply.\n")
	fmt.Println()
	fmt.Printf(`-- Copyright 2010 The Go Authors.  All rights reserved.
--
-- Redistribution and use in source and binary forms, with or without
-- modification, are permitted provided that the following conditions are
-- met:
--
--     * Redistributions of source code must retain the above copyright
-- notice, this list of conditions and the following disclaimer.
--     * Redistributions in binary form must reproduce the above
-- copyright notice, this list of conditions and the following disclaimer
-- in the documentation and/or other materials provided with the
-- distribution.
--     * Neither the name of Google Inc. nor the names of its
-- contributors may be used to endorse or promote products derived from
-- this software without specific prior written permission.
--
-- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-- "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-- LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-- A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-- OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-- SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-- LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-- DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-- THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-- (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-- OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

`)

	fmt.Printf("DELIMITER $$\n")

	for _, fileDescriptor := range fileDescriptors {
		// Build a FileDescriptorSet with dependencies
		fileDescriptorSet := protoreflectutils.BuildFileDescriptorSetWithDependencies(
			fileDescriptor,
		)

		// Convert to JSON using the new package
		jsonStr, err := descriptorsetjson.ToJson(fileDescriptorSet)
		if err != nil {
			log.Fatalf("Failed to convert %s to JSON: %v", fileDescriptor.Path(), err)
		}

		funcName := fmt.Sprintf("_pb_google_%s", strings.ReplaceAll(filepath.Base(fileDescriptor.Path()), ".", "_"))

		// Add a newline between functions for better readability
		fmt.Println()

		// Output CREATE FUNCTION statement
		fmt.Printf(`DROP FUNCTION IF EXISTS %s $$
CREATE FUNCTION %s() RETURNS JSON DETERMINISTIC
BEGIN
	RETURN CAST('%s' AS JSON);
END $$
`, funcName, funcName, escapeSQLString(jsonStr))
	}
}

func escapeSQLString(s string) string {
	// Escape single quotes and backslashes for SQL string literals
	result := ""
	for _, char := range s {
		switch char {
		case '\'':
			result += "''"
		case '\\':
			result += "\\\\"
		default:
			result += string(char)
		}
	}
	return result
}
