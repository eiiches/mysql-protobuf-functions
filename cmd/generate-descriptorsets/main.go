package main

import (
	"fmt"
	"log"
	"path/filepath"
	"regexp"
	"strings"

	"github.com/eiiches/mysql-protobuf-functions/internal/caseconv"

	"google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/types/known/anypb"
	"google.golang.org/protobuf/types/known/durationpb"
	"google.golang.org/protobuf/types/known/emptypb"
	"google.golang.org/protobuf/types/known/fieldmaskpb"
	"google.golang.org/protobuf/types/known/structpb"
	"google.golang.org/protobuf/types/known/timestamppb"
	"google.golang.org/protobuf/types/known/wrapperspb"

	"github.com/eiiches/mysql-protobuf-functions/internal/protocgenmysql"
	"github.com/eiiches/mysql-protobuf-functions/internal/protoreflectutils"
	"google.golang.org/protobuf/types/descriptorpb"
)

func main() {
	fileDescriptors := []protoreflect.FileDescriptor{
		descriptorpb.File_google_protobuf_descriptor_proto,
		structpb.File_google_protobuf_struct_proto,
		fieldmaskpb.File_google_protobuf_field_mask_proto,
		wrapperspb.File_google_protobuf_wrappers_proto,
		timestamppb.File_google_protobuf_timestamp_proto,
		durationpb.File_google_protobuf_duration_proto,
		anypb.File_google_protobuf_any_proto,
		emptypb.File_google_protobuf_empty_proto,
	}

	// Print license header
	fmt.Printf("-- Generated by cmd/protoc-gen-mysql; DO NOT EDIT\n")
	fmt.Println()
	fmt.Printf("-- The following FileDescriptorSets (in JSON format) are auto-generated from files\n")
	fmt.Printf("-- in https://github.com/google/protobuf, and the following license terms apply.\n")
	fmt.Println()
	fmt.Printf(`-- Copyright 2010 The Go Authors.  All rights reserved.
--
-- Redistribution and use in source and binary forms, with or without
-- modification, are permitted provided that the following conditions are
-- met:
--
--     * Redistributions of source code must retain the above copyright
-- notice, this list of conditions and the following disclaimer.
--     * Redistributions in binary form must reproduce the above
-- copyright notice, this list of conditions and the following disclaimer
-- in the documentation and/or other materials provided with the
-- distribution.
--     * Neither the name of Google Inc. nor the names of its
-- contributors may be used to endorse or promote products derived from
-- this software without specific prior written permission.
--
-- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-- "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-- LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-- A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-- OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-- SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-- LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-- DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-- THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-- (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-- OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

`)

	fmt.Printf("DELIMITER $$\n\n")

	for _, fileDescriptor := range fileDescriptors {
		// Build a FileDescriptorSet with dependencies
		fileDescriptorSet := protoreflectutils.BuildFileDescriptorSetWithDependencies(
			fileDescriptor,
		)

		var methodNamePrefix string
		var descriptorSetNamePrefix string
		var generateMethods bool
		if fileDescriptor.Path() == "google/protobuf/descriptor.proto" {
			methodNamePrefix = "_pb_"
			descriptorSetNamePrefix = "_pb_"
			generateMethods = true
		} else {
			methodNamePrefix = "pb_wkt_"
			descriptorSetNamePrefix = "_pb_wkt_"
			generateMethods = true
		}

		// E.g. _pb_wkt_timestamp_proto, _pb_descriptor_proto
		descriptorSetName := fmt.Sprintf("%s%s", descriptorSetNamePrefix, strings.ReplaceAll(filepath.Base(fileDescriptor.Path()), ".", "_"))

		// Use protocgenmysql.Generate to create the function
		config := protocgenmysql.GenerateConfig{
			DescriptorSetName: descriptorSetName,
			IncludeSourceInfo: false,
			GenerateMethods:   generateMethods,
			IncludeWkt:        true, // Always include WKT in generate-descriptorsets
			FileNameFunc: func(protoPath string) string {
				return descriptorSetName + ".pb.sql" // Doesn't matter since we concatenate all files later
			},
			TypePrefixFunc: func(packageName protoreflect.FullName, typeName protoreflect.FullName) string {
				if typeName == "google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault" {
					return "_pb_feature_set_edition_default"
				}
				snake := caseconv.LowerCamelToSnake(strings.ReplaceAll(strings.TrimPrefix(string(typeName), string(packageName)+"."), ".", "_"))
				// Fix specific cases: "UInt64" -> "uint64", "UInt32" -> "uint32"
				snake = strings.ReplaceAll(snake, "u_int64", "uint64")
				snake = strings.ReplaceAll(snake, "u_int32", "uint32")
				return methodNamePrefix + regexp.MustCompile("_+").ReplaceAllString(snake, "_")
			},
			FieldFilterFunc: func(field protoreflect.FieldDescriptor, functionName string) protocgenmysql.FunctionGenerationDecision {
				// Skip the problematic long function name
				if functionName == "_pb_message_options_get_deprecated_legacy_json_field_conflicts__or" {
					return protocgenmysql.DecisionCommentOut
				}
				return protocgenmysql.DecisionInclude
			},
		}

		response, err := protocgenmysql.Generate(fileDescriptorSet, config)
		if err != nil {
			log.Fatalf("Failed to generate SQL for %s: %v", fileDescriptor.Path(), err)
		}

		// Output all generated files
		for _, file := range response.File {
			if file.Content != nil {
				// Extract just the function content (skip the header and delimiter)
				content := *file.Content
				if strings.HasPrefix(content, "-- Code generated by protoc-gen-mysql. DO NOT EDIT.\n\nDELIMITER $$\n\n") {
					content = strings.TrimPrefix(content, "-- Code generated by protoc-gen-mysql. DO NOT EDIT.\n\nDELIMITER $$\n\n")
				}
				fmt.Print(content)
			}
		}
	}
}
