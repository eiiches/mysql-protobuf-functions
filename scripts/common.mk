# Generate Go code for json_options.proto in internal/jsonoptionspb
internal/jsonoptionspb/json_options.pb.go: src/json_options.proto
	@echo "Generating Go protobuf code for json_options.proto..."
	mkdir -p internal/jsonoptionspb
	protoc --proto_path=src \
		--go_out=internal/jsonoptionspb \
		--go_opt=paths=source_relative \
		--go_opt=Mjson_options.proto='github.com/eiiches/mysql-protobuf-functions/internal/jsonoptionspb' \
		src/json_options.proto

# Generate Go code for marshal_options.proto in internal/marshaloptionspb
internal/marshaloptionspb/marshal_options.pb.go: src/marshal_options.proto
	@echo "Generating Go protobuf code for marshal_options.proto..."
	mkdir -p internal/marshaloptionspb
	protoc --proto_path=src \
		--go_out=internal/marshaloptionspb \
		--go_opt=paths=source_relative \
		--go_opt=Mmarshal_options.proto='github.com/eiiches/mysql-protobuf-functions/internal/marshaloptionspb' \
		src/marshal_options.proto

# Generate Go code for descriptor_set.proto in internal/descriptorsetpb
internal/descriptorsetpb/descriptor_set.pb.go: src/descriptor_set.proto
	@echo "Generating Go protobuf code for descriptor_set.proto..."
	mkdir -p internal/descriptorsetpb
	protoc --proto_path=src \
		--go_out=internal/descriptorsetpb \
		--go_opt=paths=source_relative \
		--go_opt=Mdescriptor_set.proto='github.com/eiiches/mysql-protobuf-functions/internal/descriptorsetpb' \
		src/descriptor_set.proto

.PHONY: test
test: purge reload ensure-test-database internal/jsonoptionspb/json_options.pb.go internal/marshaloptionspb/marshal_options.pb.go internal/descriptorsetpb/descriptor_set.pb.go
	go test ./internal/...
	go test ./tests -database "root@tcp($(MYSQL_HOST):$(MYSQL_PORT))/$(MYSQL_DATABASE)" -fuzz-iterations 20 $${GO_TEST_FLAGS:-}

.PHONY: build
build: build/protobuf.sql build/protobuf-json.sql protoc-gen-mysql mysql-coverage

.PHONY: protoc-gen-mysql
protoc-gen-mysql:
	go build ./cmd/protoc-gen-mysql/

.PHONY: mysql-coverage
mysql-coverage:
	go build ./cmd/mysql-coverage

.PHONY: build/protobuf.sql
build/protobuf.sql: src/protobuf.sql cmd/protobuf-accessors/main.go scripts/common.mk
	mkdir -p build
	echo "-- Code generated by scripts/common.mk; DO NOT EDIT." > $@.tmp
	echo >> $@.tmp
	cat src/protobuf.sql >> $@.tmp
	echo >> $@.tmp
	go run cmd/protobuf-accessors/main.go >> $@.tmp
	mv $@.tmp $@

# Define the ordered list of JSON-related source files
PROTOBUF_JSON_SOURCES := \
	src/message_to_number_json.sql \
	src/json_to_number_json.sql \
	src/number_json_to_message.sql \
	src/number_json_to_json.sql \
	src/message_to_json.sql \
	src/json_to_message.sql \
	src/wkt_timestamp.sql \
	src/wkt_duration.sql \
	src/wkt_struct.sql \
	src/wkt_field_mask.sql \
	src/wkt_time_common.sql \
	src/wkt_any.sql \
	src/wkt_empty.sql \
	src/wkt_wrappers.sql \
	src/wkt.sql \
	src/util-case-conv.sql \
	src/util-base64.sql \
	src/descriptor_set.sql \
	src/protobuf-descriptor.sql \
	src/json.sql \
	src/number_json.sql

.PHONY: build/protobuf-json.sql
build/protobuf-json.sql: $(PROTOBUF_JSON_SOURCES) scripts/common.mk
	mkdir -p build
	echo "-- Code generated by scripts/common.mk; DO NOT EDIT." > $@.tmp
	$(foreach file,$(PROTOBUF_JSON_SOURCES),echo >> $@.tmp && cat $(file) >> $@.tmp;)
	echo >> $@.tmp
	go run cmd/generate-descriptorsets/main.go >> $@.tmp
	protoc --descriptor_set_out=./options.binpb \
		--include_imports \
		--proto_path=src/ \
		src/json_options.proto \
		src/marshal_options.proto
	go run ./cmd/protoc-gen-mysql \
		--descriptor_set_in=./options.binpb \
		--name=_pb_options_proto \
		--file_naming_strategy=single \
		--prefix_map=mysqlprotobuf=pb_ \
		--generate_methods \
		--mysql_out=/tmp
	cat /tmp/_pb_options_proto.pb.sql >> $@.tmp
	mv $@.tmp $@

.PHONY: reload
reload: build ensure-test-database purge
	$(MYSQL_COMMAND) < build/protobuf.sql
	$(MYSQL_COMMAND) < build/protobuf-json.sql

.PHONY: purge
purge: ensure-test-database
	$(MYSQL_COMMAND) -N -B -e "SELECT CONCAT('DROP ', r.routine_type, ' IF EXISTS ', r.routine_name, ';') AS DROP_STATEMENTS FROM information_schema.routines r WHERE r.routine_schema = database() AND (r.routine_name LIKE 'pb_%' OR r.routine_name LIKE '_pb_%');" | $(MYSQL_COMMAND)

.PHONY: show-logs
show-logs: ensure-test-database
	$(MYSQL_COMMAND) -e 'SELECT * FROM DebugLog';

.PHONY: start-profiling
start-profiling: ensure-test-database
	$(MYSQL_COMMAND) -e "UPDATE performance_schema.setup_consumers SET ENABLED = 'YES' WHERE NAME = 'events_statements_history_long';"
	$(MYSQL_COMMAND) -e "UPDATE performance_schema.setup_instruments SET ENABLED = 'YES', TIMED = 'YES' WHERE NAME LIKE 'statement/%';"
	$(MYSQL_COMMAND) -e "TRUNCATE TABLE performance_schema.events_statements_history_long;"

.PHONY: stop-profiling
stop-profiling: ensure-test-database
	$(MYSQL_COMMAND) -e 'UPDATE performance_schema.setup_consumers SET ENABLED="NO" WHERE NAME = "events_statements_history_long"; select count(*) from performance_schema.events_statements_history_long;'
	$(MYSQL_COMMAND) < scripts/perf-report.sql

.PHONY: flamegraph
flamegraph:
	set -exuo pipefail; \
	output=flamegraph-$$(date +%s).svg; \
	go run cmd/mysql-profiler/main.go -database "root@tcp($(MYSQL_HOST):$(MYSQL_PORT))/$(MYSQL_DATABASE)" | flamegraph.pl > $$output \
		&& xdg-open $$output

.PHONY: ensure-test-database
ensure-test-database: download-mysql
	$(MYSQL_COMMAND_NO_DB) -e 'CREATE DATABASE IF NOT EXISTS test';

.PHONY: coverage
coverage: purge instrument-files load-instrumented-files run-coverage-tests generate-coverage-report
	xdg-open coverage-html/index.html

.PHONY: instrument-files
instrument-files: build
	go tool pigeon -o internal/mysql/sqlflowparser/mysql_ast_parser.go internal/mysql/sqlflowparser/mysql_ast.peg
	go run cmd/mysql-coverage/main.go instrument build/protobuf.sql build/protobuf-json.sql

.PHONY: load-instrumented-files
load-instrumented-files: instrument-files ensure-test-database
	go run cmd/mysql-coverage/main.go init --database "root@tcp($(MYSQL_HOST):$(MYSQL_PORT))/$(MYSQL_DATABASE)"
	$(MYSQL_COMMAND) < build/protobuf.sql.instrumented
	$(MYSQL_COMMAND) < build/protobuf-json.sql.instrumented

.PHONY: run-coverage-tests
run-coverage-tests: load-instrumented-files
	go test ./tests -database "root@tcp($(MYSQL_HOST):$(MYSQL_PORT))/$(MYSQL_DATABASE)" -fuzz-iterations 20 $${GO_TEST_FLAGS:-}

.PHONY: generate-coverage-report
generate-coverage-report: run-coverage-tests
	go run cmd/mysql-coverage/main.go lcov --database "root@tcp($(MYSQL_HOST):$(MYSQL_PORT))/$(MYSQL_DATABASE)" --output coverage.lcov
	genhtml coverage.lcov --output-directory coverage-html --title "MySQL Protobuf Functions Coverage Report"
	@echo ""
	@echo "=== COVERAGE REPORT GENERATED ==="
	@echo "HTML Report: coverage-html/index.html"
	@echo "LCOV Data: coverage.lcov"

# Function tracing targets
.PHONY: instrument-ftrace-files
instrument-ftrace-files: build/protobuf.sql.ftraced build/protobuf-json.sql.ftraced

build/protobuf.sql.ftraced: build/protobuf.sql cmd/mysql-ftrace/main.go
	go tool pigeon -o internal/mysql/sqlflowparser/mysql_ast_parser.go internal/mysql/sqlflowparser/mysql_ast.peg
	go run cmd/mysql-ftrace/main.go instrument --trace-statements build/protobuf.sql

build/protobuf-json.sql.ftraced: build/protobuf-json.sql cmd/mysql-ftrace/main.go
	go tool pigeon -o internal/mysql/sqlflowparser/mysql_ast_parser.go internal/mysql/sqlflowparser/mysql_ast.peg
	go run cmd/mysql-ftrace/main.go instrument --trace-statements build/protobuf-json.sql

.PHONY: load-ftrace-instrumented-files
load-ftrace-instrumented-files: instrument-ftrace-files ensure-test-database
	go run cmd/mysql-ftrace/main.go init --database "root@tcp($(MYSQL_HOST):$(MYSQL_PORT))/$(MYSQL_DATABASE)"
	$(MYSQL_COMMAND) < build/protobuf.sql.ftraced
	$(MYSQL_COMMAND) < build/protobuf-json.sql.ftraced
	@echo ""

.PHONY: generate-coverage-lcov
generate-coverage-lcov: run-coverage-tests
	go run cmd/mysql-coverage/main.go lcov --database "root@tcp($(MYSQL_HOST):$(MYSQL_PORT))/$(MYSQL_DATABASE)" --output coverage.lcov
	@echo ""
	@echo "=== LCOV COVERAGE DATA GENERATED ==="
	@echo "LCOV Data: coverage.lcov"
	@echo ""

.PHONY: post-coverage-comment
post-coverage-comment: generate-coverage-lcov
	go run cmd/mysql-coverage/main.go github-comment --lcov-file coverage.lcov --github-pr-number $(GITHUB_PR_NUMBER)

.PHONY: coverage-ci
coverage-ci: generate-coverage-lcov post-coverage-comment

.PHONY: format
format:
	go tool gofumpt -l -w .
	find src/ -name "*.sql" -type f -exec sed -i 's/[[:blank:]]*$$//' {} +

.PHONY: lint
lint:
	go tool gofumpt -d .
	go tool golangci-lint run
